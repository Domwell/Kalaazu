/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.SkilltreeSkillsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * The available skills.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SkilltreeSkills extends TableImpl<SkilltreeSkillsRecord> {

    /**
     * The reference instance of <code>kalaazu.skilltree_skills</code>
     */
    public static final SkilltreeSkills SKILLTREE_SKILLS = new SkilltreeSkills();
    private static final long serialVersionUID = -694991379;
    /**
     * The column <code>kalaazu.skilltree_skills.id</code>. Primary Key.
     */
    public final TableField<SkilltreeSkillsRecord, Byte> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.name</code>. Skill name.
     */
    public final TableField<SkilltreeSkillsRecord, String> NAME = createField(
            DSL.name("name"),
            org.jooq.impl.SQLDataType.VARCHAR(255)
                                     .nullable(false)
                                     .defaultValue(org.jooq.impl.DSL.field(
                                             "",
                                             org.jooq.impl.SQLDataType.VARCHAR
                                     )),
            this,
            "Skill name."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.description</code>. Skill description.
     */
    public final TableField<SkilltreeSkillsRecord, String> DESCRIPTION = createField(
            DSL.name("description"),
            org.jooq.impl.SQLDataType.CLOB.nullable(false),
            this,
            "Skill description."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.type</code>. 0 = blue, 1 = purple, 2 = red.
     */
    public final TableField<SkilltreeSkillsRecord, Byte> TYPE = createField(
            DSL.name("type"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "0 = blue, 1 = purple, 2 = red."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.is_advanced</code>. Whether it's an advanced skill or not.
     */
    public final TableField<SkilltreeSkillsRecord, Byte> IS_ADVANCED = createField(
            DSL.name("is_advanced"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Whether it's an advanced skill or not."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.bonus_type</code>. Type of bonus the skill awards.
     */
    public final TableField<SkilltreeSkillsRecord, String> BONUS_TYPE = createField(
            DSL.name("bonus_type"),
            org.jooq.impl.SQLDataType.VARCHAR(255)
                                     .nullable(false)
                                     .defaultValue(org.jooq.impl.DSL.field(
                                             "health",
                                             org.jooq.impl.SQLDataType.VARCHAR
                                     )),
            this,
            "Type of bonus the skill awards."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.bonus_amount</code>. Amount of bonus the skill awards.
     */
    public final TableField<SkilltreeSkillsRecord, Integer> BONUS_AMOUNT = createField(
            DSL.name("bonus_amount"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.INTEGER
                                             )),
            this,
            "Amount of bonus the skill awards."
    );
    /**
     * The column <code>kalaazu.skilltree_skills.bonus_factor</code>. Factor the bonus increases with each upgrade.
     */
    public final TableField<SkilltreeSkillsRecord, Byte> BONUS_FACTOR = createField(
            DSL.name("bonus_factor"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "2",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Factor the bonus increases with each upgrade."
    );

    /**
     * Create a <code>kalaazu.skilltree_skills</code> table reference
     */
    public SkilltreeSkills() {
        this(DSL.name("skilltree_skills"), null);
    }

    /**
     * Create an aliased <code>kalaazu.skilltree_skills</code> table reference
     */
    public SkilltreeSkills(String alias) {
        this(DSL.name(alias), SKILLTREE_SKILLS);
    }

    /**
     * Create an aliased <code>kalaazu.skilltree_skills</code> table reference
     */
    public SkilltreeSkills(Name alias) {
        this(alias, SKILLTREE_SKILLS);
    }

    private SkilltreeSkills(Name alias, Table<SkilltreeSkillsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SkilltreeSkills(Name alias, Table<SkilltreeSkillsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("The available skills."));
    }

    public <O extends Record> SkilltreeSkills(Table<O> child, ForeignKey<O, SkilltreeSkillsRecord> key) {
        super(child, key, SKILLTREE_SKILLS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkilltreeSkillsRecord> getRecordType() {
        return SkilltreeSkillsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.SKILLTREE_SKILLS_PRIMARY,
                Indexes.SKILLTREE_SKILLS_SKILLTREE_SKILLS_BONUS_TYPE_IDX,
                Indexes.SKILLTREE_SKILLS_SKILLTREE_SKILLS_IS_ADVANCED_IDX,
                Indexes.SKILLTREE_SKILLS_SKILLTREE_SKILLS_NAME_IDX,
                Indexes.SKILLTREE_SKILLS_SKILLTREE_SKILLS_TYPE_IDX
        );
    }

    @Override
    public Identity<SkilltreeSkillsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_SKILLTREE_SKILLS;
    }

    @Override
    public UniqueKey<SkilltreeSkillsRecord> getPrimaryKey() {
        return Keys.KEY_SKILLTREE_SKILLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SkilltreeSkillsRecord>> getKeys() {
        return Arrays.<UniqueKey<SkilltreeSkillsRecord>>asList(Keys.KEY_SKILLTREE_SKILLS_PRIMARY);
    }

    @Override
    public SkilltreeSkills as(String alias) {
        return new SkilltreeSkills(DSL.name(alias), this);
    }

    @Override
    public SkilltreeSkills as(Name alias) {
        return new SkilltreeSkills(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkilltreeSkills rename(String name) {
        return new SkilltreeSkills(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkilltreeSkills rename(Name name) {
        return new SkilltreeSkills(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Byte, String, String, Byte, Byte, String, Integer, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
