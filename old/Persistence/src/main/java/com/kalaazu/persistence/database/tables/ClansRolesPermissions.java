/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.ClansRolesPermissionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Clan roles' permissions
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ClansRolesPermissions extends TableImpl<ClansRolesPermissionsRecord> {

    /**
     * The reference instance of <code>kalaazu.clans_roles_permissions</code>
     */
    public static final ClansRolesPermissions CLANS_ROLES_PERMISSIONS = new ClansRolesPermissions();
    private static final long serialVersionUID = 985971611;
    /**
     * The column <code>kalaazu.clans_roles_permissions.id</code>. Primary Key.
     */
    public final TableField<ClansRolesPermissionsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.clans_roles_permissions.clans_roles_id</code>.
     */
    public final TableField<ClansRolesPermissionsRecord, Integer> CLANS_ROLES_ID = createField(
            DSL.name("clans_roles_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.clans_roles_permissions.permissions_id</code>.
     */
    public final TableField<ClansRolesPermissionsRecord, Byte> PERMISSIONS_ID = createField(
            DSL.name("permissions_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.clans_roles_permissions.is_enabled</code>. Enabled value, null = inherited
     */
    public final TableField<ClansRolesPermissionsRecord, Byte> IS_ENABLED = createField(
            DSL.name("is_enabled"),
            org.jooq.impl.SQLDataType.TINYINT,
            this,
            "Enabled value, null = inherited"
    );

    /**
     * Create a <code>kalaazu.clans_roles_permissions</code> table reference
     */
    public ClansRolesPermissions() {
        this(DSL.name("clans_roles_permissions"), null);
    }

    /**
     * Create an aliased <code>kalaazu.clans_roles_permissions</code> table reference
     */
    public ClansRolesPermissions(String alias) {
        this(DSL.name(alias), CLANS_ROLES_PERMISSIONS);
    }

    /**
     * Create an aliased <code>kalaazu.clans_roles_permissions</code> table reference
     */
    public ClansRolesPermissions(Name alias) {
        this(alias, CLANS_ROLES_PERMISSIONS);
    }

    private ClansRolesPermissions(Name alias, Table<ClansRolesPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClansRolesPermissions(Name alias, Table<ClansRolesPermissionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Clan roles' permissions"));
    }

    public <O extends Record> ClansRolesPermissions(Table<O> child, ForeignKey<O, ClansRolesPermissionsRecord> key) {
        super(child, key, CLANS_ROLES_PERMISSIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClansRolesPermissionsRecord> getRecordType() {
        return ClansRolesPermissionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.CLANS_ROLES_PERMISSIONS_CLANS_ROLES_PERMISSIONS_CLANS_ROLES_ID_IDX,
                Indexes.CLANS_ROLES_PERMISSIONS_CLANS_ROLES_PERMISSIONS_PERMISSIONS_ID_IDX,
                Indexes.CLANS_ROLES_PERMISSIONS_PRIMARY
        );
    }

    @Override
    public Identity<ClansRolesPermissionsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLANS_ROLES_PERMISSIONS;
    }

    @Override
    public UniqueKey<ClansRolesPermissionsRecord> getPrimaryKey() {
        return Keys.KEY_CLANS_ROLES_PERMISSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ClansRolesPermissionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClansRolesPermissionsRecord>>asList(Keys.KEY_CLANS_ROLES_PERMISSIONS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ClansRolesPermissionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClansRolesPermissionsRecord, ?>>asList(
                Keys.CLANS_ROLES_PERMISSIONS_CLANS_ROLES,
                Keys.CLANS_ROLES_PERMISSIONS_PERMISSIONS
        );
    }

    public ClansRoles clansRoles() {
        return new ClansRoles(this, Keys.CLANS_ROLES_PERMISSIONS_CLANS_ROLES);
    }

    public Permissions permissions() {
        return new Permissions(this, Keys.CLANS_ROLES_PERMISSIONS_PERMISSIONS);
    }

    @Override
    public ClansRolesPermissions as(String alias) {
        return new ClansRolesPermissions(DSL.name(alias), this);
    }

    @Override
    public ClansRolesPermissions as(Name alias) {
        return new ClansRolesPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClansRolesPermissions rename(String name) {
        return new ClansRolesPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClansRolesPermissions rename(Name name) {
        return new ClansRolesPermissions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Byte, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
