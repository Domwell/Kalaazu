/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.AccountsClansRolesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Many to many relation table.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsClansRoles extends TableImpl<AccountsClansRolesRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_clans_roles</code>
     */
    public static final AccountsClansRoles ACCOUNTS_CLANS_ROLES = new AccountsClansRoles();
    private static final long serialVersionUID = 635787191;
    /**
     * The column <code>kalaazu.accounts_clans_roles.id</code>. Primary Key.
     */
    public final TableField<AccountsClansRolesRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_clans_roles.accounts_id</code>. Account ID.
     */
    public final TableField<AccountsClansRolesRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            "Account ID."
    );
    /**
     * The column <code>kalaazu.accounts_clans_roles.clans_roles_id</code>. Role ID.
     */
    public final TableField<AccountsClansRolesRecord, Integer> CLANS_ROLES_ID = createField(
            DSL.name("clans_roles_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            "Role ID."
    );

    /**
     * Create a <code>kalaazu.accounts_clans_roles</code> table reference
     */
    public AccountsClansRoles() {
        this(DSL.name("accounts_clans_roles"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_clans_roles</code> table reference
     */
    public AccountsClansRoles(String alias) {
        this(DSL.name(alias), ACCOUNTS_CLANS_ROLES);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_clans_roles</code> table reference
     */
    public AccountsClansRoles(Name alias) {
        this(alias, ACCOUNTS_CLANS_ROLES);
    }

    private AccountsClansRoles(Name alias, Table<AccountsClansRolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsClansRoles(Name alias, Table<AccountsClansRolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Many to many relation table."));
    }

    public <O extends Record> AccountsClansRoles(Table<O> child, ForeignKey<O, AccountsClansRolesRecord> key) {
        super(child, key, ACCOUNTS_CLANS_ROLES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsClansRolesRecord> getRecordType() {
        return AccountsClansRolesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_CLANS_ROLES_ACCOUNTS_CLANS_ROLES_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_CLANS_ROLES_ACCOUNTS_CLANS_ROLES_CLANS_ROLES_ID_IDX,
                Indexes.ACCOUNTS_CLANS_ROLES_PRIMARY
        );
    }

    @Override
    public Identity<AccountsClansRolesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_CLANS_ROLES;
    }

    @Override
    public UniqueKey<AccountsClansRolesRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_CLANS_ROLES_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsClansRolesRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsClansRolesRecord>>asList(Keys.KEY_ACCOUNTS_CLANS_ROLES_PRIMARY);
    }

    @Override
    public List<ForeignKey<AccountsClansRolesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsClansRolesRecord, ?>>asList(
                Keys.ACCOUNTS_CLANS_ROLES_ACCOUNTS,
                Keys.ACCOUNTS_CLANS_ROLES_CLANS_ROLES
        );
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_CLANS_ROLES_ACCOUNTS);
    }

    public ClansRoles clansRoles() {
        return new ClansRoles(this, Keys.ACCOUNTS_CLANS_ROLES_CLANS_ROLES);
    }

    @Override
    public AccountsClansRoles as(String alias) {
        return new AccountsClansRoles(DSL.name(alias), this);
    }

    @Override
    public AccountsClansRoles as(Name alias) {
        return new AccountsClansRoles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsClansRoles rename(String name) {
        return new AccountsClansRoles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsClansRoles rename(Name name) {
        return new AccountsClansRoles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
