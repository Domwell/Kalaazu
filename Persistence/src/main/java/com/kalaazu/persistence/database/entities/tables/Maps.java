/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.MapsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * In game maps.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Maps extends TableImpl<MapsRecord> {

    private static final long serialVersionUID = 131225587;

    /**
     * The reference instance of <code>kalaazu.maps</code>
     */
    public static final Maps MAPS = new Maps();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapsRecord> getRecordType() {
        return MapsRecord.class;
    }

    /**
     * The column <code>kalaazu.maps.id</code>. Primary Key.
     */
    public final TableField<MapsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.maps.name</code>. Map name.
     */
    public final TableField<MapsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Map name.");

    /**
     * The column <code>kalaazu.maps.factions_id</code>.
     */
    public final TableField<MapsRecord, Byte> FACTIONS_ID = createField(DSL.name("factions_id"), org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * The column <code>kalaazu.maps.is_pvp</code>.
     */
    public final TableField<MapsRecord, Byte> IS_PVP = createField(DSL.name("is_pvp"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.maps.is_starter</code>.
     */
    public final TableField<MapsRecord, Byte> IS_STARTER = createField(DSL.name("is_starter"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.maps.limits</code>.
     */
    public final TableField<MapsRecord, Long> LIMITS = createField(DSL.name("limits"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("89335319769600", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>kalaazu.maps</code> table reference
     */
    public Maps() {
        this(DSL.name("maps"), null);
    }

    /**
     * Create an aliased <code>kalaazu.maps</code> table reference
     */
    public Maps(String alias) {
        this(DSL.name(alias), MAPS);
    }

    /**
     * Create an aliased <code>kalaazu.maps</code> table reference
     */
    public Maps(Name alias) {
        this(alias, MAPS);
    }

    private Maps(Name alias, Table<MapsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Maps(Name alias, Table<MapsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("In game maps."));
    }

    public <O extends Record> Maps(Table<O> child, ForeignKey<O, MapsRecord> key) {
        super(child, key, MAPS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAPS_MAPS_FACTIONS, Indexes.MAPS_MAPS_NAME_IDX, Indexes.MAPS_PRIMARY);
    }

    @Override
    public Identity<MapsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_MAPS;
    }

    @Override
    public UniqueKey<MapsRecord> getPrimaryKey() {
        return Keys.KEY_MAPS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MapsRecord>> getKeys() {
        return Arrays.<UniqueKey<MapsRecord>>asList(Keys.KEY_MAPS_PRIMARY, Keys.KEY_MAPS_MAPS_NAME_IDX);
    }

    @Override
    public List<ForeignKey<MapsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapsRecord, ?>>asList(Keys.MAPS_FACTIONS);
    }

    public Factions factions() {
        return new Factions(this, Keys.MAPS_FACTIONS);
    }

    @Override
    public Maps as(String alias) {
        return new Maps(DSL.name(alias), this);
    }

    @Override
    public Maps as(Name alias) {
        return new Maps(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Maps rename(String name) {
        return new Maps(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Maps rename(Name name) {
        return new Maps(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Byte, String, Byte, Byte, Byte, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
