/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ModeratorsLogsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Logged events made by moderators.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ModeratorsLogs extends TableImpl<ModeratorsLogsRecord> {

    /**
     * The reference instance of <code>kalaazu.moderators_logs</code>
     */
    public static final ModeratorsLogs MODERATORS_LOGS = new ModeratorsLogs();
    private static final long serialVersionUID = 831516291;
    /**
     * The column <code>kalaazu.moderators_logs.id</code>. Primary Key.
     */
    public final TableField<ModeratorsLogsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.moderators_logs.moderators_id</code>.
     */
    public final TableField<ModeratorsLogsRecord, Byte> MODERATORS_ID = createField(
            DSL.name("moderators_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.moderators_logs.date</code>.
     */
    public final TableField<ModeratorsLogsRecord, Timestamp> DATE = createField(
            DSL.name("date"),
            org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
                                               .defaultValue(org.jooq.impl.DSL.field(
                                                       "CURRENT_TIMESTAMP",
                                                       org.jooq.impl.SQLDataType.TIMESTAMP
                                               )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.moderators_logs.type</code>.
     */
    public final TableField<ModeratorsLogsRecord, String> TYPE = createField(
            DSL.name("type"),
            org.jooq.impl.SQLDataType.VARCHAR(255)
                                     .nullable(false)
                                     .defaultValue(org.jooq.impl.DSL.field(
                                             "",
                                             org.jooq.impl.SQLDataType.VARCHAR
                                     )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.moderators_logs.text</code>.
     */
    public final TableField<ModeratorsLogsRecord, String> TEXT = createField(
            DSL.name("text"),
            org.jooq.impl.SQLDataType.CLOB.nullable(false),
            this,
            ""
    );

    /**
     * Create a <code>kalaazu.moderators_logs</code> table reference
     */
    public ModeratorsLogs() {
        this(DSL.name("moderators_logs"), null);
    }

    /**
     * Create an aliased <code>kalaazu.moderators_logs</code> table reference
     */
    public ModeratorsLogs(String alias) {
        this(DSL.name(alias), MODERATORS_LOGS);
    }

    /**
     * Create an aliased <code>kalaazu.moderators_logs</code> table reference
     */
    public ModeratorsLogs(Name alias) {
        this(alias, MODERATORS_LOGS);
    }

    private ModeratorsLogs(Name alias, Table<ModeratorsLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModeratorsLogs(Name alias, Table<ModeratorsLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Logged events made by moderators."));
    }

    public <O extends Record> ModeratorsLogs(Table<O> child, ForeignKey<O, ModeratorsLogsRecord> key) {
        super(child, key, MODERATORS_LOGS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModeratorsLogsRecord> getRecordType() {
        return ModeratorsLogsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.MODERATORS_LOGS_MODERATORS_LOGS_MODERATORS_ID_IDX,
                Indexes.MODERATORS_LOGS_MODERATORS_LOGS_TYPE_IDX,
                Indexes.MODERATORS_LOGS_PRIMARY
        );
    }

    @Override
    public Identity<ModeratorsLogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MODERATORS_LOGS;
    }

    @Override
    public UniqueKey<ModeratorsLogsRecord> getPrimaryKey() {
        return Keys.KEY_MODERATORS_LOGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModeratorsLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<ModeratorsLogsRecord>>asList(Keys.KEY_MODERATORS_LOGS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ModeratorsLogsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModeratorsLogsRecord, ?>>asList(Keys.MODERATORS_LOGS_MODERATORS);
    }

    public Moderators moderators() {
        return new Moderators(this, Keys.MODERATORS_LOGS_MODERATORS);
    }

    @Override
    public ModeratorsLogs as(String alias) {
        return new ModeratorsLogs(DSL.name(alias), this);
    }

    @Override
    public ModeratorsLogs as(Name alias) {
        return new ModeratorsLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModeratorsLogs rename(String name) {
        return new ModeratorsLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModeratorsLogs rename(Name name) {
        return new ModeratorsLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Byte, Timestamp, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
