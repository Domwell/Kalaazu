/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.CollectablesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Map collectables.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Collectables extends TableImpl<CollectablesRecord> {

    /**
     * The reference instance of <code>kalaazu.collectables</code>
     */
    public static final Collectables COLLECTABLES = new Collectables();
    private static final long serialVersionUID = -394455806;
    /**
     * The column <code>kalaazu.collectables.id</code>. Primary Key.
     */
    public final TableField<CollectablesRecord, Byte> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.collectables.gfx</code>.
     */
    public final TableField<CollectablesRecord, Byte> GFX = createField(
            DSL.name("gfx"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.collectables.type</code>. 0 = box, 1 = ore, 2 = beacon, 3 = firework
     */
    public final TableField<CollectablesRecord, Byte> TYPE = createField(
            DSL.name("type"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "0 = box, 1 = ore, 2 = beacon, 3 = firework"
    );
    /**
     * The column <code>kalaazu.collectables.name</code>.
     */
    public final TableField<CollectablesRecord, String> NAME = createField(
            DSL.name("name"),
            org.jooq.impl.SQLDataType.VARCHAR(255)
                                     .nullable(false)
                                     .defaultValue(org.jooq.impl.DSL.field(
                                             "",
                                             org.jooq.impl.SQLDataType.VARCHAR
                                     )),
            this,
            ""
    );

    /**
     * Create a <code>kalaazu.collectables</code> table reference
     */
    public Collectables() {
        this(DSL.name("collectables"), null);
    }

    /**
     * Create an aliased <code>kalaazu.collectables</code> table reference
     */
    public Collectables(String alias) {
        this(DSL.name(alias), COLLECTABLES);
    }

    /**
     * Create an aliased <code>kalaazu.collectables</code> table reference
     */
    public Collectables(Name alias) {
        this(alias, COLLECTABLES);
    }

    private Collectables(Name alias, Table<CollectablesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Collectables(Name alias, Table<CollectablesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Map collectables."));
    }

    public <O extends Record> Collectables(Table<O> child, ForeignKey<O, CollectablesRecord> key) {
        super(child, key, COLLECTABLES);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectablesRecord> getRecordType() {
        return CollectablesRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COLLECTABLES_PRIMARY);
    }

    @Override
    public Identity<CollectablesRecord, Byte> getIdentity() {
        return Keys.IDENTITY_COLLECTABLES;
    }

    @Override
    public UniqueKey<CollectablesRecord> getPrimaryKey() {
        return Keys.KEY_COLLECTABLES_PRIMARY;
    }

    @Override
    public List<UniqueKey<CollectablesRecord>> getKeys() {
        return Arrays.<UniqueKey<CollectablesRecord>>asList(Keys.KEY_COLLECTABLES_PRIMARY);
    }

    @Override
    public Collectables as(String alias) {
        return new Collectables(DSL.name(alias), this);
    }

    @Override
    public Collectables as(Name alias) {
        return new Collectables(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Collectables rename(String name) {
        return new Collectables(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Collectables rename(Name name) {
        return new Collectables(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Byte, Byte, Byte, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
