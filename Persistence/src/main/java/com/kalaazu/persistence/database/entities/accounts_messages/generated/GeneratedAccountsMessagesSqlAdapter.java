package com.kalaazu.persistence.database.entities.accounts_messages.generated;

import com.kalaazu.persistence.database.entities.AccountsMessages;
import com.kalaazu.persistence.database.entities.accounts_messages.AccountsMessagesImpl;
import com.kalaazu.persistence.database.mappers.MessageStatus;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * AccountsMessages}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsMessagesSqlAdapter {

    private final TableIdentifier<AccountsMessages> tableIdentifier;

    private SqlTypeMapperHelper<Byte, MessageStatus> fromStatusHelper;

    private SqlTypeMapperHelper<Byte, MessageStatus> toStatusHelper;

    protected GeneratedAccountsMessagesSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_messages");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected AccountsMessages apply(ResultSet resultSet) throws SpeedmentException {
        final AccountsMessages entity = createEntity();
        try {
            entity.id(resultSet.getInt(1));
            entity.fromAccountsId(resultSet.getInt(2));
            entity.fromStatus(fromStatusHelper.apply(resultSet.getByte(3)));
            entity.toAccountsId(resultSet.getInt(4));
            entity.toStatus(toStatusHelper.apply(resultSet.getByte(5)));
            entity.date(resultSet.getTimestamp(6));
            entity.title(resultSet.getString(7));
            entity.text(resultSet.getString(8));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected AccountsMessagesImpl createEntity() {
        return new AccountsMessagesImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        fromStatusHelper = SqlTypeMapperHelper.create(project, AccountsMessages.FROM_STATUS, AccountsMessages.class);
        toStatusHelper = SqlTypeMapperHelper.create(project, AccountsMessages.TO_STATUS, AccountsMessages.class);
    }
}