package com.kalaazu.persistence.database.entities.clans_diplomacies.generated;

import com.kalaazu.persistence.database.entities.ClansDiplomacies;
import com.kalaazu.persistence.database.entities.clans_diplomacies.ClansDiplomaciesImpl;
import com.kalaazu.persistence.database.mappers.DiplomacyStatus;
import com.kalaazu.persistence.database.mappers.DiplomacyType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * ClansDiplomacies}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedClansDiplomaciesSqlAdapter {

    private final TableIdentifier<ClansDiplomacies> tableIdentifier;

    private SqlTypeMapperHelper<Byte, DiplomacyStatus> statusHelper;

    private SqlTypeMapperHelper<Byte, DiplomacyType> typeHelper;

    protected GeneratedClansDiplomaciesSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "clans_diplomacies");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected ClansDiplomacies apply(ResultSet resultSet) throws SpeedmentException {
        final ClansDiplomacies entity = createEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setFromClansId(resultSet.getInt(2));
            entity.setToClansId(resultSet.getInt(3));
            entity.setDate(resultSet.getTimestamp(4));
            entity.setExpires(resultSet.getTimestamp(5));
            entity.setStatus(statusHelper.apply(resultSet.getByte(6)));
            entity.setType(typeHelper.apply(resultSet.getByte(7)));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected ClansDiplomaciesImpl createEntity() {
        return new ClansDiplomaciesImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        statusHelper = SqlTypeMapperHelper.create(project, ClansDiplomacies.STATUS, ClansDiplomacies.class);
        typeHelper = SqlTypeMapperHelper.create(project, ClansDiplomacies.TYPE, ClansDiplomacies.class);
    }
}