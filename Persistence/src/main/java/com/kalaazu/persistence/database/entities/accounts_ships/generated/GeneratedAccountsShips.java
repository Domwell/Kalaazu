package com.kalaazu.persistence.database.entities.accounts_ships.generated;

import com.kalaazu.math.Vector2;
import com.kalaazu.persistence.database.entities.*;
import com.kalaazu.persistence.database.mappers.Vector2Mapper;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.*;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * AccountsShips}-interface
 * representing entities of the {@code accounts_ships}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAccountsShips {

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#id()} method.
     */
    IntField<AccountsShips, Integer> ID = IntField.create(
            Identifier.ID,
            AccountsShips::id,
            AccountsShips::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#accountsId()} method.
     */
    IntForeignKeyField<AccountsShips, Integer, Accounts> ACCOUNTS_ID = IntForeignKeyField.create(
            Identifier.ACCOUNTS_ID,
            AccountsShips::accountsId,
            AccountsShips::accountsId,
            Accounts.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#shipsId()} method.
     */
    ByteForeignKeyField<AccountsShips, Byte, Ships> SHIPS_ID = ByteForeignKeyField.create(
            Identifier.SHIPS_ID,
            AccountsShips::shipsId,
            AccountsShips::shipsId,
            Ships.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#mapsId()} method.
     */
    ByteForeignKeyField<AccountsShips, Byte, Maps> MAPS_ID = ByteForeignKeyField.create(
            Identifier.MAPS_ID,
            AccountsShips::mapsId,
            AccountsShips::mapsId,
            Maps.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#position()} method.
     */
    ReferenceField<AccountsShips, Long, Vector2> POSITION = ReferenceField.create(
            Identifier.POSITION,
            AccountsShips::position,
            AccountsShips::position,
            new Vector2Mapper(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#health()} method.
     */
    IntField<AccountsShips, Integer> HEALTH = IntField.create(
            Identifier.HEALTH,
            AccountsShips::health,
            AccountsShips::health,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#nanohull()} method.
     */
    IntField<AccountsShips, Integer> NANOHULL = IntField.create(
            Identifier.NANOHULL,
            AccountsShips::nanohull,
            AccountsShips::nanohull,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsShips} field that can be
     * obtained using the {@link AccountsShips#gfx()} method.
     */
    ByteField<AccountsShips, Byte> GFX = ByteField.create(
            Identifier.GFX,
            AccountsShips::gfx,
            AccountsShips::gfx,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this AccountsShips. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_ships.id.
     *
     * @return the id of this AccountsShips
     */
    Integer id();

    /**
     * Returns the accountsId of this AccountsShips. The accountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_ships.accounts_id.
     *
     * @return the accountsId of this AccountsShips
     */
    int accountsId();

    /**
     * Returns the shipsId of this AccountsShips. The shipsId field corresponds
     * to the database column kalaazu.kalaazu.accounts_ships.ships_id.
     *
     * @return the shipsId of this AccountsShips
     */
    byte shipsId();

    /**
     * Returns the mapsId of this AccountsShips. The mapsId field corresponds to
     * the database column kalaazu.kalaazu.accounts_ships.maps_id.
     *
     * @return the mapsId of this AccountsShips
     */
    byte mapsId();

    /**
     * Returns the position of this AccountsShips. The position field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_ships.position.
     *
     * @return the position of this AccountsShips
     */
    Vector2 position();

    /**
     * Returns the health of this AccountsShips. The health field corresponds to
     * the database column kalaazu.kalaazu.accounts_ships.health.
     *
     * @return the health of this AccountsShips
     */
    int health();

    /**
     * Returns the nanohull of this AccountsShips. The nanohull field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_ships.nanohull.
     *
     * @return the nanohull of this AccountsShips
     */
    int nanohull();

    /**
     * Returns the gfx of this AccountsShips. The gfx field corresponds to the
     * database column kalaazu.kalaazu.accounts_ships.gfx.
     *
     * @return the gfx of this AccountsShips
     */
    byte gfx();

    /**
     * Sets the id of this AccountsShips. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_ships.id.
     *
     * @param id to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips id(Integer id);

    /**
     * Sets the accountsId of this AccountsShips. The accountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_ships.accounts_id.
     *
     * @param accountsId to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips accountsId(int accountsId);

    /**
     * Sets the shipsId of this AccountsShips. The shipsId field corresponds to
     * the database column kalaazu.kalaazu.accounts_ships.ships_id.
     *
     * @param shipsId to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips shipsId(byte shipsId);

    /**
     * Sets the mapsId of this AccountsShips. The mapsId field corresponds to
     * the database column kalaazu.kalaazu.accounts_ships.maps_id.
     *
     * @param mapsId to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips mapsId(byte mapsId);

    /**
     * Sets the position of this AccountsShips. The position field corresponds
     * to the database column kalaazu.kalaazu.accounts_ships.position.
     *
     * @param position to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips position(Vector2 position);

    /**
     * Sets the health of this AccountsShips. The health field corresponds to
     * the database column kalaazu.kalaazu.accounts_ships.health.
     *
     * @param health to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips health(int health);

    /**
     * Sets the nanohull of this AccountsShips. The nanohull field corresponds
     * to the database column kalaazu.kalaazu.accounts_ships.nanohull.
     *
     * @param nanohull to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips nanohull(int nanohull);

    /**
     * Sets the gfx of this AccountsShips. The gfx field corresponds to the
     * database column kalaazu.kalaazu.accounts_ships.gfx.
     *
     * @param gfx to set of this AccountsShips
     *
     * @return this AccountsShips instance
     */
    AccountsShips gfx(byte gfx);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Accounts findAccountsId(Manager<Accounts> foreignManager);

    /**
     * Queries the specified manager for the referenced Ships. If no such Ships
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Ships findShipsId(Manager<Ships> foreignManager);

    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Maps findMapsId(Manager<Maps> foreignManager);

    enum Identifier implements ColumnIdentifier<AccountsShips> {

        ID("id"),
        ACCOUNTS_ID("accounts_id"),
        SHIPS_ID("ships_id"),
        MAPS_ID("maps_id"),
        POSITION("position"),
        HEALTH("health"),
        NANOHULL("nanohull"),
        GFX("gfx");

        private final String columnName;

        private final TableIdentifier<AccountsShips> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "accounts_ships";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<AccountsShips> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}