package com.kalaazu.persistence.database.entities.accounts_hangars.generated;

import com.kalaazu.persistence.database.entities.AccountsHangars;
import com.kalaazu.persistence.database.entities.accounts_hangars.AccountsHangarsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getByte;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getInt;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_hangars.AccountsHangars}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsHangarsSqlAdapter implements SqlAdapter<AccountsHangars> {

    private final TableIdentifier<AccountsHangars>        tableIdentifier;

    private       SqlTypeMapperHelper<Timestamp, Integer> dateHelper;

    protected GeneratedAccountsHangarsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_hangars");
    }

    protected AccountsHangars apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsId(resultSet.getInt(2 + offset))
                .setAccountsShipsId(getInt(resultSet, 3 + offset))
                .setAccountsConfigurationsId(getInt(resultSet, 4 + offset))
                .setName(resultSet.getString(5 + offset))
                .setPriority(getByte(resultSet, 6 + offset))
                .setDate(dateHelper.apply(resultSet.getTimestamp(7 + offset)))
                ;
    }

    protected AccountsHangarsImpl createEntity() {
        return new AccountsHangarsImpl();
    }

    @Override
    public TableIdentifier<AccountsHangars> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsHangars> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsHangars> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        dateHelper = SqlTypeMapperHelper.create(project, AccountsHangars.DATE, AccountsHangars.class);
    }
}