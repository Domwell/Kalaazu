package com.kalaazu.persistence.database.entities.items.generated;

import com.kalaazu.persistence.database.entities.Items;
import com.kalaazu.persistence.database.entities.items.ItemsImpl;
import com.kalaazu.persistence.database.mappers.ItemCategory;
import com.kalaazu.persistence.database.mappers.ItemType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * Items} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedItemsSqlAdapter {

    private final TableIdentifier<Items> tableIdentifier;

    private SqlTypeMapperHelper<Byte, ItemCategory> categoryHelper;

    private SqlTypeMapperHelper<Byte, ItemType> typeHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isEliteHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isEventHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isBuyableHelper;

    protected GeneratedItemsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "items");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected Items apply(ResultSet resultSet) throws SpeedmentException {
        final Items entity = createEntity();
        try {
            entity.id(resultSet.getShort(1));
            entity.name(resultSet.getString(2));
            entity.category(categoryHelper.apply(resultSet.getByte(3)));
            entity.description(resultSet.getString(4));
            entity.price(resultSet.getInt(5));
            entity.type(typeHelper.apply(resultSet.getByte(6)));
            entity.isElite(isEliteHelper.apply(resultSet.getInt(7)));
            entity.isEvent(isEventHelper.apply(resultSet.getInt(8)));
            entity.isBuyable(isBuyableHelper.apply(resultSet.getInt(9)));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected ItemsImpl createEntity() {
        return new ItemsImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        categoryHelper = SqlTypeMapperHelper.create(project, Items.CATEGORY, Items.class);
        typeHelper = SqlTypeMapperHelper.create(project, Items.TYPE, Items.class);
        isEliteHelper = SqlTypeMapperHelper.create(project, Items.IS_ELITE, Items.class);
        isEventHelper = SqlTypeMapperHelper.create(project, Items.IS_EVENT, Items.class);
        isBuyableHelper = SqlTypeMapperHelper.create(project, Items.IS_BUYABLE, Items.class);
    }
}