/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.AccountsBanksRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Account's internal bank.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsBanks extends TableImpl<AccountsBanksRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_banks</code>
     */
    public static final AccountsBanks ACCOUNTS_BANKS = new AccountsBanks();
    private static final long serialVersionUID = 588870205;
    /**
     * The column <code>kalaazu.accounts_banks.id</code>. Primary Key.
     */
    public final TableField<AccountsBanksRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_banks.accounts_id</code>.
     */
    public final TableField<AccountsBanksRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_banks.credits</code>. Credits available in the bank.
     */
    public final TableField<AccountsBanksRecord, Long> CREDITS = createField(
            DSL.name("credits"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "0",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Credits available in the bank."
    );
    /**
     * The column <code>kalaazu.accounts_banks.uridium</code>. Uridium available in the bank.
     */
    public final TableField<AccountsBanksRecord, Long> URIDIUM = createField(
            DSL.name("uridium"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "0",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Uridium available in the bank."
    );
    /**
     * The column <code>kalaazu.accounts_banks.tax_credits</code>. Tax rate for credits.
     */
    public final TableField<AccountsBanksRecord, Byte> TAX_CREDITS = createField(
            DSL.name("tax_credits"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "5",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Tax rate for credits."
    );
    /**
     * The column <code>kalaazu.accounts_banks.tax_uridium</code>. Tax rate for uridium.
     */
    public final TableField<AccountsBanksRecord, Byte> TAX_URIDIUM = createField(
            DSL.name("tax_uridium"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Tax rate for uridium."
    );

    /**
     * Create a <code>kalaazu.accounts_banks</code> table reference
     */
    public AccountsBanks() {
        this(DSL.name("accounts_banks"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_banks</code> table reference
     */
    public AccountsBanks(String alias) {
        this(DSL.name(alias), ACCOUNTS_BANKS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_banks</code> table reference
     */
    public AccountsBanks(Name alias) {
        this(alias, ACCOUNTS_BANKS);
    }

    private AccountsBanks(Name alias, Table<AccountsBanksRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsBanks(Name alias, Table<AccountsBanksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Account's internal bank."));
    }

    public <O extends Record> AccountsBanks(Table<O> child, ForeignKey<O, AccountsBanksRecord> key) {
        super(child, key, ACCOUNTS_BANKS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsBanksRecord> getRecordType() {
        return AccountsBanksRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_BANKS_ACCOUNTS_BANKS_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_BANKS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsBanksRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_BANKS;
    }

    @Override
    public UniqueKey<AccountsBanksRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_BANKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsBanksRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsBanksRecord>>asList(
                Keys.KEY_ACCOUNTS_BANKS_PRIMARY,
                Keys.KEY_ACCOUNTS_BANKS_ACCOUNTS_BANKS_ACCOUNTS_ID_IDX
        );
    }

    @Override
    public List<ForeignKey<AccountsBanksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsBanksRecord, ?>>asList(Keys.ACCOUNTS_BANKS_ACCOUNTS);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_BANKS_ACCOUNTS);
    }

    @Override
    public AccountsBanks as(String alias) {
        return new AccountsBanks(DSL.name(alias), this);
    }

    @Override
    public AccountsBanks as(Name alias) {
        return new AccountsBanks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsBanks rename(String name) {
        return new AccountsBanks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsBanks rename(Name name) {
        return new AccountsBanks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Long, Long, Byte, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
