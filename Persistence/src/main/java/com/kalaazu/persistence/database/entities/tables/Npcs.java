/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.NpcsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Server NPCS.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Npcs extends TableImpl<NpcsRecord> {

    private static final long serialVersionUID = 83125644;

    /**
     * The reference instance of <code>kalaazu.npcs</code>
     */
    public static final Npcs NPCS = new Npcs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NpcsRecord> getRecordType() {
        return NpcsRecord.class;
    }

    /**
     * The column <code>kalaazu.npcs.id</code>. Primary Key.
     */
    public final TableField<NpcsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.npcs.name</code>.
     */
    public final TableField<NpcsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("-=[Streuner]=-", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.npcs.health</code>.
     */
    public final TableField<NpcsRecord, Integer> HEALTH = createField(DSL.name("health"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kalaazu.npcs.shield</code>.
     */
    public final TableField<NpcsRecord, Integer> SHIELD = createField(DSL.name("shield"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kalaazu.npcs.shield_absorption</code>.
     */
    public final TableField<NpcsRecord, Byte> SHIELD_ABSORPTION = createField(DSL.name("shield_absorption"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.npcs.damage</code>.
     */
    public final TableField<NpcsRecord, Integer> DAMAGE = createField(DSL.name("damage"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kalaazu.npcs.speed</code>.
     */
    public final TableField<NpcsRecord, Short> SPEED = createField(DSL.name("speed"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.SMALLINT)), this, "");

    /**
     * The column <code>kalaazu.npcs.gfx</code>.
     */
    public final TableField<NpcsRecord, Byte> GFX = createField(DSL.name("gfx"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.npcs.ai</code>.
     */
    public final TableField<NpcsRecord, Byte> AI = createField(DSL.name("ai"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>kalaazu.npcs</code> table reference
     */
    public Npcs() {
        this(DSL.name("npcs"), null);
    }

    /**
     * Create an aliased <code>kalaazu.npcs</code> table reference
     */
    public Npcs(String alias) {
        this(DSL.name(alias), NPCS);
    }

    /**
     * Create an aliased <code>kalaazu.npcs</code> table reference
     */
    public Npcs(Name alias) {
        this(alias, NPCS);
    }

    private Npcs(Name alias, Table<NpcsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Npcs(Name alias, Table<NpcsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Server NPCS."));
    }

    public <O extends Record> Npcs(Table<O> child, ForeignKey<O, NpcsRecord> key) {
        super(child, key, NPCS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NPCS_NPCS_GFX, Indexes.NPCS_NPCS_NAME, Indexes.NPCS_PRIMARY);
    }

    @Override
    public Identity<NpcsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_NPCS;
    }

    @Override
    public UniqueKey<NpcsRecord> getPrimaryKey() {
        return Keys.KEY_NPCS_PRIMARY;
    }

    @Override
    public List<UniqueKey<NpcsRecord>> getKeys() {
        return Arrays.<UniqueKey<NpcsRecord>>asList(Keys.KEY_NPCS_PRIMARY);
    }

    @Override
    public Npcs as(String alias) {
        return new Npcs(DSL.name(alias), this);
    }

    @Override
    public Npcs as(Name alias) {
        return new Npcs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Npcs rename(String name) {
        return new Npcs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Npcs rename(Name name) {
        return new Npcs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Byte, String, Integer, Integer, Byte, Integer, Short, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
