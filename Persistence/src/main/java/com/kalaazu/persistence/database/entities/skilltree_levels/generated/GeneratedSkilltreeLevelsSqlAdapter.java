package com.kalaazu.persistence.database.entities.skilltree_levels.generated;

import com.kalaazu.persistence.database.entities.SkilltreeLevels;
import com.kalaazu.persistence.database.entities.skilltree_levels.SkilltreeLevelsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * SkilltreeLevels}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSkilltreeLevelsSqlAdapter {

    private final TableIdentifier<SkilltreeLevels> tableIdentifier;

    protected GeneratedSkilltreeLevelsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "skilltree_levels");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected SkilltreeLevels apply(ResultSet resultSet) throws SpeedmentException {
        final SkilltreeLevels entity = createEntity();
        try {
            entity.id(resultSet.getShort(1));
            entity.skilltreeSkillsId(resultSet.getByte(2));
            entity.levelsId(resultSet.getByte(3));
            entity.credits(resultSet.getInt(4));
            entity.seprom(resultSet.getShort(5));
            entity.points(resultSet.getByte(6));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected SkilltreeLevelsImpl createEntity() {
        return new SkilltreeLevelsImpl();
    }
}