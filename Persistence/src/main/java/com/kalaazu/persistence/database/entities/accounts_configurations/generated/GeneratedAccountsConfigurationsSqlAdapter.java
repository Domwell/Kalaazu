package com.kalaazu.persistence.database.entities.accounts_configurations.generated;

import com.kalaazu.persistence.database.entities.AccountsConfigurations;
import com.kalaazu.persistence.database.entities.accounts_configurations.AccountsConfigurationsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_configurations.AccountsConfigurations}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsConfigurationsSqlAdapter implements SqlAdapter<AccountsConfigurations> {

    private final TableIdentifier<AccountsConfigurations> tableIdentifier;

    protected GeneratedAccountsConfigurationsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_configurations");
    }

    protected AccountsConfigurations apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsHangarsId(resultSet.getInt(2 + offset))
                .setConfigurationId(resultSet.getByte(3 + offset))
                .setName(resultSet.getString(4 + offset))
                .setShield(resultSet.getInt(5 + offset))
                .setSpeed(resultSet.getShort(6 + offset))
                .setDamage(resultSet.getInt(7 + offset))
                ;
    }

    protected AccountsConfigurationsImpl createEntity() {
        return new AccountsConfigurationsImpl();
    }

    @Override
    public TableIdentifier<AccountsConfigurations> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsConfigurations> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsConfigurations> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}