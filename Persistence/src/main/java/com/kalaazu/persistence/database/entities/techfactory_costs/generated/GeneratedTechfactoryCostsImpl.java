package com.kalaazu.persistence.database.entities.techfactory_costs.generated;

import com.kalaazu.persistence.database.entities.Items;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.TechfactoryCosts;
import com.kalaazu.persistence.database.entities.TechfactoryItems;
import com.speedment.common.annotation.GeneratedCode;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * TechfactoryCosts}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedTechfactoryCostsImpl implements TechfactoryCosts {

    private byte id;

    private byte techfactoryItemsId;

    private short itemsId;

    private int amount;

    protected GeneratedTechfactoryCostsImpl() {

    }

    @Override
    public Byte getId() {
        return id;
    }

    @Override
    public byte getTechfactoryItemsId() {
        return techfactoryItemsId;
    }

    @Override
    public short getItemsId() {
        return itemsId;
    }

    @Override
    public int getAmount() {
        return amount;
    }

    @Override
    public TechfactoryCosts setId(byte id) {
        this.id = id;
        return this;
    }

    @Override
    public TechfactoryCosts setTechfactoryItemsId(byte techfactoryItemsId) {
        this.techfactoryItemsId = techfactoryItemsId;
        return this;
    }

    @Override
    public TechfactoryCosts setItemsId(short itemsId) {
        this.itemsId = itemsId;
        return this;
    }

    @Override
    public TechfactoryCosts setAmount(int amount) {
        this.amount = amount;
        return this;
    }

    @Override
    public TechfactoryItems findTechfactoryItemsId(Manager<TechfactoryItems> foreignManager) {
        return foreignManager.stream()
                             .filter(TechfactoryItems.ID.equal(getTechfactoryItemsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Items findItemsId(Manager<Items> foreignManager) {
        return foreignManager.stream()
                             .filter(Items.ID.equal(getItemsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("techfactoryItemsId = " + Objects.toString(getTechfactoryItemsId()));
        sj.add("itemsId = " + Objects.toString(getItemsId()));
        sj.add("amount = " + Objects.toString(getAmount()));
        return "TechfactoryCostsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof TechfactoryCosts)) {
            return false;
        }
        final TechfactoryCosts thatTechfactoryCosts = (TechfactoryCosts) that;
        if (this.getId() != thatTechfactoryCosts.getId()) {
            return false;
        }
        if (this.getTechfactoryItemsId() != thatTechfactoryCosts.getTechfactoryItemsId()) {
            return false;
        }
        if (this.getItemsId() != thatTechfactoryCosts.getItemsId()) {
            return false;
        }
        if (this.getAmount() != thatTechfactoryCosts.getAmount()) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Byte.hashCode(getId());
        hash = 31 * hash + Byte.hashCode(getTechfactoryItemsId());
        hash = 31 * hash + Short.hashCode(getItemsId());
        hash = 31 * hash + Integer.hashCode(getAmount());
        return hash;
    }
}