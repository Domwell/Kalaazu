/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ModeratorsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Server moderators.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Moderators extends TableImpl<ModeratorsRecord> {

    private static final long serialVersionUID = 1090492215;

    /**
     * The reference instance of <code>kalaazu.moderators</code>
     */
    public static final Moderators MODERATORS = new Moderators();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModeratorsRecord> getRecordType() {
        return ModeratorsRecord.class;
    }

    /**
     * The column <code>kalaazu.moderators.id</code>. Primary Key.
     */
    public final TableField<ModeratorsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.moderators.accounts_id</code>.
     */
    public final TableField<ModeratorsRecord, Integer> ACCOUNTS_ID = createField(DSL.name("accounts_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>kalaazu.moderators.moderators_roles_id</code>. Moderator role.
     */
    public final TableField<ModeratorsRecord, Byte> MODERATORS_ROLES_ID = createField(DSL.name("moderators_roles_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINT)), this, "Moderator role.");

    /**
     * The column <code>kalaazu.moderators.date</code>. Date when the account become a moderator.
     */
    public final TableField<ModeratorsRecord, Timestamp> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "Date when the account become a moderator.");

    /**
     * Create a <code>kalaazu.moderators</code> table reference
     */
    public Moderators() {
        this(DSL.name("moderators"), null);
    }

    /**
     * Create an aliased <code>kalaazu.moderators</code> table reference
     */
    public Moderators(String alias) {
        this(DSL.name(alias), MODERATORS);
    }

    /**
     * Create an aliased <code>kalaazu.moderators</code> table reference
     */
    public Moderators(Name alias) {
        this(alias, MODERATORS);
    }

    private Moderators(Name alias, Table<ModeratorsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Moderators(Name alias, Table<ModeratorsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Server moderators."));
    }

    public <O extends Record> Moderators(Table<O> child, ForeignKey<O, ModeratorsRecord> key) {
        super(child, key, MODERATORS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODERATORS_MODERATORS_ACCOUNTS_ID_IDX, Indexes.MODERATORS_MODERATORS_MODERATORS_ROLES_ID_IDX, Indexes.MODERATORS_PRIMARY);
    }

    @Override
    public Identity<ModeratorsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_MODERATORS;
    }

    @Override
    public UniqueKey<ModeratorsRecord> getPrimaryKey() {
        return Keys.KEY_MODERATORS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModeratorsRecord>> getKeys() {
        return Arrays.<UniqueKey<ModeratorsRecord>>asList(Keys.KEY_MODERATORS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ModeratorsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModeratorsRecord, ?>>asList(Keys.MODERATORS_ACCOUNTS, Keys.MODERATORS_MODERATORS_ROLES);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.MODERATORS_ACCOUNTS);
    }

    public ModeratorsRoles moderatorsRoles() {
        return new ModeratorsRoles(this, Keys.MODERATORS_MODERATORS_ROLES);
    }

    @Override
    public Moderators as(String alias) {
        return new Moderators(DSL.name(alias), this);
    }

    @Override
    public Moderators as(Name alias) {
        return new Moderators(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderators rename(String name) {
        return new Moderators(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Moderators rename(Name name) {
        return new Moderators(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Byte, Integer, Byte, Timestamp> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
