/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.AccountsHistoryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Account's history events.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsHistory extends TableImpl<AccountsHistoryRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_history</code>
     */
    public static final AccountsHistory ACCOUNTS_HISTORY = new AccountsHistory();
    private static final long serialVersionUID = 458865531;
    /**
     * The column <code>kalaazu.accounts_history.id</code>. Primary Key.
     */
    public final TableField<AccountsHistoryRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_history.accounts_id</code>.
     */
    public final TableField<AccountsHistoryRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_history.type</code>. Event type.
     */
    public final TableField<AccountsHistoryRecord, Byte> TYPE = createField(
            DSL.name("type"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Event type."
    );
    /**
     * The column <code>kalaazu.accounts_history.message</code>. Event message.
     */
    public final TableField<AccountsHistoryRecord, String> MESSAGE = createField(
            DSL.name("message"),
            org.jooq.impl.SQLDataType.CLOB.nullable(false),
            this,
            "Event message."
    );
    /**
     * The column <code>kalaazu.accounts_history.amount</code>. For currency related events, the amount of currency.
     */
    public final TableField<AccountsHistoryRecord, Integer> AMOUNT = createField(
            DSL.name("amount"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.INTEGER
                                             )),
            this,
            "For currency related events, the amount of currency."
    );
    /**
     * The column <code>kalaazu.accounts_history.date</code>. Date when the event occurred.
     */
    public final TableField<AccountsHistoryRecord, Timestamp> DATE = createField(
            DSL.name("date"),
            org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
                                               .defaultValue(org.jooq.impl.DSL.field(
                                                       "CURRENT_TIMESTAMP",
                                                       org.jooq.impl.SQLDataType.TIMESTAMP
                                               )),
            this,
            "Date when the event occurred."
    );

    /**
     * Create a <code>kalaazu.accounts_history</code> table reference
     */
    public AccountsHistory() {
        this(DSL.name("accounts_history"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_history</code> table reference
     */
    public AccountsHistory(String alias) {
        this(DSL.name(alias), ACCOUNTS_HISTORY);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_history</code> table reference
     */
    public AccountsHistory(Name alias) {
        this(alias, ACCOUNTS_HISTORY);
    }

    private AccountsHistory(Name alias, Table<AccountsHistoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsHistory(Name alias, Table<AccountsHistoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Account's history events."));
    }

    public <O extends Record> AccountsHistory(Table<O> child, ForeignKey<O, AccountsHistoryRecord> key) {
        super(child, key, ACCOUNTS_HISTORY);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsHistoryRecord> getRecordType() {
        return AccountsHistoryRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_HISTORY_ACCOUNTS_HISTORY_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_HISTORY_PRIMARY
        );
    }

    @Override
    public Identity<AccountsHistoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_HISTORY;
    }

    @Override
    public UniqueKey<AccountsHistoryRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_HISTORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsHistoryRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsHistoryRecord>>asList(
                Keys.KEY_ACCOUNTS_HISTORY_PRIMARY,
                Keys.KEY_ACCOUNTS_HISTORY_ACCOUNTS_HISTORY_ACCOUNTS_ID_IDX
        );
    }

    @Override
    public List<ForeignKey<AccountsHistoryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsHistoryRecord, ?>>asList(Keys.ACCOUNTS_HISTORY_ACCOUNTS);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_HISTORY_ACCOUNTS);
    }

    @Override
    public AccountsHistory as(String alias) {
        return new AccountsHistory(DSL.name(alias), this);
    }

    @Override
    public AccountsHistory as(Name alias) {
        return new AccountsHistory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsHistory rename(String name) {
        return new AccountsHistory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsHistory rename(Name name) {
        return new AccountsHistory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Byte, String, Integer, Timestamp> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
