package com.kalaazu.persistence.database.entities.accounts_hangars.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsHangars;
import com.kalaazu.persistence.database.entities.AccountsShips;
import com.kalaazu.persistence.database.entities.Manager;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * AccountsHangars}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedAccountsHangarsImpl implements AccountsHangars {

    private Integer id;

    private int accountsId;

    private Integer accountsShipsId;

    private Integer accountsConfigurationsId;

    private String name;

    private Byte priority;

    private Timestamp date;

    protected GeneratedAccountsHangarsImpl() {

    }

    @Override
    public OptionalInt accountsShipsId() {
        return OptionalUtil.ofNullable(accountsShipsId);
    }

    @Override
    public OptionalInt accountsConfigurationsId() {
        return OptionalUtil.ofNullable(accountsConfigurationsId);
    }

    @Override
    public Optional<Byte> priority() {
        return Optional.ofNullable(priority);
    }

    @Override
    public Accounts findAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(accountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<AccountsShips> findAccountsShipsId(Manager<AccountsShips> foreignManager) {
        if (accountsShipsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(AccountsShips.ID.equal(accountsShipsId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }
}