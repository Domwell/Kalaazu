package com.kalaazu.persistence.database.entities.levels.generated;

import com.kalaazu.persistence.database.entities.Levels;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.*;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * Levels}-interface
 * representing entities of the {@code levels}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedLevels {

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#id()} method.
     */
    ByteField<Levels, Byte> ID = ByteField.create(
            Identifier.ID,
            Levels::id,
            Levels::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#account()} method.
     */
    LongField<Levels, Long> ACCOUNT = LongField.create(
            Identifier.ACCOUNT,
            Levels::account,
            Levels::account,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#drone()} method.
     */
    ShortField<Levels, Short> DRONE = ShortField.create(
            Identifier.DRONE,
            Levels::drone,
            Levels::drone,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#pet()} method.
     */
    IntField<Levels, Integer> PET = IntField.create(
            Identifier.PET,
            Levels::pet,
            Levels::pet,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#damage()} method.
     */
    DoubleField<Levels, Double> DAMAGE = DoubleField.create(
            Identifier.DAMAGE,
            Levels::damage,
            Levels::damage,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Levels} field that can be obtained
     * using the {@link Levels#shield()} method.
     */
    DoubleField<Levels, Double> SHIELD = DoubleField.create(
            Identifier.SHIELD,
            Levels::shield,
            Levels::shield,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this Levels. The id field corresponds to the database
     * column kalaazu.kalaazu.levels.id.
     *
     * @return the id of this Levels
     */
    Byte id();

    /**
     * Returns the account of this Levels. The account field corresponds to the
     * database column kalaazu.kalaazu.levels.account.
     *
     * @return the account of this Levels
     */
    long account();

    /**
     * Returns the drone of this Levels. The drone field corresponds to the
     * database column kalaazu.kalaazu.levels.drone.
     *
     * @return the drone of this Levels
     */
    short drone();

    /**
     * Returns the pet of this Levels. The pet field corresponds to the database
     * column kalaazu.kalaazu.levels.pet.
     *
     * @return the pet of this Levels
     */
    int pet();

    /**
     * Returns the damage of this Levels. The damage field corresponds to the
     * database column kalaazu.kalaazu.levels.damage.
     *
     * @return the damage of this Levels
     */
    double damage();

    /**
     * Returns the shield of this Levels. The shield field corresponds to the
     * database column kalaazu.kalaazu.levels.shield.
     *
     * @return the shield of this Levels
     */
    double shield();

    /**
     * Sets the id of this Levels. The id field corresponds to the database
     * column kalaazu.kalaazu.levels.id.
     *
     * @param id to set of this Levels
     *
     * @return this Levels instance
     */
    Levels id(Byte id);

    /**
     * Sets the account of this Levels. The account field corresponds to the
     * database column kalaazu.kalaazu.levels.account.
     *
     * @param account to set of this Levels
     *
     * @return this Levels instance
     */
    Levels account(long account);

    /**
     * Sets the drone of this Levels. The drone field corresponds to the
     * database column kalaazu.kalaazu.levels.drone.
     *
     * @param drone to set of this Levels
     *
     * @return this Levels instance
     */
    Levels drone(short drone);

    /**
     * Sets the pet of this Levels. The pet field corresponds to the database
     * column kalaazu.kalaazu.levels.pet.
     *
     * @param pet to set of this Levels
     *
     * @return this Levels instance
     */
    Levels pet(int pet);

    /**
     * Sets the damage of this Levels. The damage field corresponds to the
     * database column kalaazu.kalaazu.levels.damage.
     *
     * @param damage to set of this Levels
     *
     * @return this Levels instance
     */
    Levels damage(double damage);

    /**
     * Sets the shield of this Levels. The shield field corresponds to the
     * database column kalaazu.kalaazu.levels.shield.
     *
     * @param shield to set of this Levels
     *
     * @return this Levels instance
     */
    Levels shield(double shield);

    enum Identifier implements ColumnIdentifier<Levels> {

        ID("id"),
        ACCOUNT("account"),
        DRONE("drone"),
        PET("pet"),
        DAMAGE("damage"),
        SHIELD("shield");

        private final String columnName;

        private final TableIdentifier<Levels> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "levels";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<Levels> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}