package com.kalaazu.persistence.database.entities.clans_messages.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.Clans;
import com.kalaazu.persistence.database.entities.ClansMessages;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.mappers.MessageStatus;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base implementation of the {@link
 * ClansMessages}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedClansMessagesImpl implements ClansMessages {

    private Integer id;

    private int clansId;

    private int fromAccountsId;

    private MessageStatus fromStatus;

    private Integer toAccountsId;

    private MessageStatus toStatus;

    private String title;

    private String text;

    private Timestamp date;

    protected GeneratedClansMessagesImpl() {

    }

    @Override
    public OptionalInt toAccountsId() {
        return OptionalUtil.ofNullable(toAccountsId);
    }


    @Override
    public Clans findClansId(Manager<Clans> foreignManager) {
        return foreignManager.stream()
                             .filter(Clans.ID.equal(clansId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Accounts findFromAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(fromAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Accounts> findToAccountsId(Manager<Accounts> foreignManager) {
        if (toAccountsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Accounts.ID.equal(toAccountsId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }
}