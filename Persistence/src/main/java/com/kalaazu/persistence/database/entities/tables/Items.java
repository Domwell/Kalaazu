/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ItemsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Contains server's items.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Items extends TableImpl<ItemsRecord> {

    private static final long serialVersionUID = 1784857322;

    /**
     * The reference instance of <code>kalaazu.items</code>
     */
    public static final Items ITEMS = new Items();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ItemsRecord> getRecordType() {
        return ItemsRecord.class;
    }

    /**
     * The column <code>kalaazu.items.id</code>. Primary Key.
     */
    public final TableField<ItemsRecord, Short> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.items.name</code>.
     */
    public final TableField<ItemsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.items.category</code>.
     */
    public final TableField<ItemsRecord, Byte> CATEGORY = createField(DSL.name("category"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.items.description</code>. Shop description.
     */
    public final TableField<ItemsRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "Shop description.");

    /**
     * The column <code>kalaazu.items.price</code>.
     */
    public final TableField<ItemsRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>kalaazu.items.type</code>.
     */
    public final TableField<ItemsRecord, Byte> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.items.is_elite</code>.
     */
    public final TableField<ItemsRecord, Byte> IS_ELITE = createField(DSL.name("is_elite"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>kalaazu.items.is_event</code>. Event item.
     */
    public final TableField<ItemsRecord, Byte> IS_EVENT = createField(DSL.name("is_event"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "Event item.");

    /**
     * The column <code>kalaazu.items.is_buyable</code>. Buyable in shop
     */
    public final TableField<ItemsRecord, Byte> IS_BUYABLE = createField(DSL.name("is_buyable"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINT)), this, "Buyable in shop");

    /**
     * Create a <code>kalaazu.items</code> table reference
     */
    public Items() {
        this(DSL.name("items"), null);
    }

    /**
     * Create an aliased <code>kalaazu.items</code> table reference
     */
    public Items(String alias) {
        this(DSL.name(alias), ITEMS);
    }

    /**
     * Create an aliased <code>kalaazu.items</code> table reference
     */
    public Items(Name alias) {
        this(alias, ITEMS);
    }

    private Items(Name alias, Table<ItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Items(Name alias, Table<ItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains server's items."));
    }

    public <O extends Record> Items(Table<O> child, ForeignKey<O, ItemsRecord> key) {
        super(child, key, ITEMS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ITEMS_PRIMARY);
    }

    @Override
    public Identity<ItemsRecord, Short> getIdentity() {
        return Keys.IDENTITY_ITEMS;
    }

    @Override
    public UniqueKey<ItemsRecord> getPrimaryKey() {
        return Keys.KEY_ITEMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<ItemsRecord>>asList(Keys.KEY_ITEMS_PRIMARY);
    }

    @Override
    public Items as(String alias) {
        return new Items(DSL.name(alias), this);
    }

    @Override
    public Items as(Name alias) {
        return new Items(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(String name) {
        return new Items(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Items rename(Name name) {
        return new Items(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Short, String, Byte, String, Integer, Byte, Byte, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
