package com.kalaazu.persistence.database.entities.news.generated;

import com.kalaazu.persistence.database.entities.News;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ShortField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.field.method.ReferenceSetter;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;

/**
 * The generated base for the {@link
 * News}-interface
 * representing entities of the {@code news}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedNews {

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#id()} method.
     */
    ShortField<News, Short> ID = ShortField.create(
            Identifier.ID,
            News::id,
            News::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#date()} method.
     */
    ComparableField<News, Timestamp, Timestamp> DATE = ComparableField.create(
            Identifier.DATE,
            News::date,
            (ReferenceSetter<News, Timestamp>) News::date,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#image()} method.
     */
    StringField<News, String> IMAGE = StringField.create(
            Identifier.IMAGE,
            News::image,
            News::image,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#title()} method.
     */
    StringField<News, String> TITLE = StringField.create(
            Identifier.TITLE,
            News::title,
            News::title,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#teaser()} method.
     */
    StringField<News, String> TEASER = StringField.create(
            Identifier.TEASER,
            News::teaser,
            News::teaser,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#text()} method.
     */
    StringField<News, String> TEXT = StringField.create(
            Identifier.TEXT,
            News::text,
            News::text,
            TypeMapper.identity(),
            false
    );

    /**
     * Returns the id of this News. The id field corresponds to the database
     * column kalaazu.kalaazu.news.id.
     *
     * @return the id of this News
     */
    Short id();

    /**
     * Returns the date of this News. The date field corresponds to the database
     * column kalaazu.kalaazu.news.date.
     *
     * @return the date of this News
     */
    Timestamp date();

    /**
     * Returns the image of this News. The image field corresponds to the
     * database column kalaazu.kalaazu.news.image.
     *
     * @return the image of this News
     */
    String image();

    /**
     * Returns the title of this News. The title field corresponds to the
     * database column kalaazu.kalaazu.news.title.
     *
     * @return the title of this News
     */
    String title();

    /**
     * Returns the teaser of this News. The teaser field corresponds to the
     * database column kalaazu.kalaazu.news.teaser.
     *
     * @return the teaser of this News
     */
    String teaser();

    /**
     * Returns the text of this News. The text field corresponds to the database
     * column kalaazu.kalaazu.news.text.
     *
     * @return the text of this News
     */
    String text();

    /**
     * Sets the id of this News. The id field corresponds to the database column
     * kalaazu.kalaazu.news.id.
     *
     * @param id to set of this News
     *
     * @return this News instance
     */
    News id(Short id);

    /**
     * Sets the date of this News. The date field corresponds to the database
     * column kalaazu.kalaazu.news.date.
     *
     * @param date to set of this News
     *
     * @return this News instance
     */
    News date(Timestamp date);

    /**
     * Sets the image of this News. The image field corresponds to the database
     * column kalaazu.kalaazu.news.image.
     *
     * @param image to set of this News
     *
     * @return this News instance
     */
    News image(String image);

    /**
     * Sets the title of this News. The title field corresponds to the database
     * column kalaazu.kalaazu.news.title.
     *
     * @param title to set of this News
     *
     * @return this News instance
     */
    News title(String title);

    /**
     * Sets the teaser of this News. The teaser field corresponds to the
     * database column kalaazu.kalaazu.news.teaser.
     *
     * @param teaser to set of this News
     *
     * @return this News instance
     */
    News teaser(String teaser);

    /**
     * Sets the text of this News. The text field corresponds to the database
     * column kalaazu.kalaazu.news.text.
     *
     * @param text to set of this News
     *
     * @return this News instance
     */
    News text(String text);

    enum Identifier implements ColumnIdentifier<News> {

        ID("id"),
        DATE("date"),
        IMAGE("image"),
        TITLE("title"),
        TEASER("teaser"),
        TEXT("text");

        private final String columnName;

        private final TableIdentifier<News> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "news";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<News> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}