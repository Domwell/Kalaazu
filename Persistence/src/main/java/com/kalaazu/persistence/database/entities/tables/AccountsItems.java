/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.AccountsItemsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Items bough by an account.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsItems extends TableImpl<AccountsItemsRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_items</code>
     */
    public static final AccountsItems ACCOUNTS_ITEMS = new AccountsItems();
    private static final long serialVersionUID = -1545809117;
    /**
     * The column <code>kalaazu.accounts_items.id</code>. Primary Key.
     */
    public final TableField<AccountsItemsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_items.items_id</code>.
     */
    public final TableField<AccountsItemsRecord, Short> ITEMS_ID = createField(
            DSL.name("items_id"),
            org.jooq.impl.SQLDataType.SMALLINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_items.accounts_id</code>.
     */
    public final TableField<AccountsItemsRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_items.levels_id</code>.
     */
    public final TableField<AccountsItemsRecord, Byte> LEVELS_ID = createField(
            DSL.name("levels_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_items.date</code>.
     */
    public final TableField<AccountsItemsRecord, Timestamp> DATE = createField(
            DSL.name("date"),
            org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
                                               .defaultValue(org.jooq.impl.DSL.field(
                                                       "CURRENT_TIMESTAMP",
                                                       org.jooq.impl.SQLDataType.TIMESTAMP
                                               )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_items.amount</code>. Amount of items bough (for stackable items).
     */
    public final TableField<AccountsItemsRecord, Long> AMOUNT = createField(
            DSL.name("amount"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "1",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Amount of items bough (for stackable items)."
    );

    /**
     * Create a <code>kalaazu.accounts_items</code> table reference
     */
    public AccountsItems() {
        this(DSL.name("accounts_items"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_items</code> table reference
     */
    public AccountsItems(String alias) {
        this(DSL.name(alias), ACCOUNTS_ITEMS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_items</code> table reference
     */
    public AccountsItems(Name alias) {
        this(alias, ACCOUNTS_ITEMS);
    }

    private AccountsItems(Name alias, Table<AccountsItemsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsItems(Name alias, Table<AccountsItemsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Items bough by an account."));
    }

    public <O extends Record> AccountsItems(Table<O> child, ForeignKey<O, AccountsItemsRecord> key) {
        super(child, key, ACCOUNTS_ITEMS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsItemsRecord> getRecordType() {
        return AccountsItemsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_ITEMS_ACCOUNTS_ITEMS_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_ITEMS_ACCOUNTS_ITEMS_ITEMS_ID_IDX,
                Indexes.ACCOUNTS_ITEMS_ACCOUNTS_ITEMS_LEVELS_ID_IDX,
                Indexes.ACCOUNTS_ITEMS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsItemsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_ITEMS;
    }

    @Override
    public UniqueKey<AccountsItemsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_ITEMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsItemsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsItemsRecord>>asList(Keys.KEY_ACCOUNTS_ITEMS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AccountsItemsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsItemsRecord, ?>>asList(
                Keys.ACCOUNTS_ITEMS_ITEMS,
                Keys.ACCOUNTS_ITEMS_ACCOUNTS,
                Keys.ACCOUNTS_ITEMS_LEVELS
        );
    }

    public Items items() {
        return new Items(this, Keys.ACCOUNTS_ITEMS_ITEMS);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_ITEMS_ACCOUNTS);
    }

    public Levels levels() {
        return new Levels(this, Keys.ACCOUNTS_ITEMS_LEVELS);
    }

    @Override
    public AccountsItems as(String alias) {
        return new AccountsItems(DSL.name(alias), this);
    }

    @Override
    public AccountsItems as(Name alias) {
        return new AccountsItems(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsItems rename(String name) {
        return new AccountsItems(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsItems rename(Name name) {
        return new AccountsItems(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Short, Integer, Byte, Timestamp, Long> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
