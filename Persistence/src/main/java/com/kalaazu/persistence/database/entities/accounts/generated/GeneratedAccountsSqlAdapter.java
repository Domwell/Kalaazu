package com.kalaazu.persistence.database.entities.accounts.generated;

import com.kalaazu.persistence.database.entities.*;
import com.kalaazu.persistence.database.entities.accounts.AccountsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getByte;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getInt;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts.Accounts} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsSqlAdapter implements SqlAdapter<Accounts> {

    private final TableIdentifier<Accounts> tableIdentifier;

    protected GeneratedAccountsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts");
    }

    protected Accounts apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setUsersId(resultSet.getInt(2 + offset))
                .setSessionId(resultSet.getString(3 + offset))
                .setLevelsId(resultSet.getByte(4 + offset))
                .setFactionsId(getByte(resultSet, 5 + offset))
                .setAccountsHangarsId(getInt(resultSet, 6 + offset))
                .setClansId(getInt(resultSet, 7 + offset))
                .setRanksId(resultSet.getByte(8 + offset))
                .setName(resultSet.getString(9 + offset))
                .setBanDate(resultSet.getTimestamp(10 + offset))
                .setPremiumDate(resultSet.getTimestamp(11 + offset))
                .setDate(resultSet.getTimestamp(12 + offset))
                .setLastLogin(resultSet.getTimestamp(13 + offset))
                .setSkillPointsTotal(resultSet.getShort(14 + offset))
                .setSkillPointsFree(resultSet.getShort(15 + offset))
                ;
    }

    protected AccountsImpl createEntity() {
        return new AccountsImpl();
    }

    @Override
    public TableIdentifier<Accounts> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, Accounts> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, Accounts> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}