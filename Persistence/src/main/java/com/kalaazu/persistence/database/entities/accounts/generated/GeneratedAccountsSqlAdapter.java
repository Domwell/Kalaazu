package com.kalaazu.persistence.database.entities.accounts.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.accounts.AccountsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getByte;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getInt;

/**
 * The generated Sql Adapter for a {@link
 * Accounts}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsSqlAdapter {

    private final TableIdentifier<Accounts> tableIdentifier;

    protected GeneratedAccountsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected Accounts apply(ResultSet resultSet) throws SpeedmentException {
        final Accounts entity = createEntity();
        try {
            entity.id(resultSet.getInt(1));
            entity.usersId(resultSet.getInt(2));
            entity.sessionId(resultSet.getString(3));
            entity.levelsId(resultSet.getByte(4));
            entity.factionsId(getByte(resultSet, 5));
            entity.accountsHangarsId(getInt(resultSet, 6));
            entity.clansId(getInt(resultSet, 7));
            entity.ranksId(resultSet.getByte(8));
            entity.name(resultSet.getString(9));
            entity.banDate(resultSet.getTimestamp(10));
            entity.premiumDate(resultSet.getTimestamp(11));
            entity.date(resultSet.getTimestamp(12));
            entity.lastLogin(resultSet.getTimestamp(13));
            entity.skillPointsTotal(resultSet.getShort(14));
            entity.skillPointsFree(resultSet.getShort(15));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected AccountsImpl createEntity() {
        return new AccountsImpl();
    }
}