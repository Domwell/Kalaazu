/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.InvitationCodesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Contains the invitation codes that can be used for registering.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InvitationCodes extends TableImpl<InvitationCodesRecord> {

    private static final long serialVersionUID = -1471347882;

    /**
     * The reference instance of <code>kalaazu.invitation_codes</code>
     */
    public static final InvitationCodes INVITATION_CODES = new InvitationCodes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InvitationCodesRecord> getRecordType() {
        return InvitationCodesRecord.class;
    }

    /**
     * The column <code>kalaazu.invitation_codes.id</code>. Primary Key.
     */
    public final TableField<InvitationCodesRecord, Short> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.invitation_codes.code</code>. The invitation code.
     */
    public final TableField<InvitationCodesRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "The invitation code.");

    /**
     * The column <code>kalaazu.invitation_codes.limit</code>. Amount of times the code can be used.
     */
    public final TableField<InvitationCodesRecord, Byte> LIMIT = createField(DSL.name("limit"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.TINYINT)), this, "Amount of times the code can be used.");

    /**
     * Create a <code>kalaazu.invitation_codes</code> table reference
     */
    public InvitationCodes() {
        this(DSL.name("invitation_codes"), null);
    }

    /**
     * Create an aliased <code>kalaazu.invitation_codes</code> table reference
     */
    public InvitationCodes(String alias) {
        this(DSL.name(alias), INVITATION_CODES);
    }

    /**
     * Create an aliased <code>kalaazu.invitation_codes</code> table reference
     */
    public InvitationCodes(Name alias) {
        this(alias, INVITATION_CODES);
    }

    private InvitationCodes(Name alias, Table<InvitationCodesRecord> aliased) {
        this(alias, aliased, null);
    }

    private InvitationCodes(Name alias, Table<InvitationCodesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains the invitation codes that can be used for registering."));
    }

    public <O extends Record> InvitationCodes(Table<O> child, ForeignKey<O, InvitationCodesRecord> key) {
        super(child, key, INVITATION_CODES);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INVITATION_CODES_INVITATION_CODES_CODE_IDX, Indexes.INVITATION_CODES_INVITATION_CODES_ID_IDX, Indexes.INVITATION_CODES_PRIMARY);
    }

    @Override
    public Identity<InvitationCodesRecord, Short> getIdentity() {
        return Keys.IDENTITY_INVITATION_CODES;
    }

    @Override
    public UniqueKey<InvitationCodesRecord> getPrimaryKey() {
        return Keys.KEY_INVITATION_CODES_PRIMARY;
    }

    @Override
    public List<UniqueKey<InvitationCodesRecord>> getKeys() {
        return Arrays.<UniqueKey<InvitationCodesRecord>>asList(Keys.KEY_INVITATION_CODES_PRIMARY, Keys.KEY_INVITATION_CODES_INVITATION_CODES_ID_IDX, Keys.KEY_INVITATION_CODES_INVITATION_CODES_CODE_IDX);
    }

    @Override
    public InvitationCodes as(String alias) {
        return new InvitationCodes(DSL.name(alias), this);
    }

    @Override
    public InvitationCodes as(Name alias) {
        return new InvitationCodes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InvitationCodes rename(String name) {
        return new InvitationCodes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InvitationCodes rename(Name name) {
        return new InvitationCodes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
