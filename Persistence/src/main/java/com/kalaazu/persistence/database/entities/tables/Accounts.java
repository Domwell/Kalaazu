/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.AccountsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * In game accounts.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Accounts extends TableImpl<AccountsRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();
    private static final long serialVersionUID = 2093430932;
    /**
     * The column <code>kalaazu.accounts.id</code>. Primary Key.
     */
    public final TableField<AccountsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts.users_id</code>. Account's owner.
     */
    public final TableField<AccountsRecord, Integer> USERS_ID = createField(
            DSL.name("users_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            "Account's owner."
    );
    /**
     * The column <code>kalaazu.accounts.session_id</code>. Session ID.
     */
    public final TableField<AccountsRecord, String> SESSION_ID = createField(
            DSL.name("session_id"),
            org.jooq.impl.SQLDataType.VARCHAR(32)
                                     .nullable(false),
            this,
            "Session ID."
    );
    /**
     * The column <code>kalaazu.accounts.levels_id</code>. Current level.
     */
    public final TableField<AccountsRecord, Byte> LEVELS_ID = createField(
            DSL.name("levels_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Current level."
    );
    /**
     * The column <code>kalaazu.accounts.factions_id</code>. Faction that the account belongs to.
     */
    public final TableField<AccountsRecord, Byte> FACTIONS_ID = createField(
            DSL.name("factions_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            "Faction that the account belongs to."
    );
    /**
     * The column <code>kalaazu.accounts.accounts_hangars_id</code>. Active hangar.
     */
    public final TableField<AccountsRecord, Integer> ACCOUNTS_HANGARS_ID = createField(
            DSL.name("accounts_hangars_id"),
            org.jooq.impl.SQLDataType.INTEGER,
            this,
            "Active hangar."
    );
    /**
     * The column <code>kalaazu.accounts.clans_id</code>.
     */
    public final TableField<AccountsRecord, Integer> CLANS_ID = createField(
            DSL.name("clans_id"),
            org.jooq.impl.SQLDataType.INTEGER,
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts.ranks_id</code>.
     */
    public final TableField<AccountsRecord, Byte> RANKS_ID = createField(
            DSL.name("ranks_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts.name</code>. In game name.
     */
    public final TableField<AccountsRecord, String> NAME = createField(
            DSL.name("name"),
            org.jooq.impl.SQLDataType.VARCHAR(255)
                                     .nullable(false),
            this,
            "In game name."
    );
    /**
     * The column <code>kalaazu.accounts.ban_date</code>. Ban expiration date.
     */
    public final TableField<AccountsRecord, Timestamp> BAN_DATE = createField(
            DSL.name("ban_date"),
            org.jooq.impl.SQLDataType.TIMESTAMP,
            this,
            "Ban expiration date."
    );
    /**
     * The column <code>kalaazu.accounts.premium_date</code>. Premium expiration date.
     */
    public final TableField<AccountsRecord, Timestamp> PREMIUM_DATE = createField(
            DSL.name("premium_date"),
            org.jooq.impl.SQLDataType.TIMESTAMP,
            this,
            "Premium expiration date."
    );
    /**
     * The column <code>kalaazu.accounts.date</code>.
     */
    public final TableField<AccountsRecord, Timestamp> DATE = createField(
            DSL.name("date"),
            org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
                                               .defaultValue(org.jooq.impl.DSL.field(
                                                       "CURRENT_TIMESTAMP",
                                                       org.jooq.impl.SQLDataType.TIMESTAMP
                                               )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts.last_login</code>. Last login date.
     */
    public final TableField<AccountsRecord, Timestamp> LAST_LOGIN = createField(
            DSL.name("last_login"),
            org.jooq.impl.SQLDataType.TIMESTAMP,
            this,
            "Last login date."
    );
    /**
     * The column <code>kalaazu.accounts.skill_points_total</code>. Total skill points available.
     */
    public final TableField<AccountsRecord, Short> SKILL_POINTS_TOTAL = createField(
            DSL.name("skill_points_total"),
            org.jooq.impl.SQLDataType.SMALLINT.nullable(false)
                                              .defaultValue(org.jooq.impl.DSL.field(
                                                      "0",
                                                      org.jooq.impl.SQLDataType.SMALLINT
                                              )),
            this,
            "Total skill points available."
    );
    /**
     * The column <code>kalaazu.accounts.skill_points_free</code>. Free skill points available.
     */
    public final TableField<AccountsRecord, Short> SKILL_POINTS_FREE = createField(
            DSL.name("skill_points_free"),
            org.jooq.impl.SQLDataType.SMALLINT.nullable(false)
                                              .defaultValue(org.jooq.impl.DSL.field(
                                                      "0",
                                                      org.jooq.impl.SQLDataType.SMALLINT
                                              )),
            this,
            "Free skill points available."
    );

    /**
     * Create a <code>kalaazu.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("In game accounts."));
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_ACCOUNTS_ACCOUNTS_HANGARS,
                Indexes.ACCOUNTS_ACCOUNTS_CLANS_ID_IDX,
                Indexes.ACCOUNTS_ACCOUNTS_FACTIONS,
                Indexes.ACCOUNTS_ACCOUNTS_LEVELS,
                Indexes.ACCOUNTS_ACCOUNTS_NAME_IDX,
                Indexes.ACCOUNTS_ACCOUNTS_RANKS_ID_IDX,
                Indexes.ACCOUNTS_ACCOUNTS_SESSION_ID_IDX,
                Indexes.ACCOUNTS_ACCOUNTS_USERS,
                Indexes.ACCOUNTS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS;
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsRecord>>asList(
                Keys.KEY_ACCOUNTS_PRIMARY,
                Keys.KEY_ACCOUNTS_ACCOUNTS_SESSION_ID_IDX,
                Keys.KEY_ACCOUNTS_ACCOUNTS_NAME_IDX
        );
    }

    @Override
    public List<ForeignKey<AccountsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsRecord, ?>>asList(
                Keys.ACCOUNTS_USERS,
                Keys.ACCOUNTS_LEVELS,
                Keys.ACCOUNTS_FACTIONS,
                Keys.ACCOUNTS_ACCOUNTS_HANGARS,
                Keys.ACCOUNTS_CLANS,
                Keys.ACCOUNTS_RANKS
        );
    }

    public Users users() {
        return new Users(this, Keys.ACCOUNTS_USERS);
    }

    public Levels levels() {
        return new Levels(this, Keys.ACCOUNTS_LEVELS);
    }

    public Factions factions() {
        return new Factions(this, Keys.ACCOUNTS_FACTIONS);
    }

    public AccountsHangars accountsHangars() {
        return new AccountsHangars(this, Keys.ACCOUNTS_ACCOUNTS_HANGARS);
    }

    public Clans clans() {
        return new Clans(this, Keys.ACCOUNTS_CLANS);
    }

    public Ranks ranks() {
        return new Ranks(this, Keys.ACCOUNTS_RANKS);
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row15 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row15<Integer, Integer, String, Byte, Byte, Integer, Integer, Byte, String, Timestamp, Timestamp, Timestamp, Timestamp, Short, Short> fieldsRow() {
        return (Row15) super.fieldsRow();
    }
}
