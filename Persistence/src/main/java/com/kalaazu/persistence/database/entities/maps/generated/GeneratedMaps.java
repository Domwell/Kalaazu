package com.kalaazu.persistence.database.entities.maps.generated;

import com.kalaazu.persistence.database.entities.Factions;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.Maps;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.*;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.integer.PrimitiveIntegerZeroOneToBooleanMapper;

import java.util.Optional;

/**
 * The generated base for the {@link
 * Maps}-interface
 * representing entities of the {@code maps}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMaps {

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#id()} method.
     */
    ByteField<Maps, Byte> ID = ByteField.create(
            Identifier.ID,
            Maps::id,
            Maps::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#name()} method.
     */
    StringField<Maps, String> NAME = StringField.create(
            Identifier.NAME,
            Maps::name,
            Maps::name,
            TypeMapper.identity(),
            true
    );

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#factionsId()} method.
     */
    ComparableForeignKeyField<Maps, Byte, Byte, Factions> FACTIONS_ID = ComparableForeignKeyField.create(
            Identifier.FACTIONS_ID,
            o -> OptionalUtil.unwrap(o.factionsId()),
            Maps::factionsId,
            Factions.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#isPvp()} method.
     */
    BooleanField<Maps, Integer> IS_PVP = BooleanField.create(
            Identifier.IS_PVP,
            Maps::isPvp,
            Maps::isPvp,
            new PrimitiveIntegerZeroOneToBooleanMapper(),
            false
    );

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#isStarter()} method.
     */
    BooleanField<Maps, Integer> IS_STARTER = BooleanField.create(
            Identifier.IS_STARTER,
            Maps::isStarter,
            Maps::isStarter,
            new PrimitiveIntegerZeroOneToBooleanMapper(),
            false
    );

    /**
     * This Field corresponds to the {@link Maps} field that can be obtained
     * using the {@link Maps#limits()} method.
     */
    LongField<Maps, Long> LIMITS = LongField.create(
            Identifier.LIMITS,
            Maps::limits,
            Maps::limits,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this Maps. The id field corresponds to the database
     * column kalaazu.kalaazu.maps.id.
     *
     * @return the id of this Maps
     */
    Byte id();

    /**
     * Returns the name of this Maps. The name field corresponds to the database
     * column kalaazu.kalaazu.maps.name.
     *
     * @return the name of this Maps
     */
    String name();

    /**
     * Returns the factionsId of this Maps. The factionsId field corresponds to
     * the database column kalaazu.kalaazu.maps.factions_id.
     *
     * @return the factionsId of this Maps
     */
    Optional<Byte> factionsId();

    /**
     * Returns the isPvp of this Maps. The isPvp field corresponds to the
     * database column kalaazu.kalaazu.maps.is_pvp.
     *
     * @return the isPvp of this Maps
     */
    boolean isPvp();

    /**
     * Returns the isStarter of this Maps. The isStarter field corresponds to
     * the database column kalaazu.kalaazu.maps.is_starter.
     *
     * @return the isStarter of this Maps
     */
    boolean isStarter();

    /**
     * Returns the limits of this Maps. The limits field corresponds to the
     * database column kalaazu.kalaazu.maps.limits.
     *
     * @return the limits of this Maps
     */
    long limits();

    /**
     * Sets the id of this Maps. The id field corresponds to the database column
     * kalaazu.kalaazu.maps.id.
     *
     * @param id to set of this Maps
     *
     * @return this Maps instance
     */
    Maps id(Byte id);

    /**
     * Sets the name of this Maps. The name field corresponds to the database
     * column kalaazu.kalaazu.maps.name.
     *
     * @param name to set of this Maps
     *
     * @return this Maps instance
     */
    Maps name(String name);

    /**
     * Sets the factionsId of this Maps. The factionsId field corresponds to the
     * database column kalaazu.kalaazu.maps.factions_id.
     *
     * @param factionsId to set of this Maps
     *
     * @return this Maps instance
     */
    Maps factionsId(Byte factionsId);

    /**
     * Sets the isPvp of this Maps. The isPvp field corresponds to the database
     * column kalaazu.kalaazu.maps.is_pvp.
     *
     * @param isPvp to set of this Maps
     *
     * @return this Maps instance
     */
    Maps isPvp(boolean isPvp);

    /**
     * Sets the isStarter of this Maps. The isStarter field corresponds to the
     * database column kalaazu.kalaazu.maps.is_starter.
     *
     * @param isStarter to set of this Maps
     *
     * @return this Maps instance
     */
    Maps isStarter(boolean isStarter);

    /**
     * Sets the limits of this Maps. The limits field corresponds to the
     * database column kalaazu.kalaazu.maps.limits.
     *
     * @param limits to set of this Maps
     *
     * @return this Maps instance
     */
    Maps limits(long limits);

    /**
     * Queries the specified manager for the referenced Factions. If no such
     * Factions exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<Factions> findFactionsId(Manager<Factions> foreignManager);

    enum Identifier implements ColumnIdentifier<Maps> {

        ID("id"),
        NAME("name"),
        FACTIONS_ID("factions_id"),
        IS_PVP("is_pvp"),
        IS_STARTER("is_starter"),
        LIMITS("limits");

        private final String columnName;

        private final TableIdentifier<Maps> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "maps";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<Maps> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}