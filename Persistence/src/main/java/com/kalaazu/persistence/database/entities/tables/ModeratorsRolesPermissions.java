/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ModeratorsRolesPermissionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Moderator roles' permissions
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ModeratorsRolesPermissions extends TableImpl<ModeratorsRolesPermissionsRecord> {

    /**
     * The reference instance of <code>kalaazu.moderators_roles_permissions</code>
     */
    public static final ModeratorsRolesPermissions MODERATORS_ROLES_PERMISSIONS = new ModeratorsRolesPermissions();
    private static final long serialVersionUID = -1944326529;
    /**
     * The column <code>kalaazu.moderators_roles_permissions.id</code>. Primary Key.
     */
    public final TableField<ModeratorsRolesPermissionsRecord, Byte> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.moderators_roles_permissions.moderators_roles_id</code>.
     */
    public final TableField<ModeratorsRolesPermissionsRecord, Byte> MODERATORS_ROLES_ID = createField(DSL.name(
            "moderators_roles_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");
    /**
     * The column <code>kalaazu.moderators_roles_permissions.permissions_id</code>.
     */
    public final TableField<ModeratorsRolesPermissionsRecord, Byte> PERMISSIONS_ID = createField(DSL.name(
            "permissions_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");
    /**
     * The column <code>kalaazu.moderators_roles_permissions.is_enabled</code>. Enabled value, null = inherited
     */
    public final TableField<ModeratorsRolesPermissionsRecord, Byte> IS_ENABLED = createField(
            DSL.name("is_enabled"),
            org.jooq.impl.SQLDataType.TINYINT,
            this,
            "Enabled value, null = inherited"
    );

    /**
     * Create a <code>kalaazu.moderators_roles_permissions</code> table reference
     */
    public ModeratorsRolesPermissions() {
        this(DSL.name("moderators_roles_permissions"), null);
    }

    /**
     * Create an aliased <code>kalaazu.moderators_roles_permissions</code> table reference
     */
    public ModeratorsRolesPermissions(String alias) {
        this(DSL.name(alias), MODERATORS_ROLES_PERMISSIONS);
    }

    /**
     * Create an aliased <code>kalaazu.moderators_roles_permissions</code> table reference
     */
    public ModeratorsRolesPermissions(Name alias) {
        this(alias, MODERATORS_ROLES_PERMISSIONS);
    }

    private ModeratorsRolesPermissions(Name alias, Table<ModeratorsRolesPermissionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModeratorsRolesPermissions(
            Name alias, Table<ModeratorsRolesPermissionsRecord> aliased, Field<?>[] parameters
    ) {
        super(alias, null, aliased, parameters, DSL.comment("Moderator roles' permissions"));
    }

    public <O extends Record> ModeratorsRolesPermissions(
            Table<O> child, ForeignKey<O, ModeratorsRolesPermissionsRecord> key
    ) {
        super(child, key, MODERATORS_ROLES_PERMISSIONS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModeratorsRolesPermissionsRecord> getRecordType() {
        return ModeratorsRolesPermissionsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.MODERATORS_ROLES_PERMISSIONS_MODERATORS_ROLES_PERMISSIONS_MODERATORS_ROLES_ID_IDX,
                Indexes.MODERATORS_ROLES_PERMISSIONS_MODERATORS_ROLES_PERMISSIONS_PERMISSIONS_ID_IDX,
                Indexes.MODERATORS_ROLES_PERMISSIONS_PRIMARY
        );
    }

    @Override
    public Identity<ModeratorsRolesPermissionsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_MODERATORS_ROLES_PERMISSIONS;
    }

    @Override
    public UniqueKey<ModeratorsRolesPermissionsRecord> getPrimaryKey() {
        return Keys.KEY_MODERATORS_ROLES_PERMISSIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ModeratorsRolesPermissionsRecord>> getKeys() {
        return Arrays.<UniqueKey<ModeratorsRolesPermissionsRecord>>asList(Keys.KEY_MODERATORS_ROLES_PERMISSIONS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ModeratorsRolesPermissionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModeratorsRolesPermissionsRecord, ?>>asList(
                Keys.MODERATORS_ROLES_PERMISSIONS_MODERATORS_ROLES,
                Keys.MODERATORS_ROLES_PERMISSIONS_PERMISSIONS
        );
    }

    public ModeratorsRoles moderatorsRoles() {
        return new ModeratorsRoles(this, Keys.MODERATORS_ROLES_PERMISSIONS_MODERATORS_ROLES);
    }

    public Permissions permissions() {
        return new Permissions(this, Keys.MODERATORS_ROLES_PERMISSIONS_PERMISSIONS);
    }

    @Override
    public ModeratorsRolesPermissions as(String alias) {
        return new ModeratorsRolesPermissions(DSL.name(alias), this);
    }

    @Override
    public ModeratorsRolesPermissions as(Name alias) {
        return new ModeratorsRolesPermissions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModeratorsRolesPermissions rename(String name) {
        return new ModeratorsRolesPermissions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModeratorsRolesPermissions rename(Name name) {
        return new ModeratorsRolesPermissions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Byte, Byte, Byte, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
