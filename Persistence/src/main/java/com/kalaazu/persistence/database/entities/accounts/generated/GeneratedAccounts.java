package com.kalaazu.persistence.database.entities.accounts.generated;

import com.kalaazu.persistence.database.entities.*;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.*;
import com.speedment.runtime.field.method.ReferenceSetter;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * Accounts}-interface
 * representing entities of the {@code accounts}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAccounts {

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#id()} method.
     */
    IntField<Accounts, Integer> ID = IntField.create(
            Identifier.ID,
            Accounts::id,
            Accounts::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#usersId()} method.
     */
    IntForeignKeyField<Accounts, Integer, Users> USERS_ID = IntForeignKeyField.create(
            Identifier.USERS_ID,
            Accounts::usersId,
            Accounts::usersId,
            Users.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#sessionId()} method.
     */
    StringField<Accounts, String> SESSION_ID = StringField.create(
            Identifier.SESSION_ID,
            Accounts::sessionId,
            Accounts::sessionId,
            TypeMapper.identity(),
            true
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#levelsId()} method.
     */
    ByteForeignKeyField<Accounts, Byte, Levels> LEVELS_ID = ByteForeignKeyField.create(
            Identifier.LEVELS_ID,
            Accounts::levelsId,
            Accounts::levelsId,
            Levels.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#factionsId()} method.
     */
    ComparableForeignKeyField<Accounts, Byte, Byte, Factions> FACTIONS_ID = ComparableForeignKeyField.create(
            Identifier.FACTIONS_ID,
            o -> OptionalUtil.unwrap(o.factionsId()),
            Accounts::factionsId,
            Factions.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#accountsHangarsId()} method.
     */
    ComparableForeignKeyField<Accounts, Integer, Integer, AccountsHangars> ACCOUNTS_HANGARS_ID = ComparableForeignKeyField.create(
            Identifier.ACCOUNTS_HANGARS_ID,
            o -> OptionalUtil.unwrap(o.accountsHangarsId()),
            Accounts::accountsHangarsId,
            AccountsHangars.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#clansId()} method.
     */
    ComparableForeignKeyField<Accounts, Integer, Integer, Clans> CLANS_ID = ComparableForeignKeyField.create(
            Identifier.CLANS_ID,
            o -> OptionalUtil.unwrap(o.clansId()),
            Accounts::clansId,
            Clans.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#ranksId()} method.
     */
    ByteForeignKeyField<Accounts, Byte, Ranks> RANKS_ID = ByteForeignKeyField.create(
            Identifier.RANKS_ID,
            Accounts::ranksId,
            Accounts::ranksId,
            Ranks.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#name()} method.
     */
    StringField<Accounts, String> NAME = StringField.create(
            Identifier.NAME,
            Accounts::name,
            Accounts::name,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#banDate()} method.
     */
    ComparableField<Accounts, Timestamp, Timestamp> BAN_DATE = ComparableField.create(
            Identifier.BAN_DATE,
            o -> OptionalUtil.unwrap(o.banDate()),
            (ReferenceSetter<Accounts, Timestamp>) Accounts::banDate,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#premiumDate()} method.
     */
    ComparableField<Accounts, Timestamp, Timestamp> PREMIUM_DATE = ComparableField.create(
            Identifier.PREMIUM_DATE,
            o -> OptionalUtil.unwrap(o.premiumDate()),
            (ReferenceSetter<Accounts, Timestamp>) Accounts::premiumDate,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#date()} method.
     */
    ComparableField<Accounts, Timestamp, Timestamp> DATE = ComparableField.create(
            Identifier.DATE,
            Accounts::date,
            (ReferenceSetter<Accounts, Timestamp>) Accounts::date,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#lastLogin()} method.
     */
    ComparableField<Accounts, Timestamp, Timestamp> LAST_LOGIN = ComparableField.create(
            Identifier.LAST_LOGIN,
            o -> OptionalUtil.unwrap(o.lastLogin()),
            (ReferenceSetter<Accounts, Timestamp>) Accounts::lastLogin,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#skillPointsTotal()} method.
     */
    ShortField<Accounts, Short> SKILL_POINTS_TOTAL = ShortField.create(
            Identifier.SKILL_POINTS_TOTAL,
            Accounts::skillPointsTotal,
            Accounts::skillPointsTotal,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link Accounts} field that can be obtained
     * using the {@link Accounts#skillPointsFree()} method.
     */
    ShortField<Accounts, Short> SKILL_POINTS_FREE = ShortField.create(
            Identifier.SKILL_POINTS_FREE,
            Accounts::skillPointsFree,
            Accounts::skillPointsFree,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this Accounts. The id field corresponds to the database
     * column kalaazu.kalaazu.accounts.id.
     *
     * @return the id of this Accounts
     */
    Integer id();

    /**
     * Returns the usersId of this Accounts. The usersId field corresponds to
     * the database column kalaazu.kalaazu.accounts.users_id.
     *
     * @return the usersId of this Accounts
     */
    int usersId();

    /**
     * Returns the sessionId of this Accounts. The sessionId field corresponds
     * to the database column kalaazu.kalaazu.accounts.session_id.
     *
     * @return the sessionId of this Accounts
     */
    String sessionId();

    /**
     * Returns the levelsId of this Accounts. The levelsId field corresponds to
     * the database column kalaazu.kalaazu.accounts.levels_id.
     *
     * @return the levelsId of this Accounts
     */
    byte levelsId();

    /**
     * Returns the factionsId of this Accounts. The factionsId field corresponds
     * to the database column kalaazu.kalaazu.accounts.factions_id.
     *
     * @return the factionsId of this Accounts
     */
    Optional<Byte> factionsId();

    /**
     * Returns the accountsHangarsId of this Accounts. The accountsHangarsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts.accounts_hangars_id.
     *
     * @return the accountsHangarsId of this Accounts
     */
    OptionalInt accountsHangarsId();

    /**
     * Returns the clansId of this Accounts. The clansId field corresponds to
     * the database column kalaazu.kalaazu.accounts.clans_id.
     *
     * @return the clansId of this Accounts
     */
    OptionalInt clansId();

    /**
     * Returns the ranksId of this Accounts. The ranksId field corresponds to
     * the database column kalaazu.kalaazu.accounts.ranks_id.
     *
     * @return the ranksId of this Accounts
     */
    byte ranksId();

    /**
     * Returns the name of this Accounts. The name field corresponds to the
     * database column kalaazu.kalaazu.accounts.name.
     *
     * @return the name of this Accounts
     */
    String name();

    /**
     * Returns the banDate of this Accounts. The banDate field corresponds to
     * the database column kalaazu.kalaazu.accounts.ban_date.
     *
     * @return the banDate of this Accounts
     */
    Optional<Timestamp> banDate();

    /**
     * Returns the premiumDate of this Accounts. The premiumDate field
     * corresponds to the database column kalaazu.kalaazu.accounts.premium_date.
     *
     * @return the premiumDate of this Accounts
     */
    Optional<Timestamp> premiumDate();

    /**
     * Returns the date of this Accounts. The date field corresponds to the
     * database column kalaazu.kalaazu.accounts.date.
     *
     * @return the date of this Accounts
     */
    Timestamp date();

    /**
     * Returns the lastLogin of this Accounts. The lastLogin field corresponds
     * to the database column kalaazu.kalaazu.accounts.last_login.
     *
     * @return the lastLogin of this Accounts
     */
    Optional<Timestamp> lastLogin();

    /**
     * Returns the skillPointsTotal of this Accounts. The skillPointsTotal field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts.skill_points_total.
     *
     * @return the skillPointsTotal of this Accounts
     */
    short skillPointsTotal();

    /**
     * Returns the skillPointsFree of this Accounts. The skillPointsFree field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts.skill_points_free.
     *
     * @return the skillPointsFree of this Accounts
     */
    short skillPointsFree();

    /**
     * s the id of this Accounts. The id field corresponds to the database
     * column kalaazu.kalaazu.accounts.id.
     *
     * @param id to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts id(Integer id);

    /**
     * s the usersId of this Accounts. The usersId field corresponds to the
     * database column kalaazu.kalaazu.accounts.users_id.
     *
     * @param usersId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts usersId(int usersId);

    /**
     * s the sessionId of this Accounts. The sessionId field corresponds to
     * the database column kalaazu.kalaazu.accounts.session_id.
     *
     * @param sessionId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts sessionId(String sessionId);

    /**
     * s the levelsId of this Accounts. The levelsId field corresponds to the
     * database column kalaazu.kalaazu.accounts.levels_id.
     *
     * @param levelsId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts levelsId(byte levelsId);

    /**
     * s the factionsId of this Accounts. The factionsId field corresponds to
     * the database column kalaazu.kalaazu.accounts.factions_id.
     *
     * @param factionsId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts factionsId(Byte factionsId);

    /**
     * s the accountsHangarsId of this Accounts. The accountsHangarsId field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts.accounts_hangars_id.
     *
     * @param accountsHangarsId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts accountsHangarsId(Integer accountsHangarsId);

    /**
     * s the clansId of this Accounts. The clansId field corresponds to the
     * database column kalaazu.kalaazu.accounts.clans_id.
     *
     * @param clansId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts clansId(Integer clansId);

    /**
     * s the ranksId of this Accounts. The ranksId field corresponds to the
     * database column kalaazu.kalaazu.accounts.ranks_id.
     *
     * @param ranksId to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts ranksId(byte ranksId);

    /**
     * s the name of this Accounts. The name field corresponds to the
     * database column kalaazu.kalaazu.accounts.name.
     *
     * @param name to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts name(String name);

    /**
     * s the banDate of this Accounts. The banDate field corresponds to the
     * database column kalaazu.kalaazu.accounts.ban_date.
     *
     * @param banDate to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts banDate(Timestamp banDate);

    /**
     * s the premiumDate of this Accounts. The premiumDate field corresponds
     * to the database column kalaazu.kalaazu.accounts.premium_date.
     *
     * @param premiumDate to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts premiumDate(Timestamp premiumDate);

    /**
     * s the date of this Accounts. The date field corresponds to the
     * database column kalaazu.kalaazu.accounts.date.
     *
     * @param date to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts date(Timestamp date);

    /**
     * s the lastLogin of this Accounts. The lastLogin field corresponds to
     * the database column kalaazu.kalaazu.accounts.last_login.
     *
     * @param lastLogin to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts lastLogin(Timestamp lastLogin);

    /**
     * s the skillPointsTotal of this Accounts. The skillPointsTotal field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts.skill_points_total.
     *
     * @param skillPointsTotal to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts skillPointsTotal(short skillPointsTotal);

    /**
     * s the skillPointsFree of this Accounts. The skillPointsFree field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts.skill_points_free.
     *
     * @param skillPointsFree to set of this Accounts
     *
     * @return this Accounts instance
     */
    Accounts skillPointsFree(short skillPointsFree);

    /**
     * Queries the specified manager for the referenced Users. If no such Users
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Users findUsersId(Manager<Users> foreignManager);

    /**
     * Queries the specified manager for the referenced Levels. If no such
     * Levels exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Levels findLevelsId(Manager<Levels> foreignManager);

    /**
     * Queries the specified manager for the referenced Factions. If no such
     * Factions exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<Factions> findFactionsId(Manager<Factions> foreignManager);

    /**
     * Queries the specified manager for the referenced AccountsHangars. If no
     * such AccountsHangars exists, an {@code NullPointerException} will be
     * thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<AccountsHangars> findAccountsHangarsId(Manager<AccountsHangars> foreignManager);

    /**
     * Queries the specified manager for the referenced Clans. If no such Clans
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<Clans> findClansId(Manager<Clans> foreignManager);

    /**
     * Queries the specified manager for the referenced Ranks. If no such Ranks
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Ranks findRanksId(Manager<Ranks> foreignManager);

    enum Identifier implements ColumnIdentifier<Accounts> {

        ID("id"),
        USERS_ID("users_id"),
        SESSION_ID("session_id"),
        LEVELS_ID("levels_id"),
        FACTIONS_ID("factions_id"),
        ACCOUNTS_HANGARS_ID("accounts_hangars_id"),
        CLANS_ID("clans_id"),
        RANKS_ID("ranks_id"),
        NAME("name"),
        BAN_DATE("ban_date"),
        PREMIUM_DATE("premium_date"),
        DATE("date"),
        LAST_LOGIN("last_login"),
        SKILL_POINTS_TOTAL("skill_points_total"),
        SKILL_POINTS_FREE("skill_points_free");

        private final String columnName;

        private final TableIdentifier<Accounts> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "accounts";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<Accounts> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}