/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.KeyValueRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Contains simple Key -&gt; Value entries.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyValue extends TableImpl<KeyValueRecord> {

    private static final long serialVersionUID = -8348976;

    /**
     * The reference instance of <code>kalaazu.key_value</code>
     */
    public static final KeyValue KEY_VALUE = new KeyValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KeyValueRecord> getRecordType() {
        return KeyValueRecord.class;
    }

    /**
     * The column <code>kalaazu.key_value.key</code>.
     */
    public final TableField<KeyValueRecord, String> KEY = createField(DSL.name("key"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.key_value.value</code>.
     */
    public final TableField<KeyValueRecord, String> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>kalaazu.key_value</code> table reference
     */
    public KeyValue() {
        this(DSL.name("key_value"), null);
    }

    /**
     * Create an aliased <code>kalaazu.key_value</code> table reference
     */
    public KeyValue(String alias) {
        this(DSL.name(alias), KEY_VALUE);
    }

    /**
     * Create an aliased <code>kalaazu.key_value</code> table reference
     */
    public KeyValue(Name alias) {
        this(alias, KEY_VALUE);
    }

    private KeyValue(Name alias, Table<KeyValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private KeyValue(Name alias, Table<KeyValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains simple Key -> Value entries."));
    }

    public <O extends Record> KeyValue(Table<O> child, ForeignKey<O, KeyValueRecord> key) {
        super(child, key, KEY_VALUE);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.KEY_VALUE_PRIMARY);
    }

    @Override
    public UniqueKey<KeyValueRecord> getPrimaryKey() {
        return Keys.KEY_KEY_VALUE_PRIMARY;
    }

    @Override
    public List<UniqueKey<KeyValueRecord>> getKeys() {
        return Arrays.<UniqueKey<KeyValueRecord>>asList(Keys.KEY_KEY_VALUE_PRIMARY);
    }

    @Override
    public KeyValue as(String alias) {
        return new KeyValue(DSL.name(alias), this);
    }

    @Override
    public KeyValue as(Name alias) {
        return new KeyValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyValue rename(String name) {
        return new KeyValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KeyValue rename(Name name) {
        return new KeyValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
