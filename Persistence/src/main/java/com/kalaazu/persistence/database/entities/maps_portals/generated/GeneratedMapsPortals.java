package com.kalaazu.persistence.database.entities.maps_portals.generated;

import com.kalaazu.math.Vector2;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.Maps;
import com.kalaazu.persistence.database.entities.MapsPortals;
import com.kalaazu.persistence.database.mappers.Vector2Mapper;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.ByteField;
import com.speedment.runtime.field.ByteForeignKeyField;
import com.speedment.runtime.field.ReferenceField;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.integer.PrimitiveIntegerZeroOneToBooleanMapper;

/**
 * The generated base for the {@link
 * MapsPortals}-interface
 * representing entities of the {@code maps_portals}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMapsPortals {

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#id()} method.
     */
    ByteField<MapsPortals, Byte> ID = ByteField.create(
            Identifier.ID,
            MapsPortals::id,
            MapsPortals::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#levelsId()} method.
     */
    ByteField<MapsPortals, Byte> LEVELS_ID = ByteField.create(
            Identifier.LEVELS_ID,
            MapsPortals::levelsId,
            MapsPortals::levelsId,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#mapsId()} method.
     */
    ByteForeignKeyField<MapsPortals, Byte, Maps> MAPS_ID = ByteForeignKeyField.create(
            Identifier.MAPS_ID,
            MapsPortals::mapsId,
            MapsPortals::mapsId,
            Maps.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#position()} method.
     */
    ReferenceField<MapsPortals, Long, Vector2> POSITION = ReferenceField.create(
            Identifier.POSITION,
            MapsPortals::position,
            MapsPortals::position,
            new Vector2Mapper(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#targetMapsId()} method.
     */
    ByteForeignKeyField<MapsPortals, Byte, Maps> TARGET_MAPS_ID = ByteForeignKeyField.create(
            Identifier.TARGET_MAPS_ID,
            MapsPortals::targetMapsId,
            MapsPortals::targetMapsId,
            Maps.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#targetPosition()} method.
     */
    ReferenceField<MapsPortals, Long, Vector2> TARGET_POSITION = ReferenceField.create(
            Identifier.TARGET_POSITION,
            MapsPortals::targetPosition,
            MapsPortals::targetPosition,
            new Vector2Mapper(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#isVisible()} method.
     */
    BooleanField<MapsPortals, Integer> IS_VISIBLE = BooleanField.create(
            Identifier.IS_VISIBLE,
            MapsPortals::isVisible,
            MapsPortals::isVisible,
            new PrimitiveIntegerZeroOneToBooleanMapper(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#isWorking()} method.
     */
    BooleanField<MapsPortals, Integer> IS_WORKING = BooleanField.create(
            Identifier.IS_WORKING,
            MapsPortals::isWorking,
            MapsPortals::isWorking,
            new PrimitiveIntegerZeroOneToBooleanMapper(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#gfx()} method.
     */
    ByteField<MapsPortals, Byte> GFX = ByteField.create(
            Identifier.GFX,
            MapsPortals::gfx,
            MapsPortals::gfx,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this MapsPortals. The id field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.id.
     *
     * @return the id of this MapsPortals
     */
    Byte id();

    /**
     * Returns the levelsId of this MapsPortals. The levelsId field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.levels_id.
     *
     * @return the levelsId of this MapsPortals
     */
    byte levelsId();

    /**
     * Returns the mapsId of this MapsPortals. The mapsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.maps_id.
     *
     * @return the mapsId of this MapsPortals
     */
    byte mapsId();

    /**
     * Returns the position of this MapsPortals. The position field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.position.
     *
     * @return the position of this MapsPortals
     */
    Vector2 position();

    /**
     * Returns the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     *
     * @return the targetMapsId of this MapsPortals
     */
    byte targetMapsId();

    /**
     * Returns the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     *
     * @return the targetPosition of this MapsPortals
     */
    Vector2 targetPosition();

    /**
     * Returns the isVisible of this MapsPortals. The isVisible field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_visible.
     *
     * @return the isVisible of this MapsPortals
     */
    boolean isVisible();

    /**
     * Returns the isWorking of this MapsPortals. The isWorking field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_working.
     *
     * @return the isWorking of this MapsPortals
     */
    boolean isWorking();

    /**
     * Returns the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     *
     * @return the gfx of this MapsPortals
     */
    byte gfx();

    /**
     * Sets the id of this MapsPortals. The id field corresponds to the database
     * column kalaazu.kalaazu.maps_portals.id.
     *
     * @param id to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals id(Byte id);

    /**
     * Sets the levelsId of this MapsPortals. The levelsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.levels_id.
     *
     * @param levelsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals levelsId(byte levelsId);

    /**
     * Sets the mapsId of this MapsPortals. The mapsId field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.maps_id.
     *
     * @param mapsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals mapsId(byte mapsId);

    /**
     * Sets the position of this MapsPortals. The position field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.position.
     *
     * @param position to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals position(Vector2 position);

    /**
     * Sets the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     *
     * @param targetMapsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals targetMapsId(byte targetMapsId);

    /**
     * Sets the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     *
     * @param targetPosition to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals targetPosition(Vector2 targetPosition);

    /**
     * Sets the isVisible of this MapsPortals. The isVisible field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_visible.
     *
     * @param isVisible to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals isVisible(boolean isVisible);

    /**
     * Sets the isWorking of this MapsPortals. The isWorking field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_working.
     *
     * @param isWorking to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals isWorking(boolean isWorking);

    /**
     * Sets the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     *
     * @param gfx to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals gfx(byte gfx);

    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Maps findMapsId(Manager<Maps> foreignManager);

    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Maps findTargetMapsId(Manager<Maps> foreignManager);

    enum Identifier implements ColumnIdentifier<MapsPortals> {

        ID("id"),
        LEVELS_ID("levels_id"),
        MAPS_ID("maps_id"),
        POSITION("position"),
        TARGET_MAPS_ID("target_maps_id"),
        TARGET_POSITION("target_position"),
        IS_VISIBLE("is_visible"),
        IS_WORKING("is_working"),
        GFX("gfx");

        private final String columnName;

        private final TableIdentifier<MapsPortals> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "maps_portals";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<MapsPortals> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}