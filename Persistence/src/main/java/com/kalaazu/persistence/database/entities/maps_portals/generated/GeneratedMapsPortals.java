package com.kalaazu.persistence.database.entities.maps_portals.generated;

import com.kalaazu.persistence.database.entities.Maps;
import com.kalaazu.persistence.database.entities.MapsPortals;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.kalaazu.persistence.database.entities.Manager;
import com.speedment.runtime.field.ByteField;
import com.speedment.runtime.field.ByteForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.kalaazu.persistence.database.entities.maps_portals.MapsPortals}-interface
 * representing entities of the {@code maps_portals}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMapsPortals {

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getId()} method.
     */
    ByteField<MapsPortals, Byte>                 ID              = ByteField.create(
            Identifier.ID,
            MapsPortals::getId,
            MapsPortals::setId,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getLevelsId()} method.
     */
    ByteField<MapsPortals, Byte>                 LEVELS_ID       = ByteField.create(
            Identifier.LEVELS_ID,
            MapsPortals::getLevelsId,
            MapsPortals::setLevelsId,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getMapsId()} method.
     */
    ByteForeignKeyField<MapsPortals, Byte, Maps> MAPS_ID         = ByteForeignKeyField.create(
            Identifier.MAPS_ID,
            MapsPortals::getMapsId,
            MapsPortals::setMapsId,
            Maps.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getPosition()} method.
     */
    LongField<MapsPortals, Long>                 POSITION        = LongField.create(
            Identifier.POSITION,
            MapsPortals::getPosition,
            MapsPortals::setPosition,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getTargetMapsId()} method.
     */
    ByteForeignKeyField<MapsPortals, Byte, Maps> TARGET_MAPS_ID  = ByteForeignKeyField.create(
            Identifier.TARGET_MAPS_ID,
            MapsPortals::getTargetMapsId,
            MapsPortals::setTargetMapsId,
            Maps.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getTargetPosition()} method.
     */
    LongField<MapsPortals, Long>                 TARGET_POSITION = LongField.create(
            Identifier.TARGET_POSITION,
            MapsPortals::getTargetPosition,
            MapsPortals::setTargetPosition,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getIsVisible()} method.
     */
    IntField<MapsPortals, Integer>               IS_VISIBLE      = IntField.create(
            Identifier.IS_VISIBLE,
            MapsPortals::getIsVisible,
            MapsPortals::setIsVisible,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getIsWorking()} method.
     */
    IntField<MapsPortals, Integer>               IS_WORKING      = IntField.create(
            Identifier.IS_WORKING,
            MapsPortals::getIsWorking,
            MapsPortals::setIsWorking,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getGfx()} method.
     */
    ByteField<MapsPortals, Byte>                 GFX             = ByteField.create(
            Identifier.GFX,
            MapsPortals::getGfx,
            MapsPortals::setGfx,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this MapsPortals. The id field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.id.
     *
     * @return the id of this MapsPortals
     */
    Byte getId();

    /**
     * Returns the levelsId of this MapsPortals. The levelsId field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.levels_id.
     *
     * @return the levelsId of this MapsPortals
     */
    byte getLevelsId();

    /**
     * Returns the mapsId of this MapsPortals. The mapsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.maps_id.
     *
     * @return the mapsId of this MapsPortals
     */
    byte getMapsId();

    /**
     * Returns the position of this MapsPortals. The position field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.position.
     *
     * @return the position of this MapsPortals
     */
    long getPosition();

    /**
     * Returns the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     *
     * @return the targetMapsId of this MapsPortals
     */
    byte getTargetMapsId();

    /**
     * Returns the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     *
     * @return the targetPosition of this MapsPortals
     */
    long getTargetPosition();

    /**
     * Returns the isVisible of this MapsPortals. The isVisible field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_visible.
     *
     * @return the isVisible of this MapsPortals
     */
    int getIsVisible();

    /**
     * Returns the isWorking of this MapsPortals. The isWorking field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_working.
     *
     * @return the isWorking of this MapsPortals
     */
    int getIsWorking();

    /**
     * Returns the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     *
     * @return the gfx of this MapsPortals
     */
    byte getGfx();

    /**
     * Sets the id of this MapsPortals. The id field corresponds to the database
     * column kalaazu.kalaazu.maps_portals.id.
     *
     * @param id to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setId(byte id);

    /**
     * Sets the levelsId of this MapsPortals. The levelsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.levels_id.
     *
     * @param levelsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setLevelsId(byte levelsId);

    /**
     * Sets the mapsId of this MapsPortals. The mapsId field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.maps_id.
     *
     * @param mapsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setMapsId(byte mapsId);

    /**
     * Sets the position of this MapsPortals. The position field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.position.
     *
     * @param position to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setPosition(long position);

    /**
     * Sets the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     *
     * @param targetMapsId to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setTargetMapsId(byte targetMapsId);

    /**
     * Sets the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     *
     * @param targetPosition to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setTargetPosition(long targetPosition);

    /**
     * Sets the isVisible of this MapsPortals. The isVisible field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_visible.
     *
     * @param isVisible to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setIsVisible(int isVisible);

    /**
     * Sets the isWorking of this MapsPortals. The isWorking field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_working.
     *
     * @param isWorking to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setIsWorking(int isWorking);

    /**
     * Sets the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     *
     * @param gfx to set of this MapsPortals
     *
     * @return this MapsPortals instance
     */
    MapsPortals setGfx(byte gfx);

    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Maps findMapsId(Manager<Maps> foreignManager);

    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Maps findTargetMapsId(Manager<Maps> foreignManager);

    enum Identifier implements ColumnIdentifier<MapsPortals> {

        ID("id"),
        LEVELS_ID("levels_id"),
        MAPS_ID("maps_id"),
        POSITION("position"),
        TARGET_MAPS_ID("target_maps_id"),
        TARGET_POSITION("target_position"),
        IS_VISIBLE("is_visible"),
        IS_WORKING("is_working"),
        GFX("gfx");

        private final String                       columnId;

        private final TableIdentifier<MapsPortals> tableIdentifier;

        Identifier(String columnId) {
            this.columnId = columnId;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsId(),
                    getSchemaId(),
                    getTableId()
            );
        }

        @Override
        public String getDbmsId() {
            return "kalaazu";
        }

        @Override
        public String getSchemaId() {
            return "kalaazu";
        }

        @Override
        public String getTableId() {
            return "maps_portals";
        }

        @Override
        public String getColumnId() {
            return this.columnId;
        }

        @Override
        public TableIdentifier<MapsPortals> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}