/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.AccountsShipsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Ships bough by an account.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsShips extends TableImpl<AccountsShipsRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_ships</code>
     */
    public static final AccountsShips ACCOUNTS_SHIPS = new AccountsShips();
    private static final long serialVersionUID = -839897019;
    /**
     * The column <code>kalaazu.accounts_ships.id</code>. Primary Key.
     */
    public final TableField<AccountsShipsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_ships.accounts_id</code>.
     */
    public final TableField<AccountsShipsRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_ships.ships_id</code>.
     */
    public final TableField<AccountsShipsRecord, Byte> SHIPS_ID = createField(
            DSL.name("ships_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_ships.maps_id</code>.
     */
    public final TableField<AccountsShipsRecord, Byte> MAPS_ID = createField(
            DSL.name("maps_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_ships.position</code>. Position on map.
     */
    public final TableField<AccountsShipsRecord, Long> POSITION = createField(
            DSL.name("position"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "0",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Position on map."
    );
    /**
     * The column <code>kalaazu.accounts_ships.health</code>. Health points.
     */
    public final TableField<AccountsShipsRecord, Integer> HEALTH = createField(
            DSL.name("health"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.INTEGER
                                             )),
            this,
            "Health points."
    );
    /**
     * The column <code>kalaazu.accounts_ships.nanohull</code>. Nanohull points.
     */
    public final TableField<AccountsShipsRecord, Integer> NANOHULL = createField(
            DSL.name("nanohull"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.INTEGER
                                             )),
            this,
            "Nanohull points."
    );
    /**
     * The column <code>kalaazu.accounts_ships.gfx</code>. Ship graphic (for WIZ-X).
     */
    public final TableField<AccountsShipsRecord, Byte> GFX = createField(
            DSL.name("gfx"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Ship graphic (for WIZ-X)."
    );

    /**
     * Create a <code>kalaazu.accounts_ships</code> table reference
     */
    public AccountsShips() {
        this(DSL.name("accounts_ships"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_ships</code> table reference
     */
    public AccountsShips(String alias) {
        this(DSL.name(alias), ACCOUNTS_SHIPS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_ships</code> table reference
     */
    public AccountsShips(Name alias) {
        this(alias, ACCOUNTS_SHIPS);
    }

    private AccountsShips(Name alias, Table<AccountsShipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsShips(Name alias, Table<AccountsShipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Ships bough by an account."));
    }

    public <O extends Record> AccountsShips(Table<O> child, ForeignKey<O, AccountsShipsRecord> key) {
        super(child, key, ACCOUNTS_SHIPS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsShipsRecord> getRecordType() {
        return AccountsShipsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_SHIPS_ACCOUNTS_SHIPS_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_SHIPS_ACCOUNTS_SHIPS_MAPS_ID_IDX,
                Indexes.ACCOUNTS_SHIPS_ACCOUNTS_SHIPS_SHIPS_ID_IDX,
                Indexes.ACCOUNTS_SHIPS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsShipsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_SHIPS;
    }

    @Override
    public UniqueKey<AccountsShipsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_SHIPS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsShipsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsShipsRecord>>asList(Keys.KEY_ACCOUNTS_SHIPS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AccountsShipsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsShipsRecord, ?>>asList(
                Keys.ACCOUNTS_SHIPS_ACCOUNTS,
                Keys.ACCOUNTS_SHIPS_SHIPS,
                Keys.ACCOUNTS_SHIPS_MAPS
        );
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_SHIPS_ACCOUNTS);
    }

    public Ships ships() {
        return new Ships(this, Keys.ACCOUNTS_SHIPS_SHIPS);
    }

    public Maps maps() {
        return new Maps(this, Keys.ACCOUNTS_SHIPS_MAPS);
    }

    @Override
    public AccountsShips as(String alias) {
        return new AccountsShips(DSL.name(alias), this);
    }

    @Override
    public AccountsShips as(Name alias) {
        return new AccountsShips(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsShips rename(String name) {
        return new AccountsShips(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsShips rename(Name name) {
        return new AccountsShips(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Byte, Byte, Long, Integer, Integer, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
