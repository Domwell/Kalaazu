/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.LevelsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Contains server's levels.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Levels extends TableImpl<LevelsRecord> {

    private static final long serialVersionUID = -2118123113;

    /**
     * The reference instance of <code>kalaazu.levels</code>
     */
    public static final Levels LEVELS = new Levels();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LevelsRecord> getRecordType() {
        return LevelsRecord.class;
    }

    /**
     * The column <code>kalaazu.levels.id</code>. Primary Key.
     */
    public final TableField<LevelsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.levels.account</code>. Experience needed for an account to reach this level.
     */
    public final TableField<LevelsRecord, Long> ACCOUNT = createField(DSL.name("account"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "Experience needed for an account to reach this level.");

    /**
     * The column <code>kalaazu.levels.drone</code>. Experience needed for a drone to reach this level
     */
    public final TableField<LevelsRecord, Short> DRONE = createField(DSL.name("drone"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("-1", org.jooq.impl.SQLDataType.SMALLINT)), this, "Experience needed for a drone to reach this level");

    /**
     * The column <code>kalaazu.levels.pet</code>. Experience needed for a PET to reach this level.
     */
    public final TableField<LevelsRecord, Integer> PET = createField(DSL.name("pet"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("-1", org.jooq.impl.SQLDataType.INTEGER)), this, "Experience needed for a PET to reach this level.");

    /**
     * The column <code>kalaazu.levels.damage</code>. Damage bonus applied for an item at this level.
     */
    public final TableField<LevelsRecord, Double> DAMAGE = createField(DSL.name("damage"), org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.FLOAT)), this, "Damage bonus applied for an item at this level.");

    /**
     * The column <code>kalaazu.levels.shield</code>. Shield bonus applied to an item at this level.
     */
    public final TableField<LevelsRecord, Double> SHIELD = createField(DSL.name("shield"), org.jooq.impl.SQLDataType.FLOAT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.FLOAT)), this, "Shield bonus applied to an item at this level.");

    /**
     * Create a <code>kalaazu.levels</code> table reference
     */
    public Levels() {
        this(DSL.name("levels"), null);
    }

    /**
     * Create an aliased <code>kalaazu.levels</code> table reference
     */
    public Levels(String alias) {
        this(DSL.name(alias), LEVELS);
    }

    /**
     * Create an aliased <code>kalaazu.levels</code> table reference
     */
    public Levels(Name alias) {
        this(alias, LEVELS);
    }

    private Levels(Name alias, Table<LevelsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Levels(Name alias, Table<LevelsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Contains server's levels."));
    }

    public <O extends Record> Levels(Table<O> child, ForeignKey<O, LevelsRecord> key) {
        super(child, key, LEVELS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.LEVELS_LEVELS_ACCOUNT_IDX, Indexes.LEVELS_PRIMARY);
    }

    @Override
    public Identity<LevelsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_LEVELS;
    }

    @Override
    public UniqueKey<LevelsRecord> getPrimaryKey() {
        return Keys.KEY_LEVELS_PRIMARY;
    }

    @Override
    public List<UniqueKey<LevelsRecord>> getKeys() {
        return Arrays.<UniqueKey<LevelsRecord>>asList(Keys.KEY_LEVELS_PRIMARY, Keys.KEY_LEVELS_LEVELS_ACCOUNT_IDX);
    }

    @Override
    public Levels as(String alias) {
        return new Levels(DSL.name(alias), this);
    }

    @Override
    public Levels as(Name alias) {
        return new Levels(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Levels rename(String name) {
        return new Levels(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Levels rename(Name name) {
        return new Levels(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Byte, Long, Short, Integer, Double, Double> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
