/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ServerLogsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Server fired events.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServerLogs extends TableImpl<ServerLogsRecord> {

    private static final long serialVersionUID = 1577967812;

    /**
     * The reference instance of <code>kalaazu.server_logs</code>
     */
    public static final ServerLogs SERVER_LOGS = new ServerLogs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServerLogsRecord> getRecordType() {
        return ServerLogsRecord.class;
    }

    /**
     * The column <code>kalaazu.server_logs.id</code>. Primary Key.
     */
    public final TableField<ServerLogsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.server_logs.date</code>.
     */
    public final TableField<ServerLogsRecord, Timestamp> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>kalaazu.server_logs.level</code>. Log level (emergency, alert, critical, error, warning, notice, info, debug)
     */
    public final TableField<ServerLogsRecord, String> LEVEL = createField(DSL.name("level"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("debug", org.jooq.impl.SQLDataType.VARCHAR)), this, "Log level (emergency, alert, critical, error, warning, notice, info, debug)");

    /**
     * The column <code>kalaazu.server_logs.type</code>.
     */
    public final TableField<ServerLogsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.server_logs.context</code>.
     */
    public final TableField<ServerLogsRecord, String> CONTEXT = createField(DSL.name("context"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>kalaazu.server_logs</code> table reference
     */
    public ServerLogs() {
        this(DSL.name("server_logs"), null);
    }

    /**
     * Create an aliased <code>kalaazu.server_logs</code> table reference
     */
    public ServerLogs(String alias) {
        this(DSL.name(alias), SERVER_LOGS);
    }

    /**
     * Create an aliased <code>kalaazu.server_logs</code> table reference
     */
    public ServerLogs(Name alias) {
        this(alias, SERVER_LOGS);
    }

    private ServerLogs(Name alias, Table<ServerLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServerLogs(Name alias, Table<ServerLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Server fired events."));
    }

    public <O extends Record> ServerLogs(Table<O> child, ForeignKey<O, ServerLogsRecord> key) {
        super(child, key, SERVER_LOGS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SERVER_LOGS_PRIMARY, Indexes.SERVER_LOGS_SERVER_LOGS_LEVEL_IDX);
    }

    @Override
    public Identity<ServerLogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SERVER_LOGS;
    }

    @Override
    public UniqueKey<ServerLogsRecord> getPrimaryKey() {
        return Keys.KEY_SERVER_LOGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ServerLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<ServerLogsRecord>>asList(Keys.KEY_SERVER_LOGS_PRIMARY);
    }

    @Override
    public ServerLogs as(String alias) {
        return new ServerLogs(DSL.name(alias), this);
    }

    @Override
    public ServerLogs as(Name alias) {
        return new ServerLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerLogs rename(String name) {
        return new ServerLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServerLogs rename(Name name) {
        return new ServerLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Timestamp, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
