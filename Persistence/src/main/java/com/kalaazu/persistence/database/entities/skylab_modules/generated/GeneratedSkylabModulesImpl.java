package com.kalaazu.persistence.database.entities.skylab_modules.generated;

import com.kalaazu.persistence.database.entities.SkylabModules;
import com.speedment.common.annotation.GeneratedCode;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * SkylabModules}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSkylabModulesImpl implements SkylabModules {

    private byte id;

    private String name;

    private byte productionFactor;

    private short productionBase;

    private short storageFactor;

    private short storageBase;

    private byte upgradeFactor;

    private short upgradeBase;

    private byte energyFactor;

    private byte energyBase;

    protected GeneratedSkylabModulesImpl() {

    }

    @Override
    public Byte getId() {
        return id;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public byte getProductionFactor() {
        return productionFactor;
    }

    @Override
    public short getProductionBase() {
        return productionBase;
    }

    @Override
    public short getStorageFactor() {
        return storageFactor;
    }

    @Override
    public short getStorageBase() {
        return storageBase;
    }

    @Override
    public byte getUpgradeFactor() {
        return upgradeFactor;
    }

    @Override
    public short getUpgradeBase() {
        return upgradeBase;
    }

    @Override
    public byte getEnergyFactor() {
        return energyFactor;
    }

    @Override
    public byte getEnergyBase() {
        return energyBase;
    }

    @Override
    public SkylabModules setId(byte id) {
        this.id = id;
        return this;
    }

    @Override
    public SkylabModules setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public SkylabModules setProductionFactor(byte productionFactor) {
        this.productionFactor = productionFactor;
        return this;
    }

    @Override
    public SkylabModules setProductionBase(short productionBase) {
        this.productionBase = productionBase;
        return this;
    }

    @Override
    public SkylabModules setStorageFactor(short storageFactor) {
        this.storageFactor = storageFactor;
        return this;
    }

    @Override
    public SkylabModules setStorageBase(short storageBase) {
        this.storageBase = storageBase;
        return this;
    }

    @Override
    public SkylabModules setUpgradeFactor(byte upgradeFactor) {
        this.upgradeFactor = upgradeFactor;
        return this;
    }

    @Override
    public SkylabModules setUpgradeBase(short upgradeBase) {
        this.upgradeBase = upgradeBase;
        return this;
    }

    @Override
    public SkylabModules setEnergyFactor(byte energyFactor) {
        this.energyFactor = energyFactor;
        return this;
    }

    @Override
    public SkylabModules setEnergyBase(byte energyBase) {
        this.energyBase = energyBase;
        return this;
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("name = " + Objects.toString(getName()));
        sj.add("productionFactor = " + Objects.toString(getProductionFactor()));
        sj.add("productionBase = " + Objects.toString(getProductionBase()));
        sj.add("storageFactor = " + Objects.toString(getStorageFactor()));
        sj.add("storageBase = " + Objects.toString(getStorageBase()));
        sj.add("upgradeFactor = " + Objects.toString(getUpgradeFactor()));
        sj.add("upgradeBase = " + Objects.toString(getUpgradeBase()));
        sj.add("energyFactor = " + Objects.toString(getEnergyFactor()));
        sj.add("energyBase = " + Objects.toString(getEnergyBase()));
        return "SkylabModulesImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof SkylabModules)) {
            return false;
        }
        final SkylabModules thatSkylabModules = (SkylabModules) that;
        if (this.getId() != thatSkylabModules.getId()) {
            return false;
        }
        if (!Objects.equals(this.getName(), thatSkylabModules.getName())) {
            return false;
        }
        if (this.getProductionFactor() != thatSkylabModules.getProductionFactor()) {
            return false;
        }
        if (this.getProductionBase() != thatSkylabModules.getProductionBase()) {
            return false;
        }
        if (this.getStorageFactor() != thatSkylabModules.getStorageFactor()) {
            return false;
        }
        if (this.getStorageBase() != thatSkylabModules.getStorageBase()) {
            return false;
        }
        if (this.getUpgradeFactor() != thatSkylabModules.getUpgradeFactor()) {
            return false;
        }
        if (this.getUpgradeBase() != thatSkylabModules.getUpgradeBase()) {
            return false;
        }
        if (this.getEnergyFactor() != thatSkylabModules.getEnergyFactor()) {
            return false;
        }
        if (this.getEnergyBase() != thatSkylabModules.getEnergyBase()) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Byte.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Byte.hashCode(getProductionFactor());
        hash = 31 * hash + Short.hashCode(getProductionBase());
        hash = 31 * hash + Short.hashCode(getStorageFactor());
        hash = 31 * hash + Short.hashCode(getStorageBase());
        hash = 31 * hash + Byte.hashCode(getUpgradeFactor());
        hash = 31 * hash + Short.hashCode(getUpgradeBase());
        hash = 31 * hash + Byte.hashCode(getEnergyFactor());
        hash = 31 * hash + Byte.hashCode(getEnergyBase());
        return hash;
    }
}