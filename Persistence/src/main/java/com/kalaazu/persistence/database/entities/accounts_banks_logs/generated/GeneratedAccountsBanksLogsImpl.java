package com.kalaazu.persistence.database.entities.accounts_banks_logs.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsBanks;
import com.kalaazu.persistence.database.entities.AccountsBanksLogs;
import com.kalaazu.persistence.database.mappers.BankLogType;
import com.kalaazu.persistence.database.mappers.Currency;
import com.speedment.common.annotation.GeneratedCode;
import com.kalaazu.persistence.database.entities.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * AccountsBanksLogs}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsBanksLogsImpl implements AccountsBanksLogs {

    private int         id;

    private int         fromAccountsId;

    private int         toAccountsId;

    private Timestamp   date;

    private BankLogType type;

    private int         amount;

    private Currency    currency;

    private Integer     accountsBanksId;

    protected GeneratedAccountsBanksLogsImpl() {

    }

    @Override
    public Integer getId() {
        return id;
    }

    @Override
    public int getFromAccountsId() {
        return fromAccountsId;
    }

    @Override
    public int getToAccountsId() {
        return toAccountsId;
    }

    @Override
    public Timestamp getDate() {
        return date;
    }

    @Override
    public BankLogType getType() {
        return type;
    }

    @Override
    public int getAmount() {
        return amount;
    }

    @Override
    public Currency getCurrency() {
        return currency;
    }

    @Override
    public OptionalInt getAccountsBanksId() {
        return OptionalUtil.ofNullable(accountsBanksId);
    }

    @Override
    public AccountsBanksLogs setId(int id) {
        this.id = id;
        return this;
    }

    @Override
    public AccountsBanksLogs setFromAccountsId(int fromAccountsId) {
        this.fromAccountsId = fromAccountsId;
        return this;
    }

    @Override
    public AccountsBanksLogs setToAccountsId(int toAccountsId) {
        this.toAccountsId = toAccountsId;
        return this;
    }

    @Override
    public AccountsBanksLogs setDate(Timestamp date) {
        this.date = date;
        return this;
    }

    @Override
    public AccountsBanksLogs setType(BankLogType type) {
        this.type = type;
        return this;
    }

    @Override
    public AccountsBanksLogs setAmount(int amount) {
        this.amount = amount;
        return this;
    }

    @Override
    public AccountsBanksLogs setCurrency(Currency currency) {
        this.currency = currency;
        return this;
    }

    @Override
    public AccountsBanksLogs setAccountsBanksId(Integer accountsBanksId) {
        this.accountsBanksId = accountsBanksId;
        return this;
    }

    @Override
    public Accounts findFromAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(getFromAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Accounts findToAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(getToAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<AccountsBanks> findAccountsBanksId(Manager<AccountsBanks> foreignManager) {
        if (getAccountsBanksId().isPresent()) {
            return foreignManager.stream()
                                 .filter(AccountsBanks.ID.equal(getAccountsBanksId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("fromAccountsId = " + Objects.toString(getFromAccountsId()));
        sj.add("toAccountsId = " + Objects.toString(getToAccountsId()));
        sj.add("date = " + Objects.toString(getDate()));
        sj.add("type = " + Objects.toString(getType()));
        sj.add("amount = " + Objects.toString(getAmount()));
        sj.add("currency = " + Objects.toString(getCurrency()));
        sj.add("accountsBanksId = " + Objects.toString(OptionalUtil.unwrap(getAccountsBanksId())));
        return "AccountsBanksLogsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof AccountsBanksLogs)) {
            return false;
        }
        final AccountsBanksLogs thatAccountsBanksLogs = (AccountsBanksLogs) that;
        if (this.getId() != thatAccountsBanksLogs.getId()) {
            return false;
        }
        if (this.getFromAccountsId() != thatAccountsBanksLogs.getFromAccountsId()) {
            return false;
        }
        if (this.getToAccountsId() != thatAccountsBanksLogs.getToAccountsId()) {
            return false;
        }
        if (!Objects.equals(this.getDate(), thatAccountsBanksLogs.getDate())) {
            return false;
        }
        if (!Objects.equals(this.getType(), thatAccountsBanksLogs.getType())) {
            return false;
        }
        if (this.getAmount() != thatAccountsBanksLogs.getAmount()) {
            return false;
        }
        if (!Objects.equals(this.getCurrency(), thatAccountsBanksLogs.getCurrency())) {
            return false;
        }
        if (!Objects.equals(this.getAccountsBanksId(), thatAccountsBanksLogs.getAccountsBanksId())) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getFromAccountsId());
        hash = 31 * hash + Integer.hashCode(getToAccountsId());
        hash = 31 * hash + Objects.hashCode(getDate());
        hash = 31 * hash + Objects.hashCode(getType());
        hash = 31 * hash + Integer.hashCode(getAmount());
        hash = 31 * hash + Objects.hashCode(getCurrency());
        hash = 31 * hash + Objects.hashCode(getAccountsBanksId());
        return hash;
    }
}