package com.kalaazu.persistence.database.entities.accounts_banks_logs.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsBanks;
import com.kalaazu.persistence.database.entities.AccountsBanksLogs;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.mappers.BankLogType;
import com.kalaazu.persistence.database.mappers.Currency;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * AccountsBanksLogs}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedAccountsBanksLogsImpl implements AccountsBanksLogs {

    private Integer id;

    private int fromAccountsId;

    private int toAccountsId;

    private Timestamp date;

    private BankLogType type;

    private int amount;

    private Currency currency;

    private Integer accountsBanksId;

    protected GeneratedAccountsBanksLogsImpl() {

    }

    @Override
    public OptionalInt accountsBanksId() {
        return OptionalUtil.ofNullable(accountsBanksId);
    }


    @Override
    public Accounts findFromAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(fromAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Accounts findToAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(toAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<AccountsBanks> findAccountsBanksId(Manager<AccountsBanks> foreignManager) {
        if (accountsBanksId().isPresent()) {
            return foreignManager.stream()
                                 .filter(AccountsBanks.ID.equal(accountsBanksId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof AccountsBanksLogs)) {
            return false;
        }
        final AccountsBanksLogs thatAccountsBanksLogs = (AccountsBanksLogs) that;
        if (this.id() != thatAccountsBanksLogs.id()) {
            return false;
        }
        if (this.fromAccountsId() != thatAccountsBanksLogs.fromAccountsId()) {
            return false;
        }
        if (this.toAccountsId() != thatAccountsBanksLogs.toAccountsId()) {
            return false;
        }
        if (!Objects.equals(this.date(), thatAccountsBanksLogs.date())) {
            return false;
        }
        if (!Objects.equals(this.type(), thatAccountsBanksLogs.type())) {
            return false;
        }
        if (this.amount() != thatAccountsBanksLogs.amount()) {
            return false;
        }
        if (!Objects.equals(this.currency(), thatAccountsBanksLogs.currency())) {
            return false;
        }
        if (!Objects.equals(this.accountsBanksId(), thatAccountsBanksLogs.accountsBanksId())) {
            return false;
        }
        return true;
    }
}