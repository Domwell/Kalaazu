/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.VouchersRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Voucher codes.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Vouchers extends TableImpl<VouchersRecord> {

    /**
     * The reference instance of <code>kalaazu.vouchers</code>
     */
    public static final Vouchers VOUCHERS = new Vouchers();
    private static final long serialVersionUID = -177387289;
    /**
     * The column <code>kalaazu.vouchers.id</code>. Primary Key.
     */
    public final TableField<VouchersRecord, Short> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.SMALLINT.nullable(false)
                                              .identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.vouchers.code</code>.
     */
    public final TableField<VouchersRecord, String> CODE = createField(
            DSL.name("code"),
            org.jooq.impl.SQLDataType.VARCHAR(32)
                                     .nullable(false)
                                     .defaultValue(org.jooq.impl.DSL.field(
                                             "",
                                             org.jooq.impl.SQLDataType.VARCHAR
                                     )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.vouchers.limit</code>.
     */
    public final TableField<VouchersRecord, Byte> LIMIT = createField(
            DSL.name("limit"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );

    /**
     * Create a <code>kalaazu.vouchers</code> table reference
     */
    public Vouchers() {
        this(DSL.name("vouchers"), null);
    }

    /**
     * Create an aliased <code>kalaazu.vouchers</code> table reference
     */
    public Vouchers(String alias) {
        this(DSL.name(alias), VOUCHERS);
    }

    /**
     * Create an aliased <code>kalaazu.vouchers</code> table reference
     */
    public Vouchers(Name alias) {
        this(alias, VOUCHERS);
    }

    private Vouchers(Name alias, Table<VouchersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Vouchers(Name alias, Table<VouchersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Voucher codes."));
    }

    public <O extends Record> Vouchers(Table<O> child, ForeignKey<O, VouchersRecord> key) {
        super(child, key, VOUCHERS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VouchersRecord> getRecordType() {
        return VouchersRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.VOUCHERS_PRIMARY, Indexes.VOUCHERS_VOUCHERS_CODE_IDX);
    }

    @Override
    public Identity<VouchersRecord, Short> getIdentity() {
        return Keys.IDENTITY_VOUCHERS;
    }

    @Override
    public UniqueKey<VouchersRecord> getPrimaryKey() {
        return Keys.KEY_VOUCHERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<VouchersRecord>> getKeys() {
        return Arrays.<UniqueKey<VouchersRecord>>asList(Keys.KEY_VOUCHERS_PRIMARY, Keys.KEY_VOUCHERS_VOUCHERS_CODE_IDX);
    }

    @Override
    public Vouchers as(String alias) {
        return new Vouchers(DSL.name(alias), this);
    }

    @Override
    public Vouchers as(Name alias) {
        return new Vouchers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Vouchers rename(String name) {
        return new Vouchers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Vouchers rename(Name name) {
        return new Vouchers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
