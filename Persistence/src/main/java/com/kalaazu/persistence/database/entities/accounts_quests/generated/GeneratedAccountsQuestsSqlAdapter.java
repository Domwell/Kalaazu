package com.kalaazu.persistence.database.entities.accounts_quests.generated;

import com.kalaazu.persistence.database.entities.AccountsQuests;
import com.kalaazu.persistence.database.entities.accounts_quests.AccountsQuestsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * AccountsQuests}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsQuestsSqlAdapter {

    private final TableIdentifier<AccountsQuests> tableIdentifier;

    private SqlTypeMapperHelper<Integer, Boolean> isCompletedHelper;

    protected GeneratedAccountsQuestsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_quests");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected AccountsQuests apply(ResultSet resultSet) throws SpeedmentException {
        final AccountsQuests entity = createEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setQuestsId(resultSet.getShort(2));
            entity.setAccountsId(resultSet.getInt(3));
            entity.setIsCompleted(isCompletedHelper.apply(resultSet.getInt(4)));
            entity.setDate(resultSet.getTimestamp(5));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected AccountsQuestsImpl createEntity() {
        return new AccountsQuestsImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        isCompletedHelper = SqlTypeMapperHelper.create(project, AccountsQuests.IS_COMPLETED, AccountsQuests.class);
    }
}