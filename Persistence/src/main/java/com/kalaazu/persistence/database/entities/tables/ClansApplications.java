/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ClansApplicationsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Account applications to a clan.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClansApplications extends TableImpl<ClansApplicationsRecord> {

    private static final long serialVersionUID = 789617164;

    /**
     * The reference instance of <code>kalaazu.clans_applications</code>
     */
    public static final ClansApplications CLANS_APPLICATIONS = new ClansApplications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClansApplicationsRecord> getRecordType() {
        return ClansApplicationsRecord.class;
    }

    /**
     * The column <code>kalaazu.clans_applications.id</code>. Primary Key.
     */
    public final TableField<ClansApplicationsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.clans_applications.clans_id</code>. Clan ID.
     */
    public final TableField<ClansApplicationsRecord, Integer> CLANS_ID = createField(DSL.name("clans_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Clan ID.");

    /**
     * The column <code>kalaazu.clans_applications.accounts_id</code>. Account ID.
     */
    public final TableField<ClansApplicationsRecord, Integer> ACCOUNTS_ID = createField(DSL.name("accounts_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Account ID.");

    /**
     * The column <code>kalaazu.clans_applications.date</code>.
     */
    public final TableField<ClansApplicationsRecord, Timestamp> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>kalaazu.clans_applications.text</code>.
     */
    public final TableField<ClansApplicationsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>kalaazu.clans_applications</code> table reference
     */
    public ClansApplications() {
        this(DSL.name("clans_applications"), null);
    }

    /**
     * Create an aliased <code>kalaazu.clans_applications</code> table reference
     */
    public ClansApplications(String alias) {
        this(DSL.name(alias), CLANS_APPLICATIONS);
    }

    /**
     * Create an aliased <code>kalaazu.clans_applications</code> table reference
     */
    public ClansApplications(Name alias) {
        this(alias, CLANS_APPLICATIONS);
    }

    private ClansApplications(Name alias, Table<ClansApplicationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClansApplications(Name alias, Table<ClansApplicationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Account applications to a clan."));
    }

    public <O extends Record> ClansApplications(Table<O> child, ForeignKey<O, ClansApplicationsRecord> key) {
        super(child, key, CLANS_APPLICATIONS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLANS_APPLICATIONS_CLANS_APPLICATIONS_ACCOUNTS_ID_IDX, Indexes.CLANS_APPLICATIONS_CLANS_APPLICATIONS_CLANS_ID_IDX, Indexes.CLANS_APPLICATIONS_PRIMARY);
    }

    @Override
    public Identity<ClansApplicationsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLANS_APPLICATIONS;
    }

    @Override
    public UniqueKey<ClansApplicationsRecord> getPrimaryKey() {
        return Keys.KEY_CLANS_APPLICATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ClansApplicationsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClansApplicationsRecord>>asList(Keys.KEY_CLANS_APPLICATIONS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ClansApplicationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClansApplicationsRecord, ?>>asList(Keys.CLANS_APPLICATIONS_CLANS, Keys.CLANS_APPLICATIONS_ACCOUNTS);
    }

    public Clans clans() {
        return new Clans(this, Keys.CLANS_APPLICATIONS_CLANS);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.CLANS_APPLICATIONS_ACCOUNTS);
    }

    @Override
    public ClansApplications as(String alias) {
        return new ClansApplications(DSL.name(alias), this);
    }

    @Override
    public ClansApplications as(Name alias) {
        return new ClansApplications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClansApplications rename(String name) {
        return new ClansApplications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClansApplications rename(Name name) {
        return new ClansApplications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Timestamp, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
