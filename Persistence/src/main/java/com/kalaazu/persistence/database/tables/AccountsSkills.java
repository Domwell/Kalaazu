/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.AccountsSkillsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Skilltree for the account.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsSkills extends TableImpl<AccountsSkillsRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_skills</code>
     */
    public static final AccountsSkills ACCOUNTS_SKILLS = new AccountsSkills();
    private static final long serialVersionUID = -886976529;
    /**
     * The column <code>kalaazu.accounts_skills.id</code>. Primary Key.
     */
    public final TableField<AccountsSkillsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_skills.accounts_id</code>. Account ID.
     */
    public final TableField<AccountsSkillsRecord, Integer> ACCOUNTS_ID = createField(
            DSL.name("accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            "Account ID."
    );
    /**
     * The column <code>kalaazu.accounts_skills.skilltree_skills_id</code>. Skill ID.
     */
    public final TableField<AccountsSkillsRecord, Byte> SKILLTREE_SKILLS_ID = createField(
            DSL.name("skilltree_skills_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            "Skill ID."
    );
    /**
     * The column <code>kalaazu.accounts_skills.skilltree_levels_id</code>. Skill level.
     */
    public final TableField<AccountsSkillsRecord, Short> SKILLTREE_LEVELS_ID = createField(DSL.name(
            "skilltree_levels_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "Skill level.");

    /**
     * Create a <code>kalaazu.accounts_skills</code> table reference
     */
    public AccountsSkills() {
        this(DSL.name("accounts_skills"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_skills</code> table reference
     */
    public AccountsSkills(String alias) {
        this(DSL.name(alias), ACCOUNTS_SKILLS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_skills</code> table reference
     */
    public AccountsSkills(Name alias) {
        this(alias, ACCOUNTS_SKILLS);
    }

    private AccountsSkills(Name alias, Table<AccountsSkillsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsSkills(Name alias, Table<AccountsSkillsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Skilltree for the account."));
    }

    public <O extends Record> AccountsSkills(Table<O> child, ForeignKey<O, AccountsSkillsRecord> key) {
        super(child, key, ACCOUNTS_SKILLS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsSkillsRecord> getRecordType() {
        return AccountsSkillsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_SKILLS_ACCOUNTS_SKILLS_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_SKILLS_ACCOUNTS_SKILLS_SKILLTREE_LEVELS,
                Indexes.ACCOUNTS_SKILLS_ACCOUNTS_SKILLS_SKILLTREE_SKILLS,
                Indexes.ACCOUNTS_SKILLS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsSkillsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_SKILLS;
    }

    @Override
    public UniqueKey<AccountsSkillsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_SKILLS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsSkillsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsSkillsRecord>>asList(Keys.KEY_ACCOUNTS_SKILLS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AccountsSkillsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsSkillsRecord, ?>>asList(
                Keys.ACCOUNTS_SKILLS_ACCOUNTS,
                Keys.ACCOUNTS_SKILLS_SKILLTREE_SKILLS,
                Keys.ACCOUNTS_SKILLS_SKILLTREE_LEVELS
        );
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.ACCOUNTS_SKILLS_ACCOUNTS);
    }

    public SkilltreeSkills skilltreeSkills() {
        return new SkilltreeSkills(this, Keys.ACCOUNTS_SKILLS_SKILLTREE_SKILLS);
    }

    public SkilltreeLevels skilltreeLevels() {
        return new SkilltreeLevels(this, Keys.ACCOUNTS_SKILLS_SKILLTREE_LEVELS);
    }

    @Override
    public AccountsSkills as(String alias) {
        return new AccountsSkills(DSL.name(alias), this);
    }

    @Override
    public AccountsSkills as(Name alias) {
        return new AccountsSkills(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsSkills rename(String name) {
        return new AccountsSkills(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsSkills rename(Name name) {
        return new AccountsSkills(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, Byte, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
