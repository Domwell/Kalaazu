package com.kalaazu.persistence.database.entities.moderators_roles_permissions.generated;

import com.kalaazu.persistence.database.entities.ModeratorsRolesPermissions;
import com.kalaazu.persistence.database.entities.moderators_roles_permissions.ModeratorsRolesPermissionsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getInt;

/**
 * The generated Sql Adapter for a {@link
 * ModeratorsRolesPermissions}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedModeratorsRolesPermissionsSqlAdapter implements SqlAdapter<ModeratorsRolesPermissions> {

    private final TableIdentifier<ModeratorsRolesPermissions> tableIdentifier;

    private SqlTypeMapperHelper<Integer, Boolean> isEnabledHelper;

    protected GeneratedModeratorsRolesPermissionsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "moderators_roles_permissions");
    }

    protected ModeratorsRolesPermissions apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getByte(1 + offset))
                .setModeratorsRolesId(resultSet.getByte(2 + offset))
                .setPermissionsId(resultSet.getByte(3 + offset))
                .setIsEnabled(isEnabledHelper.apply(getInt(resultSet, 4 + offset)))
                ;
    }

    protected ModeratorsRolesPermissionsImpl createEntity() {
        return new ModeratorsRolesPermissionsImpl();
    }

    @Override
    public TableIdentifier<ModeratorsRolesPermissions> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, ModeratorsRolesPermissions> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, ModeratorsRolesPermissions> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}