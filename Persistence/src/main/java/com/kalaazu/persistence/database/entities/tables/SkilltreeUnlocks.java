/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.SkilltreeUnlocksRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Requisites needed to unlock a skill upgrade.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SkilltreeUnlocks extends TableImpl<SkilltreeUnlocksRecord> {

    private static final long serialVersionUID = 330152872;

    /**
     * The reference instance of <code>kalaazu.skilltree_unlocks</code>
     */
    public static final SkilltreeUnlocks SKILLTREE_UNLOCKS = new SkilltreeUnlocks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SkilltreeUnlocksRecord> getRecordType() {
        return SkilltreeUnlocksRecord.class;
    }

    /**
     * The column <code>kalaazu.skilltree_unlocks.id</code>. Primary Key.
     */
    public final TableField<SkilltreeUnlocksRecord, Short> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.skilltree_unlocks.upgrade_skilltree_levels_id</code>. Skill to upgrade.
     */
    public final TableField<SkilltreeUnlocksRecord, Short> UPGRADE_SKILLTREE_LEVELS_ID = createField(DSL.name("upgrade_skilltree_levels_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "Skill to upgrade.");

    /**
     * The column <code>kalaazu.skilltree_unlocks.required_skilltree_levels_id</code>. Required skill level to upgrade.
     */
    public final TableField<SkilltreeUnlocksRecord, Short> REQUIRED_SKILLTREE_LEVELS_ID = createField(DSL.name("required_skilltree_levels_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "Required skill level to upgrade.");

    /**
     * Create a <code>kalaazu.skilltree_unlocks</code> table reference
     */
    public SkilltreeUnlocks() {
        this(DSL.name("skilltree_unlocks"), null);
    }

    /**
     * Create an aliased <code>kalaazu.skilltree_unlocks</code> table reference
     */
    public SkilltreeUnlocks(String alias) {
        this(DSL.name(alias), SKILLTREE_UNLOCKS);
    }

    /**
     * Create an aliased <code>kalaazu.skilltree_unlocks</code> table reference
     */
    public SkilltreeUnlocks(Name alias) {
        this(alias, SKILLTREE_UNLOCKS);
    }

    private SkilltreeUnlocks(Name alias, Table<SkilltreeUnlocksRecord> aliased) {
        this(alias, aliased, null);
    }

    private SkilltreeUnlocks(Name alias, Table<SkilltreeUnlocksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Requisites needed to unlock a skill upgrade."));
    }

    public <O extends Record> SkilltreeUnlocks(Table<O> child, ForeignKey<O, SkilltreeUnlocksRecord> key) {
        super(child, key, SKILLTREE_UNLOCKS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SKILLTREE_UNLOCKS_PRIMARY, Indexes.SKILLTREE_UNLOCKS_SKILLTREE_UNLOCKS_REQUIRED_SKILLTREE_LEVELS_ID_IDX, Indexes.SKILLTREE_UNLOCKS_SKILLTREE_UNLOCKS_UPGRADE_SKILLTREE_LEVELS_ID_IDX);
    }

    @Override
    public Identity<SkilltreeUnlocksRecord, Short> getIdentity() {
        return Keys.IDENTITY_SKILLTREE_UNLOCKS;
    }

    @Override
    public UniqueKey<SkilltreeUnlocksRecord> getPrimaryKey() {
        return Keys.KEY_SKILLTREE_UNLOCKS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SkilltreeUnlocksRecord>> getKeys() {
        return Arrays.<UniqueKey<SkilltreeUnlocksRecord>>asList(Keys.KEY_SKILLTREE_UNLOCKS_PRIMARY);
    }

    @Override
    public List<ForeignKey<SkilltreeUnlocksRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SkilltreeUnlocksRecord, ?>>asList(Keys.SKILLTREE_UNLOCKS_UPGRADE_SKILLTREE_LEVELS, Keys.SKILLTREE_UNLOCKS_REQUIRED_SKILLTREE_LEVELS);
    }

    public SkilltreeLevels skilltreeUnlocksUpgradeSkilltreeLevels() {
        return new SkilltreeLevels(this, Keys.SKILLTREE_UNLOCKS_UPGRADE_SKILLTREE_LEVELS);
    }

    public SkilltreeLevels skilltreeUnlocksRequiredSkilltreeLevels() {
        return new SkilltreeLevels(this, Keys.SKILLTREE_UNLOCKS_REQUIRED_SKILLTREE_LEVELS);
    }

    @Override
    public SkilltreeUnlocks as(String alias) {
        return new SkilltreeUnlocks(DSL.name(alias), this);
    }

    @Override
    public SkilltreeUnlocks as(Name alias) {
        return new SkilltreeUnlocks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SkilltreeUnlocks rename(String name) {
        return new SkilltreeUnlocks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SkilltreeUnlocks rename(Name name) {
        return new SkilltreeUnlocks(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Short, Short, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
