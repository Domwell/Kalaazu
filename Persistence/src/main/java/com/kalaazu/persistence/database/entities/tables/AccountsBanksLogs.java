/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.AccountsBanksLogsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * Logs from account's bank
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class AccountsBanksLogs extends TableImpl<AccountsBanksLogsRecord> {

    /**
     * The reference instance of <code>kalaazu.accounts_banks_logs</code>
     */
    public static final AccountsBanksLogs ACCOUNTS_BANKS_LOGS = new AccountsBanksLogs();
    private static final long serialVersionUID = 497960624;
    /**
     * The column <code>kalaazu.accounts_banks_logs.id</code>. Primary Key.
     */
    public final TableField<AccountsBanksLogsRecord, Integer> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.from_accounts_id</code>.
     */
    public final TableField<AccountsBanksLogsRecord, Integer> FROM_ACCOUNTS_ID = createField(
            DSL.name("from_accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.to_accounts_id</code>.
     */
    public final TableField<AccountsBanksLogsRecord, Integer> TO_ACCOUNTS_ID = createField(
            DSL.name("to_accounts_id"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.date</code>.
     */
    public final TableField<AccountsBanksLogsRecord, Timestamp> DATE = createField(
            DSL.name("date"),
            org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false)
                                               .defaultValue(org.jooq.impl.DSL.field(
                                                       "CURRENT_TIMESTAMP",
                                                       org.jooq.impl.SQLDataType.TIMESTAMP
                                               )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.type</code>. Log type. 0 = withdraw, 1 = deposit, 2 = donation.
     */
    public final TableField<AccountsBanksLogsRecord, Byte> TYPE = createField(
            DSL.name("type"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Log type. 0 = withdraw, 1 = deposit, 2 = donation."
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.amount</code>. Amount of currency logged.
     */
    public final TableField<AccountsBanksLogsRecord, Integer> AMOUNT = createField(
            DSL.name("amount"),
            org.jooq.impl.SQLDataType.INTEGER.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.INTEGER
                                             )),
            this,
            "Amount of currency logged."
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.currency</code>. Currency of the amount. 0 = credits, 1 = uridium.
     */
    public final TableField<AccountsBanksLogsRecord, Byte> CURRENCY = createField(
            DSL.name("currency"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "0",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            "Currency of the amount. 0 = credits, 1 = uridium."
    );
    /**
     * The column <code>kalaazu.accounts_banks_logs.accounts_banks_id</code>.
     */
    public final TableField<AccountsBanksLogsRecord, Integer> ACCOUNTS_BANKS_ID = createField(DSL.name(
            "accounts_banks_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>kalaazu.accounts_banks_logs</code> table reference
     */
    public AccountsBanksLogs() {
        this(DSL.name("accounts_banks_logs"), null);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_banks_logs</code> table reference
     */
    public AccountsBanksLogs(String alias) {
        this(DSL.name(alias), ACCOUNTS_BANKS_LOGS);
    }

    /**
     * Create an aliased <code>kalaazu.accounts_banks_logs</code> table reference
     */
    public AccountsBanksLogs(Name alias) {
        this(alias, ACCOUNTS_BANKS_LOGS);
    }

    private AccountsBanksLogs(Name alias, Table<AccountsBanksLogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsBanksLogs(Name alias, Table<AccountsBanksLogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Logs from account's bank"));
    }

    public <O extends Record> AccountsBanksLogs(Table<O> child, ForeignKey<O, AccountsBanksLogsRecord> key) {
        super(child, key, ACCOUNTS_BANKS_LOGS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsBanksLogsRecord> getRecordType() {
        return AccountsBanksLogsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS,
                Indexes.ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS_LOGS_FROM_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS_LOGS_TO_ACCOUNTS_ID_IDX,
                Indexes.ACCOUNTS_BANKS_LOGS_PRIMARY
        );
    }

    @Override
    public Identity<AccountsBanksLogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ACCOUNTS_BANKS_LOGS;
    }

    @Override
    public UniqueKey<AccountsBanksLogsRecord> getPrimaryKey() {
        return Keys.KEY_ACCOUNTS_BANKS_LOGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AccountsBanksLogsRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountsBanksLogsRecord>>asList(Keys.KEY_ACCOUNTS_BANKS_LOGS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AccountsBanksLogsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AccountsBanksLogsRecord, ?>>asList(
                Keys.ACCOUNTS_BANKS_LOGS_ACCOUNTS,
                Keys.ACCOUNTS_BANKS_LOGS_TO_ACCOUNTS,
                Keys.ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS
        );
    }

    public Accounts accountsBanksLogsAccounts() {
        return new Accounts(this, Keys.ACCOUNTS_BANKS_LOGS_ACCOUNTS);
    }

    public Accounts accountsBanksLogsToAccounts() {
        return new Accounts(this, Keys.ACCOUNTS_BANKS_LOGS_TO_ACCOUNTS);
    }

    public AccountsBanks accountsBanks() {
        return new AccountsBanks(this, Keys.ACCOUNTS_BANKS_LOGS_ACCOUNTS_BANKS);
    }

    @Override
    public AccountsBanksLogs as(String alias) {
        return new AccountsBanksLogs(DSL.name(alias), this);
    }

    @Override
    public AccountsBanksLogs as(Name alias) {
        return new AccountsBanksLogs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsBanksLogs rename(String name) {
        return new AccountsBanksLogs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsBanksLogs rename(Name name) {
        return new AccountsBanksLogs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Integer, Timestamp, Byte, Integer, Byte, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
