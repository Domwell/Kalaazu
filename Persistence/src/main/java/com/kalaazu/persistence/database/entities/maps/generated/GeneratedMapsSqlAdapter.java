package com.kalaazu.persistence.database.entities.maps.generated;

import com.kalaazu.persistence.database.entities.Maps;
import com.kalaazu.persistence.database.entities.maps.MapsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getByte;

/**
 * The generated Sql Adapter for a {@link
 * Maps} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMapsSqlAdapter implements SqlAdapter<Maps> {

    private final TableIdentifier<Maps> tableIdentifier;

    private SqlTypeMapperHelper<Integer, Boolean> isPvpHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isStarterHelper;

    protected GeneratedMapsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "maps");
    }

    protected Maps apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getByte(1 + offset))
                .setName(resultSet.getString(2 + offset))
                .setFactionsId(getByte(resultSet, 3 + offset))
                .setIsPvp(resultSet.getInt(4 + offset))
                .setIsStarter(resultSet.getInt(5 + offset))
                .setLimits(resultSet.getLong(6 + offset))
                ;
    }

    protected MapsImpl createEntity() {
        return new MapsImpl();
    }

    @Override
    public TableIdentifier<Maps> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, Maps> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, Maps> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}