package com.kalaazu.persistence.database.entities.accounts.generated;

import com.kalaazu.persistence.database.entities.*;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * Accounts}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedAccountsImpl implements Accounts {

    private Integer id;

    private int usersId;

    private String sessionId;

    private byte levelsId;

    private Byte factionsId;

    private Integer accountsHangarsId;

    private Integer clansId;

    private byte ranksId;

    private String name;

    private Timestamp banDate;

    private Timestamp premiumDate;

    private Timestamp date;

    private Timestamp lastLogin;

    private short skillPointsTotal;

    private short skillPointsFree;

    protected GeneratedAccountsImpl() {

    }

    @Override
    public Optional<Byte> factionsId() {
        return Optional.ofNullable(factionsId);
    }

    @Override
    public OptionalInt accountsHangarsId() {
        return OptionalUtil.ofNullable(accountsHangarsId);
    }

    @Override
    public OptionalInt clansId() {
        return OptionalUtil.ofNullable(clansId);
    }

    @Override
    public Optional<Timestamp> banDate() {
        return Optional.ofNullable(banDate);
    }

    @Override
    public Optional<Timestamp> premiumDate() {
        return Optional.ofNullable(premiumDate);
    }


    @Override
    public Optional<Timestamp> lastLogin() {
        return Optional.ofNullable(lastLogin);
    }

    @Override
    public Users findUsersId(Manager<Users> foreignManager) {
        return foreignManager.stream()
                             .filter(Users.ID.equal(usersId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Levels findLevelsId(Manager<Levels> foreignManager) {
        return foreignManager.stream()
                             .filter(Levels.ID.equal(levelsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (factionsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Factions.ID.equal(factionsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<AccountsHangars> findAccountsHangarsId(Manager<AccountsHangars> foreignManager) {
        if (accountsHangarsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(AccountsHangars.ID.equal(accountsHangarsId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Clans> findClansId(Manager<Clans> foreignManager) {
        if (clansId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Clans.ID.equal(clansId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Ranks findRanksId(Manager<Ranks> foreignManager) {
        return foreignManager.stream()
                             .filter(Ranks.ID.equal(ranksId()))
                             .findAny()
                             .orElse(null);
    }
}