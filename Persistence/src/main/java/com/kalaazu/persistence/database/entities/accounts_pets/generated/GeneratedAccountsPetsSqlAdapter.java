package com.kalaazu.persistence.database.entities.accounts_pets.generated;

import com.kalaazu.persistence.database.entities.AccountsPets;
import com.kalaazu.persistence.database.entities.accounts_pets.AccountsPetsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_pets.AccountsPets} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsPetsSqlAdapter implements SqlAdapter<AccountsPets> {

    private final TableIdentifier<AccountsPets> tableIdentifier;

    protected GeneratedAccountsPetsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_pets");
    }

    protected AccountsPets apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsId(resultSet.getInt(2 + offset))
                .setLevelsId(resultSet.getByte(3 + offset))
                .setName(resultSet.getString(4 + offset))
                .setExperience(resultSet.getInt(5 + offset))
                .setFuel(resultSet.getInt(6 + offset))
                .setHealth(resultSet.getInt(7 + offset))
                .setSlotsLasersTotal(resultSet.getByte(8 + offset))
                .setSlotsLasersAvailable(resultSet.getByte(9 + offset))
                .setSlotsGeneratorsTotal(resultSet.getByte(10 + offset))
                .setSlotsGeneratorsAvailable(resultSet.getByte(11 + offset))
                .setSlotsProtocolsTotal(resultSet.getByte(12 + offset))
                .setSlotsProtocolsAvailable(resultSet.getByte(13 + offset))
                .setSlotsGearsTotal(resultSet.getByte(14 + offset))
                .setSlotsGearsAvailable(resultSet.getByte(15 + offset))
                ;
    }

    protected AccountsPetsImpl createEntity() {
        return new AccountsPetsImpl();
    }

    @Override
    public TableIdentifier<AccountsPets> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsPets> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsPets> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}