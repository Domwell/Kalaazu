package com.kalaazu.persistence.database.entities.accounts_ships.generated;

import com.kalaazu.persistence.database.entities.AccountsShips;
import com.kalaazu.persistence.database.entities.accounts_ships.AccountsShipsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_ships.AccountsShips}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsShipsSqlAdapter implements SqlAdapter<AccountsShips> {

    private final TableIdentifier<AccountsShips> tableIdentifier;

    private SqlTypeMapperHelper<Long, Vector2> positionHelper;

    protected GeneratedAccountsShipsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_ships");
    }

    protected AccountsShips apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsId(resultSet.getInt(2 + offset))
                .setShipsId(resultSet.getByte(3 + offset))
                .setMapsId(resultSet.getByte(4 + offset))
                .setPosition(resultSet.getLong(5 + offset))
                .setHealth(resultSet.getInt(6 + offset))
                .setNanohull(resultSet.getInt(7 + offset))
                .setGfx(resultSet.getByte(8 + offset))
                ;
    }

    protected AccountsShipsImpl createEntity() {
        return new AccountsShipsImpl();
    }

    @Override
    public TableIdentifier<AccountsShips> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsShips> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsShips> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}