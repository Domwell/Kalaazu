package com.kalaazu.persistence.database.entities.accounts_skylabs.generated;

import com.kalaazu.persistence.database.entities.AccountsSkylabs;
import com.kalaazu.persistence.database.entities.accounts_skylabs.AccountsSkylabsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_skylabs.AccountsSkylabs}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsSkylabsSqlAdapter implements SqlAdapter<AccountsSkylabs> {

    private final TableIdentifier<AccountsSkylabs> tableIdentifier;

    protected GeneratedAccountsSkylabsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_skylabs");
    }

    protected AccountsSkylabs apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsId(resultSet.getInt(2 + offset))
                .setSkylabModulesId(resultSet.getByte(3 + offset))
                .setLevelsId(resultSet.getByte(4 + offset))
                .setSpace(resultSet.getInt(5 + offset))
                .setUpgrade(resultSet.getTimestamp(6 + offset))
                ;
    }

    protected AccountsSkylabsImpl createEntity() {
        return new AccountsSkylabsImpl();
    }

    @Override
    public TableIdentifier<AccountsSkylabs> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsSkylabs> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsSkylabs> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}