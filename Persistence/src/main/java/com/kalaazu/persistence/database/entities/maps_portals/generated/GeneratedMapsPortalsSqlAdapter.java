package com.kalaazu.persistence.database.entities.maps_portals.generated;

import com.kalaazu.persistence.database.entities.MapsPortals;
import com.kalaazu.persistence.database.entities.maps_portals.MapsPortalsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.maps_portals.MapsPortals} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMapsPortalsSqlAdapter implements SqlAdapter<MapsPortals> {

    private final TableIdentifier<MapsPortals> tableIdentifier;

    private SqlTypeMapperHelper<Long, Vector2> positionHelper;

    private SqlTypeMapperHelper<Long, Vector2> targetPositionHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isVisibleHelper;

    private SqlTypeMapperHelper<Integer, Boolean> isWorkingHelper;

    protected GeneratedMapsPortalsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "maps_portals");
    }

    protected MapsPortals apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getByte(1 + offset))
                .setLevelsId(resultSet.getByte(2 + offset))
                .setMapsId(resultSet.getByte(3 + offset))
                .setPosition(resultSet.getLong(4 + offset))
                .setTargetMapsId(resultSet.getByte(5 + offset))
                .setTargetPosition(resultSet.getLong(6 + offset))
                .setIsVisible(resultSet.getInt(7 + offset))
                .setIsWorking(resultSet.getInt(8 + offset))
                .setGfx(resultSet.getByte(9 + offset))
                ;
    }

    protected MapsPortalsImpl createEntity() {
        return new MapsPortalsImpl();
    }

    @Override
    public TableIdentifier<MapsPortals> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, MapsPortals> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, MapsPortals> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}