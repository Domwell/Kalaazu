package com.kalaazu.persistence.database.entities.trade_items.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.Items;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.TradeItems;
import com.kalaazu.persistence.database.mappers.TradeType;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * TradeItems}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedTradeItemsImpl implements TradeItems {

    private Short id;

    private short itemsId;

    private Integer accountsId;

    private int price;

    private TradeType type;

    protected GeneratedTradeItemsImpl() {

    }

    @Override
    public OptionalInt accountsId() {
        return OptionalUtil.ofNullable(accountsId);
    }

    @Override
    public Items findItemsId(Manager<Items> foreignManager) {
        return foreignManager.stream()
                             .filter(Items.ID.equal(itemsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Accounts> findAccountsId(Manager<Accounts> foreignManager) {
        if (accountsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Accounts.ID.equal(accountsId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }
}