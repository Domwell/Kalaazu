package com.kalaazu.persistence.database.entities.accounts_banks.generated;

import com.kalaazu.persistence.database.entities.*;
import com.kalaazu.persistence.database.entities.accounts_banks.AccountsBanksImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.SqlAdapter;
import com.speedment.runtime.core.db.SqlFunction;

import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * The generated Sql Adapter for a {@link
 * com.kalaazu.persistence.database.entities.accounts_banks.AccountsBanks}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsBanksSqlAdapter implements SqlAdapter<AccountsBanks> {

    private final TableIdentifier<AccountsBanks> tableIdentifier;

    protected GeneratedAccountsBanksSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "accounts_banks");
    }

    protected AccountsBanks apply(ResultSet resultSet, int offset) throws SQLException {
        return createEntity()
                .setId(resultSet.getInt(1 + offset))
                .setAccountsId(resultSet.getInt(2 + offset))
                .setCredits(resultSet.getLong(3 + offset))
                .setUridium(resultSet.getLong(4 + offset))
                .setTaxCredits(resultSet.getByte(5 + offset))
                .setTaxUridium(resultSet.getByte(6 + offset))
                ;
    }

    protected AccountsBanksImpl createEntity() {
        return new AccountsBanksImpl();
    }

    @Override
    public TableIdentifier<AccountsBanks> identifier() {
        return tableIdentifier;
    }

    @Override
    public SqlFunction<ResultSet, AccountsBanks> entityMapper() {
        return entityMapper(0);
    }

    @Override
    public SqlFunction<ResultSet, AccountsBanks> entityMapper(int offset) {
        return rs -> apply(rs, offset);
    }
}