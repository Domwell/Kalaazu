package com.kalaazu.persistence.database.entities.quests.generated;

import com.kalaazu.persistence.database.entities.Factions;
import com.kalaazu.persistence.database.entities.Levels;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.Quests;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * Quests}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedQuestsImpl implements Quests {

    private Short id;

    private byte levelsId;

    private Short questsId;

    private Byte factionsId;

    private String name;

    protected GeneratedQuestsImpl() {

    }

    @Override
    public Optional<Short> questsId() {
        return Optional.ofNullable(questsId);
    }

    @Override
    public Optional<Byte> factionsId() {
        return Optional.ofNullable(factionsId);
    }

    @Override
    public Levels findLevelsId(Manager<Levels> foreignManager) {
        return foreignManager.stream()
                             .filter(Levels.ID.equal(levelsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Quests> findQuestsId(Manager<Quests> foreignManager) {
        if (questsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Quests.ID.equal(questsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (factionsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Factions.ID.equal(factionsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }
}