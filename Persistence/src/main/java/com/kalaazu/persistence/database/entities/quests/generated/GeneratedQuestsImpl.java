package com.kalaazu.persistence.database.entities.quests.generated;

import com.kalaazu.persistence.database.entities.Factions;
import com.kalaazu.persistence.database.entities.Levels;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.Quests;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.kalaazu.persistence.database.entities.quests.Quests}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedQuestsImpl implements Quests {

    private short id;

    private byte levelsId;

    private Short questsId;

    private Byte factionsId;

    private String name;

    protected GeneratedQuestsImpl() {
    }

    @Override
    public Short getId() {
        return id;
    }

    @Override
    public byte getLevelsId() {
        return levelsId;
    }

    @Override
    public Optional<Short> getQuestsId() {
        return Optional.ofNullable(questsId);
    }

    @Override
    public Optional<Byte> getFactionsId() {
        return Optional.ofNullable(factionsId);
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Quests setId(short id) {
        this.id = id;
        return this;
    }

    @Override
    public Quests setLevelsId(byte levelsId) {
        this.levelsId = levelsId;
        return this;
    }

    @Override
    public Quests setQuestsId(Short questsId) {
        this.questsId = questsId;
        return this;
    }

    @Override
    public Quests setFactionsId(Byte factionsId) {
        this.factionsId = factionsId;
        return this;
    }

    @Override
    public Quests setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Levels findLevelsId(Manager<Levels> foreignManager) {
        return foreignManager.stream()
                             .filter(Levels.ID.equal(getLevelsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Quests> findQuestsId(Manager<Quests> foreignManager) {
        if (getQuestsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Quests.ID.equal(getQuestsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (getFactionsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Factions.ID.equal(getFactionsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("levelsId = " + Objects.toString(getLevelsId()));
        sj.add("questsId = " + Objects.toString(OptionalUtil.unwrap(getQuestsId())));
        sj.add("factionsId = " + Objects.toString(OptionalUtil.unwrap(getFactionsId())));
        sj.add("name = " + Objects.toString(getName()));
        return "QuestsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof Quests)) {
            return false;
        }
        final Quests thatQuests = (Quests) that;
        if (this.getId() != thatQuests.getId()) {
            return false;
        }
        if (this.getLevelsId() != thatQuests.getLevelsId()) {
            return false;
        }
        if (!Objects.equals(this.getQuestsId(), thatQuests.getQuestsId())) {
            return false;
        }
        if (!Objects.equals(this.getFactionsId(), thatQuests.getFactionsId())) {
            return false;
        }
        if (!Objects.equals(this.getName(), thatQuests.getName())) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Short.hashCode(getId());
        hash = 31 * hash + Byte.hashCode(getLevelsId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getQuestsId()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getFactionsId()));
        hash = 31 * hash + Objects.hashCode(getName());
        return hash;
    }
}