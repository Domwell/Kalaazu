package com.kalaazu.persistence.database.entities.trade_items.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.Items;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.TradeItems;
import com.kalaazu.persistence.database.mappers.TradeType;
import com.kalaazu.persistence.database.mappers.TradeTypeMapper;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.*;
import com.speedment.runtime.typemapper.TypeMapper;

import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * TradeItems}-interface
 * representing entities of the {@code trade_items}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTradeItems {

    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#id()} method.
     */
    ShortField<TradeItems, Short> ID = ShortField.create(
            Identifier.ID,
            TradeItems::id,
            TradeItems::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#itemsId()} method.
     */
    ShortForeignKeyField<TradeItems, Short, Items> ITEMS_ID = ShortForeignKeyField.create(
            Identifier.ITEMS_ID,
            TradeItems::itemsId,
            TradeItems::itemsId,
            Items.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#accountsId()} method.
     */
    ComparableForeignKeyField<TradeItems, Integer, Integer, Accounts> ACCOUNTS_ID = ComparableForeignKeyField.create(
            Identifier.ACCOUNTS_ID,
            o -> OptionalUtil.unwrap(o.accountsId()),
            TradeItems::accountsId,
            Accounts.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#price()} method.
     */
    IntField<TradeItems, Integer> PRICE = IntField.create(
            Identifier.PRICE,
            TradeItems::price,
            TradeItems::price,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#type()} method.
     */
    EnumField<TradeItems, Byte, TradeType> TYPE = EnumField.create(
            Identifier.TYPE,
            TradeItems::type,
            TradeItems::type,
            new TradeTypeMapper(),
            TradeType::name,
            TradeType::valueOf,
            TradeType.class
    );

    /**
     * Returns the id of this TradeItems. The id field corresponds to the
     * database column kalaazu.kalaazu.trade_items.id.
     *
     * @return the id of this TradeItems
     */
    Short id();

    /**
     * Returns the itemsId of this TradeItems. The itemsId field corresponds to
     * the database column kalaazu.kalaazu.trade_items.items_id.
     *
     * @return the itemsId of this TradeItems
     */
    short itemsId();

    /**
     * Returns the accountsId of this TradeItems. The accountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.trade_items.accounts_id.
     *
     * @return the accountsId of this TradeItems
     */
    OptionalInt accountsId();

    /**
     * Returns the price of this TradeItems. The price field corresponds to the
     * database column kalaazu.kalaazu.trade_items.price.
     *
     * @return the price of this TradeItems
     */
    int price();

    /**
     * Returns the type of this TradeItems. The type field corresponds to the
     * database column kalaazu.kalaazu.trade_items.type.
     *
     * @return the type of this TradeItems
     */
    TradeType type();

    /**
     * Sets the id of this TradeItems. The id field corresponds to the database
     * column kalaazu.kalaazu.trade_items.id.
     *
     * @param id to set of this TradeItems
     *
     * @return this TradeItems instance
     */
    TradeItems id(Short id);

    /**
     * Sets the itemsId of this TradeItems. The itemsId field corresponds to the
     * database column kalaazu.kalaazu.trade_items.items_id.
     *
     * @param itemsId to set of this TradeItems
     *
     * @return this TradeItems instance
     */
    TradeItems itemsId(short itemsId);

    /**
     * Sets the accountsId of this TradeItems. The accountsId field corresponds
     * to the database column kalaazu.kalaazu.trade_items.accounts_id.
     *
     * @param accountsId to set of this TradeItems
     *
     * @return this TradeItems instance
     */
    TradeItems accountsId(Integer accountsId);

    /**
     * Sets the price of this TradeItems. The price field corresponds to the
     * database column kalaazu.kalaazu.trade_items.price.
     *
     * @param price to set of this TradeItems
     *
     * @return this TradeItems instance
     */
    TradeItems price(int price);

    /**
     * Sets the type of this TradeItems. The type field corresponds to the
     * database column kalaazu.kalaazu.trade_items.type.
     *
     * @param type to set of this TradeItems
     *
     * @return this TradeItems instance
     */
    TradeItems type(TradeType type);

    /**
     * Queries the specified manager for the referenced Items. If no such Items
     * exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Items findItemsId(Manager<Items> foreignManager);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<Accounts> findAccountsId(Manager<Accounts> foreignManager);

    enum Identifier implements ColumnIdentifier<TradeItems> {

        ID("id"),
        ITEMS_ID("items_id"),
        ACCOUNTS_ID("accounts_id"),
        PRICE("price"),
        TYPE("type");

        private final String columnName;

        private final TableIdentifier<TradeItems> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "trade_items";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<TradeItems> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}