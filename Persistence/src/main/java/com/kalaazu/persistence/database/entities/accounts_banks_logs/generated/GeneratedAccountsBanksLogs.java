package com.kalaazu.persistence.database.entities.accounts_banks_logs.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsBanks;
import com.kalaazu.persistence.database.entities.AccountsBanksLogs;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.mappers.BankLogType;
import com.kalaazu.persistence.database.mappers.BankLogTypeMapper;
import com.kalaazu.persistence.database.mappers.Currency;
import com.kalaazu.persistence.database.mappers.CurrencyMapper;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.*;
import com.speedment.runtime.field.method.ReferenceSetter;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * AccountsBanksLogs}-interface
 * representing entities of the {@code accounts_banks_logs}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAccountsBanksLogs {

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#id()} method.
     */
    IntField<AccountsBanksLogs, Integer> ID = IntField.create(
            Identifier.ID,
            AccountsBanksLogs::id,
            AccountsBanksLogs::id,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#fromAccountsId()} method.
     */
    IntForeignKeyField<AccountsBanksLogs, Integer, Accounts> FROM_ACCOUNTS_ID = IntForeignKeyField.create(
            Identifier.FROM_ACCOUNTS_ID,
            AccountsBanksLogs::fromAccountsId,
            AccountsBanksLogs::fromAccountsId,
            Accounts.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#toAccountsId()} method.
     */
    IntForeignKeyField<AccountsBanksLogs, Integer, Accounts> TO_ACCOUNTS_ID = IntForeignKeyField.create(
            Identifier.TO_ACCOUNTS_ID,
            AccountsBanksLogs::toAccountsId,
            AccountsBanksLogs::toAccountsId,
            Accounts.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#date()} method.
     */
    ComparableField<AccountsBanksLogs, Timestamp, Timestamp> DATE = ComparableField.create(
            Identifier.DATE,
            AccountsBanksLogs::date,
            (ReferenceSetter<AccountsBanksLogs, Timestamp>) AccountsBanksLogs::date,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#type()} method.
     */
    EnumField<AccountsBanksLogs, Byte, BankLogType> TYPE = EnumField.create(
            Identifier.TYPE,
            AccountsBanksLogs::type,
            AccountsBanksLogs::type,
            new BankLogTypeMapper(),
            BankLogType::name,
            BankLogType::valueOf,
            BankLogType.class
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#amount()} method.
     */
    IntField<AccountsBanksLogs, Integer> AMOUNT = IntField.create(
            Identifier.AMOUNT,
            AccountsBanksLogs::amount,
            AccountsBanksLogs::amount,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#currency()} method.
     */
    EnumField<AccountsBanksLogs, Byte, Currency> CURRENCY = EnumField.create(
            Identifier.CURRENCY,
            AccountsBanksLogs::currency,
            AccountsBanksLogs::currency,
            new CurrencyMapper(),
            Currency::name,
            Currency::valueOf,
            Currency.class
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#accountsBanksId()} method.
     */
    ComparableForeignKeyField<AccountsBanksLogs, Integer, Integer, AccountsBanks> ACCOUNTS_BANKS_ID = ComparableForeignKeyField.create(
            Identifier.ACCOUNTS_BANKS_ID,
            o -> OptionalUtil.unwrap(o.accountsBanksId()),
            AccountsBanksLogs::accountsBanksId,
            AccountsBanks.ID,
            TypeMapper.identity(),
            false
    );

    /**
     * Returns the id of this AccountsBanksLogs. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_banks_logs.id.
     *
     * @return the id of this AccountsBanksLogs
     */
    Integer id();

    /**
     * Returns the fromAccountsId of this AccountsBanksLogs. The fromAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.from_accounts_id.
     *
     * @return the fromAccountsId of this AccountsBanksLogs
     */
    int fromAccountsId();

    /**
     * Returns the toAccountsId of this AccountsBanksLogs. The toAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.to_accounts_id.
     *
     * @return the toAccountsId of this AccountsBanksLogs
     */
    int toAccountsId();

    /**
     * Returns the date of this AccountsBanksLogs. The date field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.date.
     *
     * @return the date of this AccountsBanksLogs
     */
    Timestamp date();

    /**
     * Returns the type of this AccountsBanksLogs. The type field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.type.
     *
     * @return the type of this AccountsBanksLogs
     */
    BankLogType type();

    /**
     * Returns the amount of this AccountsBanksLogs. The amount field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.amount.
     *
     * @return the amount of this AccountsBanksLogs
     */
    int amount();

    /**
     * Returns the currency of this AccountsBanksLogs. The currency field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.currency.
     *
     * @return the currency of this AccountsBanksLogs
     */
    Currency currency();

    /**
     * Returns the accountsBanksId of this AccountsBanksLogs. The
     * accountsBanksId field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.accounts_banks_id.
     *
     * @return the accountsBanksId of this AccountsBanksLogs
     */
    OptionalInt accountsBanksId();

    /**
     * s the id of this AccountsBanksLogs. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_banks_logs.id.
     *
     * @param id to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs id(Integer id);

    /**
     * s the fromAccountsId of this AccountsBanksLogs. The fromAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.from_accounts_id.
     *
     * @param fromAccountsId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs fromAccountsId(int fromAccountsId);

    /**
     * s the toAccountsId of this AccountsBanksLogs. The toAccountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.to_accounts_id.
     *
     * @param toAccountsId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs toAccountsId(int toAccountsId);

    /**
     * s the date of this AccountsBanksLogs. The date field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.date.
     *
     * @param date to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs date(Timestamp date);

    /**
     * s the type of this AccountsBanksLogs. The type field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.type.
     *
     * @param type to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs type(BankLogType type);

    /**
     * s the amount of this AccountsBanksLogs. The amount field corresponds
     * to the database column kalaazu.kalaazu.accounts_banks_logs.amount.
     *
     * @param amount to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs amount(int amount);

    /**
     * s the currency of this AccountsBanksLogs. The currency field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.currency.
     *
     * @param currency to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs currency(Currency currency);

    /**
     * s the accountsBanksId of this AccountsBanksLogs. The accountsBanksId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.accounts_banks_id.
     *
     * @param accountsBanksId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs accountsBanksId(Integer accountsBanksId);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Accounts findFromAccountsId(Manager<Accounts> foreignManager);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Accounts findToAccountsId(Manager<Accounts> foreignManager);

    /**
     * Queries the specified manager for the referenced AccountsBanks. If no
     * such AccountsBanks exists, an {@code NullPointerException} will be
     * thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<AccountsBanks> findAccountsBanksId(Manager<AccountsBanks> foreignManager);

    enum Identifier implements ColumnIdentifier<AccountsBanksLogs> {

        ID("id"),
        FROM_ACCOUNTS_ID("from_accounts_id"),
        TO_ACCOUNTS_ID("to_accounts_id"),
        DATE("date"),
        TYPE("type"),
        AMOUNT("amount"),
        CURRENCY("currency"),
        ACCOUNTS_BANKS_ID("accounts_banks_id");

        private final String columnName;

        private final TableIdentifier<AccountsBanksLogs> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "accounts_banks_logs";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<AccountsBanksLogs> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}