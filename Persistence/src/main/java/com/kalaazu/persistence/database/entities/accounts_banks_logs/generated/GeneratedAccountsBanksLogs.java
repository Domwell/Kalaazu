package com.kalaazu.persistence.database.entities.accounts_banks_logs.generated;

import com.kalaazu.persistence.database.entities.*;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.kalaazu.persistence.database.entities.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ByteField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.kalaazu.persistence.database.entities.accounts_banks_logs.AccountsBanksLogs}-interface
 * representing entities of the {@code accounts_banks_logs}-table in the
 * database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedAccountsBanksLogs {

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getId()} method.
     */
    IntField<AccountsBanksLogs, Integer>                          ID                = IntField.create(
            Identifier.ID,
            AccountsBanksLogs::getId,
            AccountsBanksLogs::setId,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getFromAccountsId()} method.
     */
    IntForeignKeyField<AccountsBanksLogs, Integer, Accounts>      FROM_ACCOUNTS_ID  = IntForeignKeyField.create(
            Identifier.FROM_ACCOUNTS_ID,
            AccountsBanksLogs::getFromAccountsId,
            AccountsBanksLogs::setFromAccountsId,
            Accounts.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getToAccountsId()} method.
     */
    IntForeignKeyField<AccountsBanksLogs, Integer, Accounts>      TO_ACCOUNTS_ID    = IntForeignKeyField.create(
            Identifier.TO_ACCOUNTS_ID,
            AccountsBanksLogs::getToAccountsId,
            AccountsBanksLogs::setToAccountsId,
            Accounts.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getDate()} method.
     */
    ComparableField<AccountsBanksLogs, Timestamp, Timestamp>      DATE              = ComparableField.create(
            Identifier.DATE,
            AccountsBanksLogs::getDate,
            AccountsBanksLogs::setDate,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getType()} method.
     */
    ByteField<AccountsBanksLogs, Byte>                            TYPE              = ByteField.create(
            Identifier.TYPE,
            AccountsBanksLogs::getType,
            AccountsBanksLogs::setType,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getAmount()} method.
     */
    IntField<AccountsBanksLogs, Integer>                          AMOUNT            = IntField.create(
            Identifier.AMOUNT,
            AccountsBanksLogs::getAmount,
            AccountsBanksLogs::setAmount,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getCurrency()} method.
     */
    ByteField<AccountsBanksLogs, Byte>                            CURRENCY          = ByteField.create(
            Identifier.CURRENCY,
            AccountsBanksLogs::getCurrency,
            AccountsBanksLogs::setCurrency,
            TypeMapper.primitive(),
            false
    );

    /**
     * This Field corresponds to the {@link AccountsBanksLogs} field that can be
     * obtained using the {@link AccountsBanksLogs#getAccountsBanksId()} method.
     */
    IntForeignKeyField<AccountsBanksLogs, Integer, AccountsBanks> ACCOUNTS_BANKS_ID = IntForeignKeyField.create(
            Identifier.ACCOUNTS_BANKS_ID,
            o -> OptionalUtil.unwrap(o.getAccountsBanksId()),
            AccountsBanksLogs::setAccountsBanksId,
            AccountsBanks.ID,
            TypeMapper.primitive(),
            false
    );

    /**
     * Returns the id of this AccountsBanksLogs. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_banks_logs.id.
     *
     * @return the id of this AccountsBanksLogs
     */
    Integer getId();

    /**
     * Returns the fromAccountsId of this AccountsBanksLogs. The fromAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.from_accounts_id.
     *
     * @return the fromAccountsId of this AccountsBanksLogs
     */
    int getFromAccountsId();

    /**
     * Returns the toAccountsId of this AccountsBanksLogs. The toAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.to_accounts_id.
     *
     * @return the toAccountsId of this AccountsBanksLogs
     */
    int getToAccountsId();

    /**
     * Returns the date of this AccountsBanksLogs. The date field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.date.
     *
     * @return the date of this AccountsBanksLogs
     */
    Timestamp getDate();

    /**
     * Returns the type of this AccountsBanksLogs. The type field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.type.
     *
     * @return the type of this AccountsBanksLogs
     */
    byte getType();

    /**
     * Returns the amount of this AccountsBanksLogs. The amount field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.amount.
     *
     * @return the amount of this AccountsBanksLogs
     */
    int getAmount();

    /**
     * Returns the currency of this AccountsBanksLogs. The currency field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.currency.
     *
     * @return the currency of this AccountsBanksLogs
     */
    byte getCurrency();

    /**
     * Returns the accountsBanksId of this AccountsBanksLogs. The
     * accountsBanksId field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.accounts_banks_id.
     *
     * @return the accountsBanksId of this AccountsBanksLogs
     */
    OptionalInt getAccountsBanksId();

    /**
     * Sets the id of this AccountsBanksLogs. The id field corresponds to the
     * database column kalaazu.kalaazu.accounts_banks_logs.id.
     *
     * @param id to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setId(int id);

    /**
     * Sets the fromAccountsId of this AccountsBanksLogs. The fromAccountsId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.from_accounts_id.
     *
     * @param fromAccountsId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setFromAccountsId(int fromAccountsId);

    /**
     * Sets the toAccountsId of this AccountsBanksLogs. The toAccountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.to_accounts_id.
     *
     * @param toAccountsId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setToAccountsId(int toAccountsId);

    /**
     * Sets the date of this AccountsBanksLogs. The date field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.date.
     *
     * @param date to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setDate(Timestamp date);

    /**
     * Sets the type of this AccountsBanksLogs. The type field corresponds to
     * the database column kalaazu.kalaazu.accounts_banks_logs.type.
     *
     * @param type to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setType(byte type);

    /**
     * Sets the amount of this AccountsBanksLogs. The amount field corresponds
     * to the database column kalaazu.kalaazu.accounts_banks_logs.amount.
     *
     * @param amount to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setAmount(int amount);

    /**
     * Sets the currency of this AccountsBanksLogs. The currency field
     * corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.currency.
     *
     * @param currency to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setCurrency(byte currency);

    /**
     * Sets the accountsBanksId of this AccountsBanksLogs. The accountsBanksId
     * field corresponds to the database column
     * kalaazu.kalaazu.accounts_banks_logs.accounts_banks_id.
     *
     * @param accountsBanksId to set of this AccountsBanksLogs
     *
     * @return this AccountsBanksLogs instance
     */
    AccountsBanksLogs setAccountsBanksId(int accountsBanksId);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Accounts findFromAccountsId(Manager<Accounts> foreignManager);

    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Accounts findToAccountsId(Manager<Accounts> foreignManager);

    /**
     * Queries the specified manager for the referenced AccountsBanks. If no
     * such AccountsBanks exists, an {@code NullPointerException} will be
     * thrown.
     *
     * @param foreignManager the manager to query for the entity
     *
     * @return the foreign entity referenced
     */
    Optional<AccountsBanks> findAccountsBanksId(Manager<AccountsBanks> foreignManager);

    enum Identifier implements ColumnIdentifier<AccountsBanksLogs> {

        ID("id"),
        FROM_ACCOUNTS_ID("from_accounts_id"),
        TO_ACCOUNTS_ID("to_accounts_id"),
        DATE("date"),
        TYPE("type"),
        AMOUNT("amount"),
        CURRENCY("currency"),
        ACCOUNTS_BANKS_ID("accounts_banks_id");

        private final String                             columnId;

        private final TableIdentifier<AccountsBanksLogs> tableIdentifier;

        Identifier(String columnId) {
            this.columnId = columnId;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsId(),
                    getSchemaId(),
                    getTableId()
            );
        }

        @Override
        public String getDbmsId() {
            return "kalaazu";
        }

        @Override
        public String getSchemaId() {
            return "kalaazu";
        }

        @Override
        public String getTableId() {
            return "accounts_banks_logs";
        }

        @Override
        public String getColumnId() {
            return this.columnId;
        }

        @Override
        public TableIdentifier<AccountsBanksLogs> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}