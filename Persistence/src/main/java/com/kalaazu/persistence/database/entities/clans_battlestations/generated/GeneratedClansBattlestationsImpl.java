package com.kalaazu.persistence.database.entities.clans_battlestations.generated;

import com.kalaazu.math.Vector2;
import com.kalaazu.persistence.database.entities.Clans;
import com.kalaazu.persistence.database.entities.ClansBattlestations;
import com.kalaazu.persistence.database.entities.Manager;
import com.kalaazu.persistence.database.entities.Maps;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import lombok.Data;

import java.sql.Timestamp;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base implementation of the {@link
 * ClansBattlestations}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedClansBattlestationsImpl implements ClansBattlestations {

    private Byte id;

    private Integer clansId;

    private byte mapsId;

    private String name;

    private Vector2 position;

    private Timestamp date;

    protected GeneratedClansBattlestationsImpl() {

    }

    @Override
    public OptionalInt clansId() {
        return OptionalUtil.ofNullable(clansId);
    }

    @Override
    public Optional<Timestamp> date() {
        return Optional.ofNullable(date);
    }

    @Override
    public Optional<Clans> findClansId(Manager<Clans> foreignManager) {
        if (clansId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Clans.ID.equal(clansId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Maps findMapsId(Manager<Maps> foreignManager) {
        return foreignManager.stream()
                             .filter(Maps.ID.equal(mapsId()))
                             .findAny()
                             .orElse(null);
    }
}