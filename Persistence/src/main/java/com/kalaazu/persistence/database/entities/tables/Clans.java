/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.ClansRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Server clans.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clans extends TableImpl<ClansRecord> {

    private static final long serialVersionUID = -504332235;

    /**
     * The reference instance of <code>kalaazu.clans</code>
     */
    public static final Clans CLANS = new Clans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClansRecord> getRecordType() {
        return ClansRecord.class;
    }

    /**
     * The column <code>kalaazu.clans.id</code>. Primary Key.
     */
    public final TableField<ClansRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.clans.accounts_id</code>. Owner ID
     */
    public final TableField<ClansRecord, Integer> ACCOUNTS_ID = createField(DSL.name("accounts_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "Owner ID");

    /**
     * The column <code>kalaazu.clans.factions_id</code>. Clan affiliation faction.
     */
    public final TableField<ClansRecord, Byte> FACTIONS_ID = createField(DSL.name("factions_id"), org.jooq.impl.SQLDataType.TINYINT, this, "Clan affiliation faction.");

    /**
     * The column <code>kalaazu.clans.tag</code>. Name abbreviation.
     */
    public final TableField<ClansRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(4).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "Name abbreviation.");

    /**
     * The column <code>kalaazu.clans.name</code>.
     */
    public final TableField<ClansRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.clans.description</code>.
     */
    public final TableField<ClansRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>kalaazu.clans.logo</code>.
     */
    public final TableField<ClansRecord, String> LOGO = createField(DSL.name("logo"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>kalaazu.clans.status</code>. 0 = closed, 1 = recruiting, 2 = lvl10+, 3 = lvl16+, 4 = FE.
     */
    public final TableField<ClansRecord, Byte> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "0 = closed, 1 = recruiting, 2 = lvl10+, 3 = lvl16+, 4 = FE.");

    /**
     * Create a <code>kalaazu.clans</code> table reference
     */
    public Clans() {
        this(DSL.name("clans"), null);
    }

    /**
     * Create an aliased <code>kalaazu.clans</code> table reference
     */
    public Clans(String alias) {
        this(DSL.name(alias), CLANS);
    }

    /**
     * Create an aliased <code>kalaazu.clans</code> table reference
     */
    public Clans(Name alias) {
        this(alias, CLANS);
    }

    private Clans(Name alias, Table<ClansRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clans(Name alias, Table<ClansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Server clans."));
    }

    public <O extends Record> Clans(Table<O> child, ForeignKey<O, ClansRecord> key) {
        super(child, key, CLANS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLANS_CLANS_ACCOUNTS_ID_IDX, Indexes.CLANS_CLANS_NAME_IDX, Indexes.CLANS_CLANS_TAG_IDX, Indexes.CLANS_PRIMARY);
    }

    @Override
    public Identity<ClansRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLANS;
    }

    @Override
    public UniqueKey<ClansRecord> getPrimaryKey() {
        return Keys.KEY_CLANS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ClansRecord>> getKeys() {
        return Arrays.<UniqueKey<ClansRecord>>asList(Keys.KEY_CLANS_PRIMARY, Keys.KEY_CLANS_CLANS_TAG_IDX, Keys.KEY_CLANS_CLANS_NAME_IDX);
    }

    @Override
    public List<ForeignKey<ClansRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ClansRecord, ?>>asList(Keys.CLANS_ACCOUNTS);
    }

    public Accounts accounts() {
        return new Accounts(this, Keys.CLANS_ACCOUNTS);
    }

    @Override
    public Clans as(String alias) {
        return new Clans(DSL.name(alias), this);
    }

    @Override
    public Clans as(Name alias) {
        return new Clans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clans rename(String name) {
        return new Clans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clans rename(Name name) {
        return new Clans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, Integer, Byte, String, String, String, String, Byte> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
