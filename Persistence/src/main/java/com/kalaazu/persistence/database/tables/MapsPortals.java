/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.tables;


import com.kalaazu.persistence.database.Indexes;
import com.kalaazu.persistence.database.Kalaazu;
import com.kalaazu.persistence.database.Keys;
import com.kalaazu.persistence.database.records.MapsPortalsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * Portals on map.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.1"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class MapsPortals extends TableImpl<MapsPortalsRecord> {

    /**
     * The reference instance of <code>kalaazu.maps_portals</code>
     */
    public static final MapsPortals MAPS_PORTALS = new MapsPortals();
    private static final long serialVersionUID = -1334693123;
    /**
     * The column <code>kalaazu.maps_portals.id</code>. Primary Key.
     */
    public final TableField<MapsPortalsRecord, Byte> ID = createField(
            DSL.name("id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .identity(true),
            this,
            "Primary Key."
    );
    /**
     * The column <code>kalaazu.maps_portals.levels_id</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> LEVELS_ID = createField(
            DSL.name("levels_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.maps_portals.maps_id</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> MAPS_ID = createField(
            DSL.name("maps_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.maps_portals.position</code>. Position on map.
     */
    public final TableField<MapsPortalsRecord, Long> POSITION = createField(
            DSL.name("position"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "0",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Position on map."
    );
    /**
     * The column <code>kalaazu.maps_portals.target_maps_id</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> TARGET_MAPS_ID = createField(
            DSL.name("target_maps_id"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.maps_portals.target_position</code>. Target position.
     */
    public final TableField<MapsPortalsRecord, Long> TARGET_POSITION = createField(
            DSL.name("target_position"),
            org.jooq.impl.SQLDataType.BIGINT.nullable(false)
                                            .defaultValue(org.jooq.impl.DSL.field(
                                                    "0",
                                                    org.jooq.impl.SQLDataType.BIGINT
                                            )),
            this,
            "Target position."
    );
    /**
     * The column <code>kalaazu.maps_portals.is_visible</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> IS_VISIBLE = createField(
            DSL.name("is_visible"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.maps_portals.is_working</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> IS_WORKING = createField(
            DSL.name("is_working"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );
    /**
     * The column <code>kalaazu.maps_portals.gfx</code>.
     */
    public final TableField<MapsPortalsRecord, Byte> GFX = createField(
            DSL.name("gfx"),
            org.jooq.impl.SQLDataType.TINYINT.nullable(false)
                                             .defaultValue(org.jooq.impl.DSL.field(
                                                     "1",
                                                     org.jooq.impl.SQLDataType.TINYINT
                                             )),
            this,
            ""
    );

    /**
     * Create a <code>kalaazu.maps_portals</code> table reference
     */
    public MapsPortals() {
        this(DSL.name("maps_portals"), null);
    }

    /**
     * Create an aliased <code>kalaazu.maps_portals</code> table reference
     */
    public MapsPortals(String alias) {
        this(DSL.name(alias), MAPS_PORTALS);
    }

    /**
     * Create an aliased <code>kalaazu.maps_portals</code> table reference
     */
    public MapsPortals(Name alias) {
        this(alias, MAPS_PORTALS);
    }

    private MapsPortals(Name alias, Table<MapsPortalsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapsPortals(Name alias, Table<MapsPortalsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Portals on map."));
    }

    public <O extends Record> MapsPortals(Table<O> child, ForeignKey<O, MapsPortalsRecord> key) {
        super(child, key, MAPS_PORTALS);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapsPortalsRecord> getRecordType() {
        return MapsPortalsRecord.class;
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(
                Indexes.MAPS_PORTALS_MAPS_PORTALS_LEVELS_ID_IDX,
                Indexes.MAPS_PORTALS_MAPS_PORTALS_MAPS_ID_IDX,
                Indexes.MAPS_PORTALS_MAPS_PORTALS_TARGET_MAPS_ID_IDX,
                Indexes.MAPS_PORTALS_PRIMARY
        );
    }

    @Override
    public Identity<MapsPortalsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_MAPS_PORTALS;
    }

    @Override
    public UniqueKey<MapsPortalsRecord> getPrimaryKey() {
        return Keys.KEY_MAPS_PORTALS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MapsPortalsRecord>> getKeys() {
        return Arrays.<UniqueKey<MapsPortalsRecord>>asList(Keys.KEY_MAPS_PORTALS_PRIMARY);
    }

    @Override
    public List<ForeignKey<MapsPortalsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapsPortalsRecord, ?>>asList(Keys.MAPS_PORTALS_MAPS, Keys.MAPS_PORTALS_TARGET_MAPS);
    }

    public Maps mapsPortalsMaps() {
        return new Maps(this, Keys.MAPS_PORTALS_MAPS);
    }

    public Maps mapsPortalsTargetMaps() {
        return new Maps(this, Keys.MAPS_PORTALS_TARGET_MAPS);
    }

    @Override
    public MapsPortals as(String alias) {
        return new MapsPortals(DSL.name(alias), this);
    }

    @Override
    public MapsPortals as(Name alias) {
        return new MapsPortals(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapsPortals rename(String name) {
        return new MapsPortals(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapsPortals rename(Name name) {
        return new MapsPortals(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Byte, Byte, Byte, Long, Byte, Long, Byte, Byte, Byte> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
