package com.kalaazu.persistence.database.entities.accounts_banks.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsBanks;
import com.speedment.common.annotation.GeneratedCode;
import com.kalaazu.persistence.database.entities.Manager;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * AccountsBanks}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsBanksImpl implements AccountsBanks {

    private int  id;

    private int  accountsId;

    private long credits;

    private long uridium;

    private byte taxCredits;

    private byte taxUridium;

    protected GeneratedAccountsBanksImpl() {

    }

    @Override
    public Integer getId() {
        return id;
    }

    @Override
    public int getAccountsId() {
        return accountsId;
    }

    @Override
    public long getCredits() {
        return credits;
    }

    @Override
    public long getUridium() {
        return uridium;
    }

    @Override
    public byte getTaxCredits() {
        return taxCredits;
    }

    @Override
    public byte getTaxUridium() {
        return taxUridium;
    }

    @Override
    public AccountsBanks setId(int id) {
        this.id = id;
        return this;
    }

    @Override
    public AccountsBanks setAccountsId(int accountsId) {
        this.accountsId = accountsId;
        return this;
    }

    @Override
    public AccountsBanks setCredits(long credits) {
        this.credits = credits;
        return this;
    }

    @Override
    public AccountsBanks setUridium(long uridium) {
        this.uridium = uridium;
        return this;
    }

    @Override
    public AccountsBanks setTaxCredits(byte taxCredits) {
        this.taxCredits = taxCredits;
        return this;
    }

    @Override
    public AccountsBanks setTaxUridium(byte taxUridium) {
        this.taxUridium = taxUridium;
        return this;
    }

    @Override
    public Accounts findAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(getAccountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("accountsId = " + Objects.toString(getAccountsId()));
        sj.add("credits = " + Objects.toString(getCredits()));
        sj.add("uridium = " + Objects.toString(getUridium()));
        sj.add("taxCredits = " + Objects.toString(getTaxCredits()));
        sj.add("taxUridium = " + Objects.toString(getTaxUridium()));
        return "AccountsBanksImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof AccountsBanks)) {
            return false;
        }
        final AccountsBanks thatAccountsBanks = (AccountsBanks) that;
        if (this.getId() != thatAccountsBanks.getId()) {
            return false;
        }
        if (this.getAccountsId() != thatAccountsBanks.getAccountsId()) {
            return false;
        }
        if (this.getCredits() != thatAccountsBanks.getCredits()) {
            return false;
        }
        if (this.getUridium() != thatAccountsBanks.getUridium()) {
            return false;
        }
        if (this.getTaxCredits() != thatAccountsBanks.getTaxCredits()) {
            return false;
        }
        if (this.getTaxUridium() != thatAccountsBanks.getTaxUridium()) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getAccountsId());
        hash = 31 * hash + Long.hashCode(getCredits());
        hash = 31 * hash + Long.hashCode(getUridium());
        hash = 31 * hash + Byte.hashCode(getTaxCredits());
        hash = 31 * hash + Byte.hashCode(getTaxUridium());
        return hash;
    }
}