package com.kalaazu.persistence.database.entities.accounts_banks.generated;

import com.kalaazu.persistence.database.entities.Accounts;
import com.kalaazu.persistence.database.entities.AccountsBanks;
import com.kalaazu.persistence.database.entities.Manager;
import com.speedment.common.annotation.GeneratedCode;
import lombok.Data;

import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * AccountsBanks}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
@Data
public abstract class GeneratedAccountsBanksImpl implements AccountsBanks {

    private Integer id;

    private int accountsId;

    private long credits;

    private long uridium;

    private byte taxCredits;

    private byte taxUridium;

    protected GeneratedAccountsBanksImpl() {

    }

    @Override
    public Accounts findAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream()
                             .filter(Accounts.ID.equal(accountsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof AccountsBanks)) {
            return false;
        }
        final AccountsBanks thatAccountsBanks = (AccountsBanks) that;
        if (this.id() != thatAccountsBanks.id()) {
            return false;
        }
        if (this.accountsId() != thatAccountsBanks.accountsId()) {
            return false;
        }
        if (this.credits() != thatAccountsBanks.credits()) {
            return false;
        }
        if (this.uridium() != thatAccountsBanks.uridium()) {
            return false;
        }
        if (this.taxCredits() != thatAccountsBanks.taxCredits()) {
            return false;
        }
        if (this.taxUridium() != thatAccountsBanks.taxUridium()) {
            return false;
        }
        return true;
    }
}