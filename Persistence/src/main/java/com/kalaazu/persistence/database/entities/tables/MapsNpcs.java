/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.MapsNpcsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Many to many relation table.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MapsNpcs extends TableImpl<MapsNpcsRecord> {

    private static final long serialVersionUID = -436478081;

    /**
     * The reference instance of <code>kalaazu.maps_npcs</code>
     */
    public static final MapsNpcs MAPS_NPCS = new MapsNpcs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MapsNpcsRecord> getRecordType() {
        return MapsNpcsRecord.class;
    }

    /**
     * The column <code>kalaazu.maps_npcs.id</code>. Primary Key.
     */
    public final TableField<MapsNpcsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.maps_npcs.maps_id</code>. Map ID.
     */
    public final TableField<MapsNpcsRecord, Byte> MAPS_ID = createField(DSL.name("maps_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "Map ID.");

    /**
     * The column <code>kalaazu.maps_npcs.npcs_id</code>. NPC ID.
     */
    public final TableField<MapsNpcsRecord, Byte> NPCS_ID = createField(DSL.name("npcs_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "NPC ID.");

    /**
     * The column <code>kalaazu.maps_npcs.amount</code>. Amount of NPCs on map
     */
    public final TableField<MapsNpcsRecord, Byte> AMOUNT = createField(DSL.name("amount"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "Amount of NPCs on map");

    /**
     * Create a <code>kalaazu.maps_npcs</code> table reference
     */
    public MapsNpcs() {
        this(DSL.name("maps_npcs"), null);
    }

    /**
     * Create an aliased <code>kalaazu.maps_npcs</code> table reference
     */
    public MapsNpcs(String alias) {
        this(DSL.name(alias), MAPS_NPCS);
    }

    /**
     * Create an aliased <code>kalaazu.maps_npcs</code> table reference
     */
    public MapsNpcs(Name alias) {
        this(alias, MAPS_NPCS);
    }

    private MapsNpcs(Name alias, Table<MapsNpcsRecord> aliased) {
        this(alias, aliased, null);
    }

    private MapsNpcs(Name alias, Table<MapsNpcsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Many to many relation table."));
    }

    public <O extends Record> MapsNpcs(Table<O> child, ForeignKey<O, MapsNpcsRecord> key) {
        super(child, key, MAPS_NPCS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MAPS_NPCS_MAPS_NPCS_MAPS_ID_IDX, Indexes.MAPS_NPCS_MAPS_NPCS_NPCS_ID_IDX, Indexes.MAPS_NPCS_PRIMARY);
    }

    @Override
    public Identity<MapsNpcsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_MAPS_NPCS;
    }

    @Override
    public UniqueKey<MapsNpcsRecord> getPrimaryKey() {
        return Keys.KEY_MAPS_NPCS_PRIMARY;
    }

    @Override
    public List<UniqueKey<MapsNpcsRecord>> getKeys() {
        return Arrays.<UniqueKey<MapsNpcsRecord>>asList(Keys.KEY_MAPS_NPCS_PRIMARY);
    }

    @Override
    public List<ForeignKey<MapsNpcsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MapsNpcsRecord, ?>>asList(Keys.MAPS_NPCS_MAPS, Keys.MAPS_NPCS_NPCS);
    }

    public Maps maps() {
        return new Maps(this, Keys.MAPS_NPCS_MAPS);
    }

    public Npcs npcs() {
        return new Npcs(this, Keys.MAPS_NPCS_NPCS);
    }

    @Override
    public MapsNpcs as(String alias) {
        return new MapsNpcs(DSL.name(alias), this);
    }

    @Override
    public MapsNpcs as(Name alias) {
        return new MapsNpcs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MapsNpcs rename(String name) {
        return new MapsNpcs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MapsNpcs rename(Name name) {
        return new MapsNpcs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Byte, Byte, Byte, Byte> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
