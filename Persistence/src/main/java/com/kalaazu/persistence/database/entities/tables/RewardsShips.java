/*
 * This file is generated by jOOQ.
 */
package com.kalaazu.persistence.database.entities.tables;


import com.kalaazu.persistence.database.entities.Indexes;
import com.kalaazu.persistence.database.entities.Kalaazu;
import com.kalaazu.persistence.database.entities.Keys;
import com.kalaazu.persistence.database.entities.tables.records.RewardsShipsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Many to many relations.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RewardsShips extends TableImpl<RewardsShipsRecord> {

    private static final long serialVersionUID = 328556195;

    /**
     * The reference instance of <code>kalaazu.rewards_ships</code>
     */
    public static final RewardsShips REWARDS_SHIPS = new RewardsShips();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RewardsShipsRecord> getRecordType() {
        return RewardsShipsRecord.class;
    }

    /**
     * The column <code>kalaazu.rewards_ships.id</code>. Primary Key.
     */
    public final TableField<RewardsShipsRecord, Byte> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).identity(true), this, "Primary Key.");

    /**
     * The column <code>kalaazu.rewards_ships.ships_id</code>. Ship ID.
     */
    public final TableField<RewardsShipsRecord, Byte> SHIPS_ID = createField(DSL.name("ships_id"), org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "Ship ID.");

    /**
     * The column <code>kalaazu.rewards_ships.rewards_id</code>. Reward to award.
     */
    public final TableField<RewardsShipsRecord, Short> REWARDS_ID = createField(DSL.name("rewards_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "Reward to award.");

    /**
     * Create a <code>kalaazu.rewards_ships</code> table reference
     */
    public RewardsShips() {
        this(DSL.name("rewards_ships"), null);
    }

    /**
     * Create an aliased <code>kalaazu.rewards_ships</code> table reference
     */
    public RewardsShips(String alias) {
        this(DSL.name(alias), REWARDS_SHIPS);
    }

    /**
     * Create an aliased <code>kalaazu.rewards_ships</code> table reference
     */
    public RewardsShips(Name alias) {
        this(alias, REWARDS_SHIPS);
    }

    private RewardsShips(Name alias, Table<RewardsShipsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RewardsShips(Name alias, Table<RewardsShipsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Many to many relations."));
    }

    public <O extends Record> RewardsShips(Table<O> child, ForeignKey<O, RewardsShipsRecord> key) {
        super(child, key, REWARDS_SHIPS);
    }

    @Override
    public Schema getSchema() {
        return Kalaazu.KALAAZU;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REWARDS_SHIPS_PRIMARY, Indexes.REWARDS_SHIPS_REWARDS_SHIPS_REWARDS_ID_IDX, Indexes.REWARDS_SHIPS_REWARDS_SHIPS_SHIPS_ID_IDX);
    }

    @Override
    public Identity<RewardsShipsRecord, Byte> getIdentity() {
        return Keys.IDENTITY_REWARDS_SHIPS;
    }

    @Override
    public UniqueKey<RewardsShipsRecord> getPrimaryKey() {
        return Keys.KEY_REWARDS_SHIPS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RewardsShipsRecord>> getKeys() {
        return Arrays.<UniqueKey<RewardsShipsRecord>>asList(Keys.KEY_REWARDS_SHIPS_PRIMARY);
    }

    @Override
    public List<ForeignKey<RewardsShipsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RewardsShipsRecord, ?>>asList(Keys.REWARDS_SHIPS_SHIPS, Keys.REWARDS_SHIPS_REWARDS);
    }

    public Ships ships() {
        return new Ships(this, Keys.REWARDS_SHIPS_SHIPS);
    }

    public Rewards rewards() {
        return new Rewards(this, Keys.REWARDS_SHIPS_REWARDS);
    }

    @Override
    public RewardsShips as(String alias) {
        return new RewardsShips(DSL.name(alias), this);
    }

    @Override
    public RewardsShips as(Name alias) {
        return new RewardsShips(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RewardsShips rename(String name) {
        return new RewardsShips(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RewardsShips rename(Name name) {
        return new RewardsShips(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Byte, Byte, Short> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
