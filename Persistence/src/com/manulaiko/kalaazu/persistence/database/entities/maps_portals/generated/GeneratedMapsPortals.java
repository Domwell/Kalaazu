package com.manulaiko.kalaazu.persistence.database.entities.maps_portals.generated;

import com.manulaiko.kalaazu.persistence.database.entities.maps.Maps;
import com.manulaiko.kalaazu.persistence.database.entities.maps_portals.MapsPortals;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.field.BooleanField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.maps_portals.MapsPortals}-interface
 * representing entities of the {@code maps_portals}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedMapsPortals {
    
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getId()} method.
     */
    IntField<MapsPortals, Integer> ID = IntField.create(
        Identifier.ID,
        MapsPortals::getId,
        MapsPortals::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getLevelsId()} method.
     */
    IntField<MapsPortals, Integer> LEVELS_ID = IntField.create(
        Identifier.LEVELS_ID,
        MapsPortals::getLevelsId,
        MapsPortals::setLevelsId,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getMapsId()} method.
     */
    IntForeignKeyField<MapsPortals, Integer, Maps> MAPS_ID = IntForeignKeyField.create(
        Identifier.MAPS_ID,
        MapsPortals::getMapsId,
        MapsPortals::setMapsId,
        Maps.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getPosition()} method.
     */
    StringField<MapsPortals, String> POSITION = StringField.create(
        Identifier.POSITION,
        MapsPortals::getPosition,
        MapsPortals::setPosition,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getTargetMapsId()} method.
     */
    IntForeignKeyField<MapsPortals, Integer, Maps> TARGET_MAPS_ID = IntForeignKeyField.create(
        Identifier.TARGET_MAPS_ID,
        MapsPortals::getTargetMapsId,
        MapsPortals::setTargetMapsId,
        Maps.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getTargetPosition()} method.
     */
    StringField<MapsPortals, String> TARGET_POSITION = StringField.create(
        Identifier.TARGET_POSITION,
        MapsPortals::getTargetPosition,
        MapsPortals::setTargetPosition,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getIsVisible()} method.
     */
    BooleanField<MapsPortals, Boolean> IS_VISIBLE = BooleanField.create(
        Identifier.IS_VISIBLE,
        MapsPortals::getIsVisible,
        MapsPortals::setIsVisible,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getIsWorking()} method.
     */
    BooleanField<MapsPortals, Boolean> IS_WORKING = BooleanField.create(
        Identifier.IS_WORKING,
        MapsPortals::getIsWorking,
        MapsPortals::setIsWorking,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link MapsPortals} field that can be
     * obtained using the {@link MapsPortals#getGfx()} method.
     */
    IntField<MapsPortals, Integer> GFX = IntField.create(
        Identifier.GFX,
        MapsPortals::getGfx,
        MapsPortals::setGfx,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this MapsPortals. The id field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.id.
     * 
     * @return the id of this MapsPortals
     */
    int getId();
    
    /**
     * Returns the levelsId of this MapsPortals. The levelsId field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.levels_id.
     * 
     * @return the levelsId of this MapsPortals
     */
    int getLevelsId();
    
    /**
     * Returns the mapsId of this MapsPortals. The mapsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.maps_id.
     * 
     * @return the mapsId of this MapsPortals
     */
    int getMapsId();
    
    /**
     * Returns the position of this MapsPortals. The position field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.position.
     * 
     * @return the position of this MapsPortals
     */
    String getPosition();
    
    /**
     * Returns the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     * 
     * @return the targetMapsId of this MapsPortals
     */
    int getTargetMapsId();
    
    /**
     * Returns the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     * 
     * @return the targetPosition of this MapsPortals
     */
    String getTargetPosition();
    
    /**
     * Returns the isVisible of this MapsPortals. The isVisible field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_visible.
     * 
     * @return the isVisible of this MapsPortals
     */
    boolean getIsVisible();
    
    /**
     * Returns the isWorking of this MapsPortals. The isWorking field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.is_working.
     * 
     * @return the isWorking of this MapsPortals
     */
    boolean getIsWorking();
    
    /**
     * Returns the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     * 
     * @return the gfx of this MapsPortals
     */
    int getGfx();
    
    /**
     * Sets the id of this MapsPortals. The id field corresponds to the database
     * column kalaazu.kalaazu.maps_portals.id.
     * 
     * @param id to set of this MapsPortals
     * @return   this MapsPortals instance
     */
    MapsPortals setId(int id);
    
    /**
     * Sets the levelsId of this MapsPortals. The levelsId field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.levels_id.
     * 
     * @param levelsId to set of this MapsPortals
     * @return         this MapsPortals instance
     */
    MapsPortals setLevelsId(int levelsId);
    
    /**
     * Sets the mapsId of this MapsPortals. The mapsId field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.maps_id.
     * 
     * @param mapsId to set of this MapsPortals
     * @return       this MapsPortals instance
     */
    MapsPortals setMapsId(int mapsId);
    
    /**
     * Sets the position of this MapsPortals. The position field corresponds to
     * the database column kalaazu.kalaazu.maps_portals.position.
     * 
     * @param position to set of this MapsPortals
     * @return         this MapsPortals instance
     */
    MapsPortals setPosition(String position);
    
    /**
     * Sets the targetMapsId of this MapsPortals. The targetMapsId field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_maps_id.
     * 
     * @param targetMapsId to set of this MapsPortals
     * @return             this MapsPortals instance
     */
    MapsPortals setTargetMapsId(int targetMapsId);
    
    /**
     * Sets the targetPosition of this MapsPortals. The targetPosition field
     * corresponds to the database column
     * kalaazu.kalaazu.maps_portals.target_position.
     * 
     * @param targetPosition to set of this MapsPortals
     * @return               this MapsPortals instance
     */
    MapsPortals setTargetPosition(String targetPosition);
    
    /**
     * Sets the isVisible of this MapsPortals. The isVisible field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_visible.
     * 
     * @param isVisible to set of this MapsPortals
     * @return          this MapsPortals instance
     */
    MapsPortals setIsVisible(boolean isVisible);
    
    /**
     * Sets the isWorking of this MapsPortals. The isWorking field corresponds
     * to the database column kalaazu.kalaazu.maps_portals.is_working.
     * 
     * @param isWorking to set of this MapsPortals
     * @return          this MapsPortals instance
     */
    MapsPortals setIsWorking(boolean isWorking);
    
    /**
     * Sets the gfx of this MapsPortals. The gfx field corresponds to the
     * database column kalaazu.kalaazu.maps_portals.gfx.
     * 
     * @param gfx to set of this MapsPortals
     * @return    this MapsPortals instance
     */
    MapsPortals setGfx(int gfx);
    
    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Maps findMapsId(Manager<Maps> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Maps. If no such Maps
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Maps findTargetMapsId(Manager<Maps> foreignManager);
    
    enum Identifier implements ColumnIdentifier<MapsPortals> {
        
        ID              ("id"),
        LEVELS_ID       ("levels_id"),
        MAPS_ID         ("maps_id"),
        POSITION        ("position"),
        TARGET_MAPS_ID  ("target_maps_id"),
        TARGET_POSITION ("target_position"),
        IS_VISIBLE      ("is_visible"),
        IS_WORKING      ("is_working"),
        GFX             ("gfx");
        
        private final String columnName;
        private final TableIdentifier<MapsPortals> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "kalaazu";
        }
        
        @Override
        public String getSchemaName() {
            return "kalaazu";
        }
        
        @Override
        public String getTableName() {
            return "maps_portals";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<MapsPortals> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}