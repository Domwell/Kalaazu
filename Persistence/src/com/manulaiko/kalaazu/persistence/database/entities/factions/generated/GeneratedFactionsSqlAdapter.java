package com.manulaiko.kalaazu.persistence.database.entities.factions.generated;

import com.manulaiko.kalaazu.persistence.database.entities.factions.Factions;
import com.manulaiko.kalaazu.persistence.database.entities.factions.FactionsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.exception.SpeedmentException;
import java.sql.ResultSet;
import java.sql.SQLException;
import static com.speedment.common.injector.State.RESOLVED;

/**
 * The generated Sql Adapter for a {@link
 * com.manulaiko.kalaazu.persistence.database.entities.factions.Factions} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedFactionsSqlAdapter {
    
    private final TableIdentifier<Factions> tableIdentifier;
    
    protected GeneratedFactionsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "factions");
    }
    
    @ExecuteBefore(RESOLVED)
    void installMethodName(@WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }
    
    protected Factions apply(ResultSet resultSet) throws SpeedmentException {
        final Factions entity = createEntity();
        try {
            entity.setId(               resultSet.getInt(1)     );
            entity.setName(             resultSet.getString(2)  );
            entity.setTag(              resultSet.getString(3)  );
            entity.setDescription(      resultSet.getString(4)  );
            entity.setIsPublic(         resultSet.getBoolean(5) );
            entity.setLowMapsId(        resultSet.getInt(6)     );
            entity.setLowMapsPosition(  resultSet.getString(7)  );
            entity.setHighMapsId(       resultSet.getInt(8)     );
            entity.setHighMapsPosition( resultSet.getString(9)  );
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    protected FactionsImpl createEntity() {
        return new FactionsImpl();
    }
}