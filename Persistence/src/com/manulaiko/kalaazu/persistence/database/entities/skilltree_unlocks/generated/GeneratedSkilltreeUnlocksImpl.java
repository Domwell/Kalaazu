package com.manulaiko.kalaazu.persistence.database.entities.skilltree_unlocks.generated;

import com.manulaiko.kalaazu.persistence.database.entities.skilltree_levels.SkilltreeLevels;
import com.manulaiko.kalaazu.persistence.database.entities.skilltree_unlocks.SkilltreeUnlocks;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.skilltree_unlocks.SkilltreeUnlocks}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSkilltreeUnlocksImpl implements SkilltreeUnlocks {
    
    private int id;
    private int upgradeSkilltreeLevelsId;
    private int requiredSkilltreeLevelsId;
    
    protected GeneratedSkilltreeUnlocksImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getUpgradeSkilltreeLevelsId() {
        return upgradeSkilltreeLevelsId;
    }
    
    @Override
    public int getRequiredSkilltreeLevelsId() {
        return requiredSkilltreeLevelsId;
    }
    
    @Override
    public SkilltreeUnlocks setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public SkilltreeUnlocks setUpgradeSkilltreeLevelsId(int upgradeSkilltreeLevelsId) {
        this.upgradeSkilltreeLevelsId = upgradeSkilltreeLevelsId;
        return this;
    }
    
    @Override
    public SkilltreeUnlocks setRequiredSkilltreeLevelsId(int requiredSkilltreeLevelsId) {
        this.requiredSkilltreeLevelsId = requiredSkilltreeLevelsId;
        return this;
    }
    
    @Override
    public SkilltreeLevels findUpgradeSkilltreeLevelsId(Manager<SkilltreeLevels> foreignManager) {
        return foreignManager.stream().filter(SkilltreeLevels.ID.equal(getUpgradeSkilltreeLevelsId())).findAny().orElse(null);
    }
    
    @Override
    public SkilltreeLevels findRequiredSkilltreeLevelsId(Manager<SkilltreeLevels> foreignManager) {
        return foreignManager.stream().filter(SkilltreeLevels.ID.equal(getRequiredSkilltreeLevelsId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                        + Objects.toString(getId()));
        sj.add("upgradeSkilltreeLevelsId = "  + Objects.toString(getUpgradeSkilltreeLevelsId()));
        sj.add("requiredSkilltreeLevelsId = " + Objects.toString(getRequiredSkilltreeLevelsId()));
        return "SkilltreeUnlocksImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof SkilltreeUnlocks)) { return false; }
        final SkilltreeUnlocks thatSkilltreeUnlocks = (SkilltreeUnlocks)that;
        if (this.getId() != thatSkilltreeUnlocks.getId()) {return false; }
        if (this.getUpgradeSkilltreeLevelsId() != thatSkilltreeUnlocks.getUpgradeSkilltreeLevelsId()) {return false; }
        if (this.getRequiredSkilltreeLevelsId() != thatSkilltreeUnlocks.getRequiredSkilltreeLevelsId()) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getUpgradeSkilltreeLevelsId());
        hash = 31 * hash + Integer.hashCode(getRequiredSkilltreeLevelsId());
        return hash;
    }
}