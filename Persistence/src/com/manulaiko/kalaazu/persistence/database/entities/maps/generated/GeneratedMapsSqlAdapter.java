package com.manulaiko.kalaazu.persistence.database.entities.maps.generated;

import com.manulaiko.kalaazu.persistence.database.entities.maps.Maps;
import com.manulaiko.kalaazu.persistence.database.entities.maps.MapsImpl;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getByte;

/**
 * The generated Sql Adapter for a {@link
 * com.manulaiko.kalaazu.persistence.database.entities.maps.Maps} entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMapsSqlAdapter {

    private final TableIdentifier<Maps>                 tableIdentifier;

    private       SqlTypeMapperHelper<Integer, Boolean> isPvpHelper;

    private       SqlTypeMapperHelper<Integer, Boolean> isStarterHelper;

    protected GeneratedMapsSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "maps");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected Maps apply(ResultSet resultSet) throws SpeedmentException {
        final Maps entity = createEntity();
        try {
            entity.setId(resultSet.getByte(1));
            entity.setName(resultSet.getString(2));
            entity.setFactionsId(getByte(resultSet, 3));
            entity.setIsPvp(isPvpHelper.apply(resultSet.getInt(4)));
            entity.setIsStarter(isStarterHelper.apply(resultSet.getInt(5)));
            entity.setLimits(resultSet.getLong(6));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected MapsImpl createEntity() {
        return new MapsImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        isPvpHelper = SqlTypeMapperHelper.create(project, Maps.IS_PVP, Maps.class);
        isStarterHelper = SqlTypeMapperHelper.create(project, Maps.IS_STARTER, Maps.class);
    }
}