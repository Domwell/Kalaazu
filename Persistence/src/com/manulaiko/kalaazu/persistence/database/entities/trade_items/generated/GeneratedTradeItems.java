package com.manulaiko.kalaazu.persistence.database.entities.trade_items.generated;

import com.manulaiko.kalaazu.persistence.database.entities.accounts.Accounts;
import com.manulaiko.kalaazu.persistence.database.entities.items.Items;
import com.manulaiko.kalaazu.persistence.database.entities.trade_items.TradeItems;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.trade_items.TradeItems}-interface
 * representing entities of the {@code trade_items}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedTradeItems {
    
    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#getId()} method.
     */
    IntField<TradeItems, Integer> ID = IntField.create(
        Identifier.ID,
        TradeItems::getId,
        TradeItems::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#getItemsId()} method.
     */
    IntForeignKeyField<TradeItems, Integer, Items> ITEMS_ID = IntForeignKeyField.create(
        Identifier.ITEMS_ID,
        TradeItems::getItemsId,
        TradeItems::setItemsId,
        Items.ID,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#getAccountsId()} method.
     */
    ComparableForeignKeyField<TradeItems, Integer, Integer, Accounts> ACCOUNTS_ID = ComparableForeignKeyField.create(
        Identifier.ACCOUNTS_ID,
        o -> OptionalUtil.unwrap(o.getAccountsId()),
        TradeItems::setAccountsId,
        Accounts.ID,
        TypeMapper.identity(),
        false
    );
    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#getPrice()} method.
     */
    IntField<TradeItems, Integer> PRICE = IntField.create(
        Identifier.PRICE,
        TradeItems::getPrice,
        TradeItems::setPrice,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link TradeItems} field that can be
     * obtained using the {@link TradeItems#getCategory()} method.
     */
    IntField<TradeItems, Integer> CATEGORY = IntField.create(
        Identifier.CATEGORY,
        TradeItems::getCategory,
        TradeItems::setCategory,
        TypeMapper.primitive(),
        false
    );
    
    /**
     * Returns the id of this TradeItems. The id field corresponds to the
     * database column kalaazu.kalaazu.trade_items.id.
     * 
     * @return the id of this TradeItems
     */
    int getId();
    
    /**
     * Returns the itemsId of this TradeItems. The itemsId field corresponds to
     * the database column kalaazu.kalaazu.trade_items.items_id.
     * 
     * @return the itemsId of this TradeItems
     */
    int getItemsId();
    
    /**
     * Returns the accountsId of this TradeItems. The accountsId field
     * corresponds to the database column
     * kalaazu.kalaazu.trade_items.accounts_id.
     * 
     * @return the accountsId of this TradeItems
     */
    OptionalInt getAccountsId();
    
    /**
     * Returns the price of this TradeItems. The price field corresponds to the
     * database column kalaazu.kalaazu.trade_items.price.
     * 
     * @return the price of this TradeItems
     */
    int getPrice();
    
    /**
     * Returns the category of this TradeItems. The category field corresponds
     * to the database column kalaazu.kalaazu.trade_items.category.
     * 
     * @return the category of this TradeItems
     */
    int getCategory();
    
    /**
     * Sets the id of this TradeItems. The id field corresponds to the database
     * column kalaazu.kalaazu.trade_items.id.
     * 
     * @param id to set of this TradeItems
     * @return   this TradeItems instance
     */
    TradeItems setId(int id);
    
    /**
     * Sets the itemsId of this TradeItems. The itemsId field corresponds to the
     * database column kalaazu.kalaazu.trade_items.items_id.
     * 
     * @param itemsId to set of this TradeItems
     * @return        this TradeItems instance
     */
    TradeItems setItemsId(int itemsId);
    
    /**
     * Sets the accountsId of this TradeItems. The accountsId field corresponds
     * to the database column kalaazu.kalaazu.trade_items.accounts_id.
     * 
     * @param accountsId to set of this TradeItems
     * @return           this TradeItems instance
     */
    TradeItems setAccountsId(Integer accountsId);
    
    /**
     * Sets the price of this TradeItems. The price field corresponds to the
     * database column kalaazu.kalaazu.trade_items.price.
     * 
     * @param price to set of this TradeItems
     * @return      this TradeItems instance
     */
    TradeItems setPrice(int price);
    
    /**
     * Sets the category of this TradeItems. The category field corresponds to
     * the database column kalaazu.kalaazu.trade_items.category.
     * 
     * @param category to set of this TradeItems
     * @return         this TradeItems instance
     */
    TradeItems setCategory(int category);
    
    /**
     * Queries the specified manager for the referenced Items. If no such Items
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Items findItemsId(Manager<Items> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Accounts. If no such
     * Accounts exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Accounts> findAccountsId(Manager<Accounts> foreignManager);
    
    enum Identifier implements ColumnIdentifier<TradeItems> {
        
        ID          ("id"),
        ITEMS_ID    ("items_id"),
        ACCOUNTS_ID ("accounts_id"),
        PRICE       ("price"),
        CATEGORY    ("category");
        
        private final String columnName;
        private final TableIdentifier<TradeItems> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "kalaazu";
        }
        
        @Override
        public String getSchemaName() {
            return "kalaazu";
        }
        
        @Override
        public String getTableName() {
            return "trade_items";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<TradeItems> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}