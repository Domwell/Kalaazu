package com.manulaiko.kalaazu.persistence.database.entities.skylab_modules.generated;

import com.manulaiko.kalaazu.persistence.database.entities.skylab_modules.SkylabModules;
import com.speedment.common.annotation.GeneratedCode;
import java.math.BigDecimal;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.skylab_modules.SkylabModules}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedSkylabModulesImpl implements SkylabModules {
    
    private int id;
    private String name;
    private BigDecimal productionFactor;
    private int productionBase;
    private BigDecimal storageFactor;
    private int storageBase;
    private BigDecimal upgradeFactor;
    private int upgradeBase;
    private BigDecimal energyFactor;
    private int energyBase;
    
    protected GeneratedSkylabModulesImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public BigDecimal getProductionFactor() {
        return productionFactor;
    }
    
    @Override
    public int getProductionBase() {
        return productionBase;
    }
    
    @Override
    public BigDecimal getStorageFactor() {
        return storageFactor;
    }
    
    @Override
    public int getStorageBase() {
        return storageBase;
    }
    
    @Override
    public BigDecimal getUpgradeFactor() {
        return upgradeFactor;
    }
    
    @Override
    public int getUpgradeBase() {
        return upgradeBase;
    }
    
    @Override
    public BigDecimal getEnergyFactor() {
        return energyFactor;
    }
    
    @Override
    public int getEnergyBase() {
        return energyBase;
    }
    
    @Override
    public SkylabModules setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public SkylabModules setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public SkylabModules setProductionFactor(BigDecimal productionFactor) {
        this.productionFactor = productionFactor;
        return this;
    }
    
    @Override
    public SkylabModules setProductionBase(int productionBase) {
        this.productionBase = productionBase;
        return this;
    }
    
    @Override
    public SkylabModules setStorageFactor(BigDecimal storageFactor) {
        this.storageFactor = storageFactor;
        return this;
    }
    
    @Override
    public SkylabModules setStorageBase(int storageBase) {
        this.storageBase = storageBase;
        return this;
    }
    
    @Override
    public SkylabModules setUpgradeFactor(BigDecimal upgradeFactor) {
        this.upgradeFactor = upgradeFactor;
        return this;
    }
    
    @Override
    public SkylabModules setUpgradeBase(int upgradeBase) {
        this.upgradeBase = upgradeBase;
        return this;
    }
    
    @Override
    public SkylabModules setEnergyFactor(BigDecimal energyFactor) {
        this.energyFactor = energyFactor;
        return this;
    }
    
    @Override
    public SkylabModules setEnergyBase(int energyBase) {
        this.energyBase = energyBase;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "               + Objects.toString(getId()));
        sj.add("name = "             + Objects.toString(getName()));
        sj.add("productionFactor = " + Objects.toString(getProductionFactor()));
        sj.add("productionBase = "   + Objects.toString(getProductionBase()));
        sj.add("storageFactor = "    + Objects.toString(getStorageFactor()));
        sj.add("storageBase = "      + Objects.toString(getStorageBase()));
        sj.add("upgradeFactor = "    + Objects.toString(getUpgradeFactor()));
        sj.add("upgradeBase = "      + Objects.toString(getUpgradeBase()));
        sj.add("energyFactor = "     + Objects.toString(getEnergyFactor()));
        sj.add("energyBase = "       + Objects.toString(getEnergyBase()));
        return "SkylabModulesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof SkylabModules)) { return false; }
        final SkylabModules thatSkylabModules = (SkylabModules)that;
        if (this.getId() != thatSkylabModules.getId()) {return false; }
        if (!Objects.equals(this.getName(), thatSkylabModules.getName())) {return false; }
        if (!Objects.equals(this.getProductionFactor(), thatSkylabModules.getProductionFactor())) {return false; }
        if (this.getProductionBase() != thatSkylabModules.getProductionBase()) {return false; }
        if (!Objects.equals(this.getStorageFactor(), thatSkylabModules.getStorageFactor())) {return false; }
        if (this.getStorageBase() != thatSkylabModules.getStorageBase()) {return false; }
        if (!Objects.equals(this.getUpgradeFactor(), thatSkylabModules.getUpgradeFactor())) {return false; }
        if (this.getUpgradeBase() != thatSkylabModules.getUpgradeBase()) {return false; }
        if (!Objects.equals(this.getEnergyFactor(), thatSkylabModules.getEnergyFactor())) {return false; }
        if (this.getEnergyBase() != thatSkylabModules.getEnergyBase()) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getProductionFactor());
        hash = 31 * hash + Integer.hashCode(getProductionBase());
        hash = 31 * hash + Objects.hashCode(getStorageFactor());
        hash = 31 * hash + Integer.hashCode(getStorageBase());
        hash = 31 * hash + Objects.hashCode(getUpgradeFactor());
        hash = 31 * hash + Integer.hashCode(getUpgradeBase());
        hash = 31 * hash + Objects.hashCode(getEnergyFactor());
        hash = 31 * hash + Integer.hashCode(getEnergyBase());
        return hash;
    }
}