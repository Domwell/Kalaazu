package com.manulaiko.kalaazu.persistence.database.entities.moderators_logs.generated;

import com.manulaiko.kalaazu.persistence.database.entities.Moderators;
import com.manulaiko.kalaazu.persistence.database.entities.ModeratorsLogs;
import com.speedment.common.annotation.GeneratedCode;
import com.manulaiko.kalaazu.persistence.database.entities.Manager;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * ModeratorsLogs}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedModeratorsLogsImpl implements ModeratorsLogs {

    private int       id;

    private byte      moderatorsId;

    private Timestamp date;

    private String    type;

    private String    text;

    protected GeneratedModeratorsLogsImpl() {

    }

    @Override
    public Integer getId() {
        return id;
    }

    @Override
    public byte getModeratorsId() {
        return moderatorsId;
    }

    @Override
    public Timestamp getDate() {
        return date;
    }

    @Override
    public String getType() {
        return type;
    }

    @Override
    public String getText() {
        return text;
    }

    @Override
    public ModeratorsLogs setId(int id) {
        this.id = id;
        return this;
    }

    @Override
    public ModeratorsLogs setModeratorsId(byte moderatorsId) {
        this.moderatorsId = moderatorsId;
        return this;
    }

    @Override
    public ModeratorsLogs setDate(Timestamp date) {
        this.date = date;
        return this;
    }

    @Override
    public ModeratorsLogs setType(String type) {
        this.type = type;
        return this;
    }

    @Override
    public ModeratorsLogs setText(String text) {
        this.text = text;
        return this;
    }

    @Override
    public Moderators findModeratorsId(Manager<Moderators> foreignManager) {
        return foreignManager.stream()
                             .filter(Moderators.ID.equal(getModeratorsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("moderatorsId = " + Objects.toString(getModeratorsId()));
        sj.add("date = " + Objects.toString(getDate()));
        sj.add("type = " + Objects.toString(getType()));
        sj.add("text = " + Objects.toString(getText()));
        return "ModeratorsLogsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof ModeratorsLogs)) {
            return false;
        }
        final ModeratorsLogs thatModeratorsLogs = (ModeratorsLogs) that;
        if (this.getId() != thatModeratorsLogs.getId()) {
            return false;
        }
        if (this.getModeratorsId() != thatModeratorsLogs.getModeratorsId()) {
            return false;
        }
        if (!Objects.equals(this.getDate(), thatModeratorsLogs.getDate())) {
            return false;
        }
        if (!Objects.equals(this.getType(), thatModeratorsLogs.getType())) {
            return false;
        }
        if (!Objects.equals(this.getText(), thatModeratorsLogs.getText())) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Byte.hashCode(getModeratorsId());
        hash = 31 * hash + Objects.hashCode(getDate());
        hash = 31 * hash + Objects.hashCode(getType());
        hash = 31 * hash + Objects.hashCode(getText());
        return hash;
    }
}