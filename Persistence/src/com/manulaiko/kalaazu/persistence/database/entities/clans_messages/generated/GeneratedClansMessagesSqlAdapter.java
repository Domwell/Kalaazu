package com.manulaiko.kalaazu.persistence.database.entities.clans_messages.generated;

import com.manulaiko.kalaazu.persistence.database.entities.ClansMessages;
import com.manulaiko.kalaazu.persistence.database.entities.clans_messages.ClansMessagesImpl;
import com.manulaiko.kalaazu.persistence.database.mappers.MessageStatus;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.common.injector.annotation.ExecuteBefore;
import com.speedment.common.injector.annotation.WithState;
import com.speedment.runtime.config.Project;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.component.ProjectComponent;
import com.speedment.runtime.core.component.sql.SqlPersistenceComponent;
import com.speedment.runtime.core.component.sql.SqlStreamSupplierComponent;
import com.speedment.runtime.core.component.sql.SqlTypeMapperHelper;
import com.speedment.runtime.core.exception.SpeedmentException;

import java.sql.ResultSet;
import java.sql.SQLException;

import static com.speedment.common.injector.State.RESOLVED;
import static com.speedment.runtime.core.internal.util.sql.ResultSetUtil.getInt;

/**
 * The generated Sql Adapter for a {@link
 * ClansMessages}
 * entity.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedClansMessagesSqlAdapter {

    private final TableIdentifier<ClansMessages>           tableIdentifier;

    private       SqlTypeMapperHelper<Byte, MessageStatus> fromStatusHelper;

    private       SqlTypeMapperHelper<Byte, MessageStatus> toStatusHelper;

    protected GeneratedClansMessagesSqlAdapter() {
        this.tableIdentifier = TableIdentifier.of("kalaazu", "kalaazu", "clans_messages");
    }

    @ExecuteBefore(RESOLVED)
    void installMethodName(
            @WithState(RESOLVED) SqlStreamSupplierComponent streamSupplierComponent,
            @WithState(RESOLVED) SqlPersistenceComponent persistenceComponent
    ) {
        streamSupplierComponent.install(tableIdentifier, this::apply);
        persistenceComponent.install(tableIdentifier);
    }

    protected ClansMessages apply(ResultSet resultSet) throws SpeedmentException {
        final ClansMessages entity = createEntity();
        try {
            entity.setId(resultSet.getInt(1));
            entity.setClansId(resultSet.getInt(2));
            entity.setFromAccountsId(resultSet.getInt(3));
            entity.setFromStatus(fromStatusHelper.apply(resultSet.getByte(4)));
            entity.setToAccountsId(getInt(resultSet, 5));
            entity.setToStatus(toStatusHelper.apply(resultSet.getByte(6)));
            entity.setTitle(resultSet.getString(7));
            entity.setText(resultSet.getString(8));
            entity.setDate(resultSet.getTimestamp(9));
        } catch (final SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }

    protected ClansMessagesImpl createEntity() {
        return new ClansMessagesImpl();
    }

    @ExecuteBefore(RESOLVED)
    void createHelpers(ProjectComponent projectComponent) {
        final Project project = projectComponent.getProject();
        fromStatusHelper = SqlTypeMapperHelper.create(project, ClansMessages.FROM_STATUS, ClansMessages.class);
        toStatusHelper = SqlTypeMapperHelper.create(project, ClansMessages.TO_STATUS, ClansMessages.class);
    }
}