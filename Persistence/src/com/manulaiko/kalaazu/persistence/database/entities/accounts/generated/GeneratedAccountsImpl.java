package com.manulaiko.kalaazu.persistence.database.entities.accounts.generated;

import com.manulaiko.kalaazu.persistence.database.entities.Accounts;
import com.manulaiko.kalaazu.persistence.database.entities.AccountsHangars;
import com.manulaiko.kalaazu.persistence.database.entities.Clans;
import com.manulaiko.kalaazu.persistence.database.entities.Factions;
import com.manulaiko.kalaazu.persistence.database.entities.Levels;
import com.manulaiko.kalaazu.persistence.database.entities.Ranks;
import com.manulaiko.kalaazu.persistence.database.entities.Users;
import com.speedment.common.annotation.GeneratedCode;
import com.manulaiko.kalaazu.persistence.database.entities.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.sql.Timestamp;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * Accounts}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsImpl implements Accounts {

    private int       id;

    private int       usersId;

    private String    sessionId;

    private byte      levelsId;

    private Byte      factionsId;

    private Integer   accountsHangarsId;

    private Integer   clansId;

    private byte      ranksId;

    private String    name;

    private Timestamp banDate;

    private Timestamp premiumDate;

    private Timestamp date;

    private Timestamp lastLogin;

    private short     skillPointsTotal;

    private short     skillPointsFree;

    protected GeneratedAccountsImpl() {

    }

    @Override
    public Integer getId() {
        return id;
    }

    @Override
    public int getUsersId() {
        return usersId;
    }

    @Override
    public String getSessionId() {
        return sessionId;
    }

    @Override
    public byte getLevelsId() {
        return levelsId;
    }

    @Override
    public Optional<Byte> getFactionsId() {
        return Optional.ofNullable(factionsId);
    }

    @Override
    public OptionalInt getAccountsHangarsId() {
        return OptionalUtil.ofNullable(accountsHangarsId);
    }

    @Override
    public OptionalInt getClansId() {
        return OptionalUtil.ofNullable(clansId);
    }

    @Override
    public byte getRanksId() {
        return ranksId;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Optional<Timestamp> getBanDate() {
        return Optional.ofNullable(banDate);
    }

    @Override
    public Optional<Timestamp> getPremiumDate() {
        return Optional.ofNullable(premiumDate);
    }

    @Override
    public Timestamp getDate() {
        return date;
    }

    @Override
    public Optional<Timestamp> getLastLogin() {
        return Optional.ofNullable(lastLogin);
    }

    @Override
    public short getSkillPointsTotal() {
        return skillPointsTotal;
    }

    @Override
    public short getSkillPointsFree() {
        return skillPointsFree;
    }

    @Override
    public Accounts setId(int id) {
        this.id = id;
        return this;
    }

    @Override
    public Accounts setUsersId(int usersId) {
        this.usersId = usersId;
        return this;
    }

    @Override
    public Accounts setSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    @Override
    public Accounts setLevelsId(byte levelsId) {
        this.levelsId = levelsId;
        return this;
    }

    @Override
    public Accounts setFactionsId(Byte factionsId) {
        this.factionsId = factionsId;
        return this;
    }

    @Override
    public Accounts setAccountsHangarsId(Integer accountsHangarsId) {
        this.accountsHangarsId = accountsHangarsId;
        return this;
    }

    @Override
    public Accounts setClansId(Integer clansId) {
        this.clansId = clansId;
        return this;
    }

    @Override
    public Accounts setRanksId(byte ranksId) {
        this.ranksId = ranksId;
        return this;
    }

    @Override
    public Accounts setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public Accounts setBanDate(Timestamp banDate) {
        this.banDate = banDate;
        return this;
    }

    @Override
    public Accounts setPremiumDate(Timestamp premiumDate) {
        this.premiumDate = premiumDate;
        return this;
    }

    @Override
    public Accounts setDate(Timestamp date) {
        this.date = date;
        return this;
    }

    @Override
    public Accounts setLastLogin(Timestamp lastLogin) {
        this.lastLogin = lastLogin;
        return this;
    }

    @Override
    public Accounts setSkillPointsTotal(short skillPointsTotal) {
        this.skillPointsTotal = skillPointsTotal;
        return this;
    }

    @Override
    public Accounts setSkillPointsFree(short skillPointsFree) {
        this.skillPointsFree = skillPointsFree;
        return this;
    }

    @Override
    public Users findUsersId(Manager<Users> foreignManager) {
        return foreignManager.stream()
                             .filter(Users.ID.equal(getUsersId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Levels findLevelsId(Manager<Levels> foreignManager) {
        return foreignManager.stream()
                             .filter(Levels.ID.equal(getLevelsId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (getFactionsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Factions.ID.equal(getFactionsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<AccountsHangars> findAccountsHangarsId(Manager<AccountsHangars> foreignManager) {
        if (getAccountsHangarsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(AccountsHangars.ID.equal(getAccountsHangarsId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Clans> findClansId(Manager<Clans> foreignManager) {
        if (getClansId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Clans.ID.equal(getClansId().getAsInt()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Ranks findRanksId(Manager<Ranks> foreignManager) {
        return foreignManager.stream()
                             .filter(Ranks.ID.equal(getRanksId()))
                             .findAny()
                             .orElse(null);
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("usersId = " + Objects.toString(getUsersId()));
        sj.add("sessionId = " + Objects.toString(getSessionId()));
        sj.add("levelsId = " + Objects.toString(getLevelsId()));
        sj.add("factionsId = " + Objects.toString(OptionalUtil.unwrap(getFactionsId())));
        sj.add("accountsHangarsId = " + Objects.toString(OptionalUtil.unwrap(getAccountsHangarsId())));
        sj.add("clansId = " + Objects.toString(OptionalUtil.unwrap(getClansId())));
        sj.add("ranksId = " + Objects.toString(getRanksId()));
        sj.add("name = " + Objects.toString(getName()));
        sj.add("banDate = " + Objects.toString(OptionalUtil.unwrap(getBanDate())));
        sj.add("premiumDate = " + Objects.toString(OptionalUtil.unwrap(getPremiumDate())));
        sj.add("date = " + Objects.toString(getDate()));
        sj.add("lastLogin = " + Objects.toString(OptionalUtil.unwrap(getLastLogin())));
        sj.add("skillPointsTotal = " + Objects.toString(getSkillPointsTotal()));
        sj.add("skillPointsFree = " + Objects.toString(getSkillPointsFree()));
        return "AccountsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof Accounts)) {
            return false;
        }
        final Accounts thatAccounts = (Accounts) that;
        if (this.getId() != thatAccounts.getId()) {
            return false;
        }
        if (this.getUsersId() != thatAccounts.getUsersId()) {
            return false;
        }
        if (!Objects.equals(this.getSessionId(), thatAccounts.getSessionId())) {
            return false;
        }
        if (this.getLevelsId() != thatAccounts.getLevelsId()) {
            return false;
        }
        if (!Objects.equals(this.getFactionsId(), thatAccounts.getFactionsId())) {
            return false;
        }
        if (!Objects.equals(this.getAccountsHangarsId(), thatAccounts.getAccountsHangarsId())) {
            return false;
        }
        if (!Objects.equals(this.getClansId(), thatAccounts.getClansId())) {
            return false;
        }
        if (this.getRanksId() != thatAccounts.getRanksId()) {
            return false;
        }
        if (!Objects.equals(this.getName(), thatAccounts.getName())) {
            return false;
        }
        if (!Objects.equals(this.getBanDate(), thatAccounts.getBanDate())) {
            return false;
        }
        if (!Objects.equals(this.getPremiumDate(), thatAccounts.getPremiumDate())) {
            return false;
        }
        if (!Objects.equals(this.getDate(), thatAccounts.getDate())) {
            return false;
        }
        if (!Objects.equals(this.getLastLogin(), thatAccounts.getLastLogin())) {
            return false;
        }
        if (this.getSkillPointsTotal() != thatAccounts.getSkillPointsTotal()) {
            return false;
        }
        if (this.getSkillPointsFree() != thatAccounts.getSkillPointsFree()) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getUsersId());
        hash = 31 * hash + Objects.hashCode(getSessionId());
        hash = 31 * hash + Byte.hashCode(getLevelsId());
        hash = 31 * hash + Objects.hashCode(getFactionsId());
        hash = 31 * hash + Objects.hashCode(getAccountsHangarsId());
        hash = 31 * hash + Objects.hashCode(getClansId());
        hash = 31 * hash + Byte.hashCode(getRanksId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Objects.hashCode(getBanDate());
        hash = 31 * hash + Objects.hashCode(getPremiumDate());
        hash = 31 * hash + Objects.hashCode(getDate());
        hash = 31 * hash + Objects.hashCode(getLastLogin());
        hash = 31 * hash + Short.hashCode(getSkillPointsTotal());
        hash = 31 * hash + Short.hashCode(getSkillPointsFree());
        return hash;
    }
}