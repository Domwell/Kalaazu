package com.manulaiko.kalaazu.persistence.database.entities.maps_stations.generated;

import com.manulaiko.kalaazu.math.Vector2;
import com.manulaiko.kalaazu.persistence.database.entities.Factions;
import com.manulaiko.kalaazu.persistence.database.entities.Maps;
import com.manulaiko.kalaazu.persistence.database.entities.MapsStations;
import com.speedment.common.annotation.GeneratedCode;
import com.manulaiko.kalaazu.persistence.database.entities.Manager;
import com.speedment.runtime.core.util.OptionalUtil;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * MapsStations}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMapsStationsImpl implements MapsStations {

    private byte    id;

    private Vector2 position;

    private Byte    mapsId;

    private Byte    factionsId;

    protected GeneratedMapsStationsImpl() {

    }

    @Override
    public Byte getId() {
        return id;
    }

    @Override
    public Vector2 getPosition() {
        return position;
    }

    @Override
    public Optional<Byte> getMapsId() {
        return Optional.ofNullable(mapsId);
    }

    @Override
    public Optional<Byte> getFactionsId() {
        return Optional.ofNullable(factionsId);
    }

    @Override
    public MapsStations setId(byte id) {
        this.id = id;
        return this;
    }

    @Override
    public MapsStations setPosition(Vector2 position) {
        this.position = position;
        return this;
    }

    @Override
    public MapsStations setMapsId(Byte mapsId) {
        this.mapsId = mapsId;
        return this;
    }

    @Override
    public MapsStations setFactionsId(Byte factionsId) {
        this.factionsId = factionsId;
        return this;
    }

    @Override
    public Optional<Maps> findMapsId(Manager<Maps> foreignManager) {
        if (getMapsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Maps.ID.equal(getMapsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (getFactionsId().isPresent()) {
            return foreignManager.stream()
                                 .filter(Factions.ID.equal(getFactionsId().get()))
                                 .findAny();
        } else {
            return Optional.empty();
        }
    }

    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = " + Objects.toString(getId()));
        sj.add("position = " + Objects.toString(getPosition()));
        sj.add("mapsId = " + Objects.toString(OptionalUtil.unwrap(getMapsId())));
        sj.add("factionsId = " + Objects.toString(OptionalUtil.unwrap(getFactionsId())));
        return "MapsStationsImpl " + sj.toString();
    }

    @Override
    public boolean equals(Object that) {
        if (this == that) {
            return true;
        }
        if (!(that instanceof MapsStations)) {
            return false;
        }
        final MapsStations thatMapsStations = (MapsStations) that;
        if (this.getId() != thatMapsStations.getId()) {
            return false;
        }
        if (!Objects.equals(this.getPosition(), thatMapsStations.getPosition())) {
            return false;
        }
        if (!Objects.equals(this.getMapsId(), thatMapsStations.getMapsId())) {
            return false;
        }
        if (!Objects.equals(this.getFactionsId(), thatMapsStations.getFactionsId())) {
            return false;
        }
        return true;
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Byte.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getPosition());
        hash = 31 * hash + Objects.hashCode(getMapsId());
        hash = 31 * hash + Objects.hashCode(getFactionsId());
        return hash;
    }
}