package com.manulaiko.kalaazu.persistence.database.entities.maps_stations.generated;

import com.manulaiko.kalaazu.persistence.database.entities.factions.Factions;
import com.manulaiko.kalaazu.persistence.database.entities.maps.Maps;
import com.manulaiko.kalaazu.persistence.database.entities.maps_stations.MapsStations;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.maps_stations.MapsStations}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedMapsStationsImpl implements MapsStations {
    
    private int id;
    private String position;
    private Integer mapsId;
    private Integer factionsId;
    
    protected GeneratedMapsStationsImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getPosition() {
        return position;
    }
    
    @Override
    public OptionalInt getMapsId() {
        return OptionalUtil.ofNullable(mapsId);
    }
    
    @Override
    public OptionalInt getFactionsId() {
        return OptionalUtil.ofNullable(factionsId);
    }
    
    @Override
    public MapsStations setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public MapsStations setPosition(String position) {
        this.position = position;
        return this;
    }
    
    @Override
    public MapsStations setMapsId(Integer mapsId) {
        this.mapsId = mapsId;
        return this;
    }
    
    @Override
    public MapsStations setFactionsId(Integer factionsId) {
        this.factionsId = factionsId;
        return this;
    }
    
    @Override
    public Optional<Maps> findMapsId(Manager<Maps> foreignManager) {
        if (getMapsId().isPresent()) {
            return foreignManager.stream().filter(Maps.ID.equal(getMapsId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public Optional<Factions> findFactionsId(Manager<Factions> foreignManager) {
        if (getFactionsId().isPresent()) {
            return foreignManager.stream().filter(Factions.ID.equal(getFactionsId().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("position = "   + Objects.toString(getPosition()));
        sj.add("mapsId = "     + Objects.toString(OptionalUtil.unwrap(getMapsId())));
        sj.add("factionsId = " + Objects.toString(OptionalUtil.unwrap(getFactionsId())));
        return "MapsStationsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof MapsStations)) { return false; }
        final MapsStations thatMapsStations = (MapsStations)that;
        if (this.getId() != thatMapsStations.getId()) {return false; }
        if (!Objects.equals(this.getPosition(), thatMapsStations.getPosition())) {return false; }
        if (!Objects.equals(this.getMapsId(), thatMapsStations.getMapsId())) {return false; }
        if (!Objects.equals(this.getFactionsId(), thatMapsStations.getFactionsId())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getPosition());
        hash = 31 * hash + Objects.hashCode(getMapsId());
        hash = 31 * hash + Objects.hashCode(getFactionsId());
        return hash;
    }
}