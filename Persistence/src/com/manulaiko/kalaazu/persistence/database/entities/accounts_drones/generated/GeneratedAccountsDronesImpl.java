package com.manulaiko.kalaazu.persistence.database.entities.accounts_drones.generated;

import com.manulaiko.kalaazu.persistence.database.entities.accounts.Accounts;
import com.manulaiko.kalaazu.persistence.database.entities.accounts_drones.AccountsDrones;
import com.manulaiko.kalaazu.persistence.database.entities.levels.Levels;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.accounts_drones.AccountsDrones}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedAccountsDronesImpl implements AccountsDrones {
    
    private int id;
    private int accountsId;
    private int levelsId;
    private int experience;
    private Timestamp date;
    
    protected GeneratedAccountsDronesImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getAccountsId() {
        return accountsId;
    }
    
    @Override
    public int getLevelsId() {
        return levelsId;
    }
    
    @Override
    public int getExperience() {
        return experience;
    }
    
    @Override
    public Timestamp getDate() {
        return date;
    }
    
    @Override
    public AccountsDrones setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public AccountsDrones setAccountsId(int accountsId) {
        this.accountsId = accountsId;
        return this;
    }
    
    @Override
    public AccountsDrones setLevelsId(int levelsId) {
        this.levelsId = levelsId;
        return this;
    }
    
    @Override
    public AccountsDrones setExperience(int experience) {
        this.experience = experience;
        return this;
    }
    
    @Override
    public AccountsDrones setDate(Timestamp date) {
        this.date = date;
        return this;
    }
    
    @Override
    public Accounts findAccountsId(Manager<Accounts> foreignManager) {
        return foreignManager.stream().filter(Accounts.ID.equal(getAccountsId())).findAny().orElse(null);
    }
    
    @Override
    public Levels findLevelsId(Manager<Levels> foreignManager) {
        return foreignManager.stream().filter(Levels.ID.equal(getLevelsId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "         + Objects.toString(getId()));
        sj.add("accountsId = " + Objects.toString(getAccountsId()));
        sj.add("levelsId = "   + Objects.toString(getLevelsId()));
        sj.add("experience = " + Objects.toString(getExperience()));
        sj.add("date = "       + Objects.toString(getDate()));
        return "AccountsDronesImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof AccountsDrones)) { return false; }
        final AccountsDrones thatAccountsDrones = (AccountsDrones)that;
        if (this.getId() != thatAccountsDrones.getId()) {return false; }
        if (this.getAccountsId() != thatAccountsDrones.getAccountsId()) {return false; }
        if (this.getLevelsId() != thatAccountsDrones.getLevelsId()) {return false; }
        if (this.getExperience() != thatAccountsDrones.getExperience()) {return false; }
        if (!Objects.equals(this.getDate(), thatAccountsDrones.getDate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getAccountsId());
        hash = 31 * hash + Integer.hashCode(getLevelsId());
        hash = 31 * hash + Integer.hashCode(getExperience());
        hash = 31 * hash + Objects.hashCode(getDate());
        return hash;
    }
}