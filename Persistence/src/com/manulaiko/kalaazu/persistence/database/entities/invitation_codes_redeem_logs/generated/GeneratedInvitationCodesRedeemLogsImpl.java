package com.manulaiko.kalaazu.persistence.database.entities.invitation_codes_redeem_logs.generated;

import com.manulaiko.kalaazu.persistence.database.entities.invitation_codes.InvitationCodes;
import com.manulaiko.kalaazu.persistence.database.entities.invitation_codes_redeem_logs.InvitationCodesRedeemLogs;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import java.sql.Timestamp;
import java.util.Objects;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.invitation_codes_redeem_logs.InvitationCodesRedeemLogs}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedInvitationCodesRedeemLogsImpl implements InvitationCodesRedeemLogs {
    
    private int id;
    private int invitationCodesId;
    private Object ip;
    private Timestamp date;
    
    protected GeneratedInvitationCodesRedeemLogsImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public int getInvitationCodesId() {
        return invitationCodesId;
    }
    
    @Override
    public Object getIp() {
        return ip;
    }
    
    @Override
    public Timestamp getDate() {
        return date;
    }
    
    @Override
    public InvitationCodesRedeemLogs setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public InvitationCodesRedeemLogs setInvitationCodesId(int invitationCodesId) {
        this.invitationCodesId = invitationCodesId;
        return this;
    }
    
    @Override
    public InvitationCodesRedeemLogs setIp(Object ip) {
        this.ip = ip;
        return this;
    }
    
    @Override
    public InvitationCodesRedeemLogs setDate(Timestamp date) {
        this.date = date;
        return this;
    }
    
    @Override
    public InvitationCodes findInvitationCodesId(Manager<InvitationCodes> foreignManager) {
        return foreignManager.stream().filter(InvitationCodes.ID.equal(getInvitationCodesId())).findAny().orElse(null);
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "                + Objects.toString(getId()));
        sj.add("invitationCodesId = " + Objects.toString(getInvitationCodesId()));
        sj.add("ip = "                + Objects.toString(getIp()));
        sj.add("date = "              + Objects.toString(getDate()));
        return "InvitationCodesRedeemLogsImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof InvitationCodesRedeemLogs)) { return false; }
        final InvitationCodesRedeemLogs thatInvitationCodesRedeemLogs = (InvitationCodesRedeemLogs)that;
        if (this.getId() != thatInvitationCodesRedeemLogs.getId()) {return false; }
        if (this.getInvitationCodesId() != thatInvitationCodesRedeemLogs.getInvitationCodesId()) {return false; }
        if (!Objects.equals(this.getIp(), thatInvitationCodesRedeemLogs.getIp())) {return false; }
        if (!Objects.equals(this.getDate(), thatInvitationCodesRedeemLogs.getDate())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Integer.hashCode(getInvitationCodesId());
        hash = 31 * hash + Objects.hashCode(getIp());
        hash = 31 * hash + Objects.hashCode(getDate());
        return hash;
    }
}