package com.manulaiko.kalaazu.persistence.database.entities.news.generated;

import com.manulaiko.kalaazu.persistence.database.entities.news.News;
import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.ShortField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

import java.sql.Timestamp;

/**
 * The generated base for the {@link
 * com.manulaiko.kalaazu.persistence.database.entities.news.News}-interface
 * representing entities of the {@code news}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 *
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedNews {

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getId()} method.
     */
    ShortField<News, Short>                     ID     = ShortField.create(
            Identifier.ID,
            News::getId,
            News::setId,
            TypeMapper.primitive(),
            true
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getDate()} method.
     */
    ComparableField<News, Timestamp, Timestamp> DATE   = ComparableField.create(
            Identifier.DATE,
            News::getDate,
            News::setDate,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getImage()} method.
     */
    StringField<News, String>                   IMAGE  = StringField.create(
            Identifier.IMAGE,
            News::getImage,
            News::setImage,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getTitle()} method.
     */
    StringField<News, String>                   TITLE  = StringField.create(
            Identifier.TITLE,
            News::getTitle,
            News::setTitle,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getTeaser()} method.
     */
    StringField<News, String>                   TEASER = StringField.create(
            Identifier.TEASER,
            News::getTeaser,
            News::setTeaser,
            TypeMapper.identity(),
            false
    );

    /**
     * This Field corresponds to the {@link News} field that can be obtained
     * using the {@link News#getText()} method.
     */
    StringField<News, String>                   TEXT   = StringField.create(
            Identifier.TEXT,
            News::getText,
            News::setText,
            TypeMapper.identity(),
            false
    );

    /**
     * Returns the id of this News. The id field corresponds to the database
     * column kalaazu.kalaazu.news.id.
     *
     * @return the id of this News
     */
    short getId();

    /**
     * Returns the date of this News. The date field corresponds to the database
     * column kalaazu.kalaazu.news.date.
     *
     * @return the date of this News
     */
    Timestamp getDate();

    /**
     * Returns the image of this News. The image field corresponds to the
     * database column kalaazu.kalaazu.news.image.
     *
     * @return the image of this News
     */
    String getImage();

    /**
     * Returns the title of this News. The title field corresponds to the
     * database column kalaazu.kalaazu.news.title.
     *
     * @return the title of this News
     */
    String getTitle();

    /**
     * Returns the teaser of this News. The teaser field corresponds to the
     * database column kalaazu.kalaazu.news.teaser.
     *
     * @return the teaser of this News
     */
    String getTeaser();

    /**
     * Returns the text of this News. The text field corresponds to the database
     * column kalaazu.kalaazu.news.text.
     *
     * @return the text of this News
     */
    String getText();

    /**
     * Sets the id of this News. The id field corresponds to the database column
     * kalaazu.kalaazu.news.id.
     *
     * @param id to set of this News
     *
     * @return this News instance
     */
    News setId(short id);

    /**
     * Sets the date of this News. The date field corresponds to the database
     * column kalaazu.kalaazu.news.date.
     *
     * @param date to set of this News
     *
     * @return this News instance
     */
    News setDate(Timestamp date);

    /**
     * Sets the image of this News. The image field corresponds to the database
     * column kalaazu.kalaazu.news.image.
     *
     * @param image to set of this News
     *
     * @return this News instance
     */
    News setImage(String image);

    /**
     * Sets the title of this News. The title field corresponds to the database
     * column kalaazu.kalaazu.news.title.
     *
     * @param title to set of this News
     *
     * @return this News instance
     */
    News setTitle(String title);

    /**
     * Sets the teaser of this News. The teaser field corresponds to the
     * database column kalaazu.kalaazu.news.teaser.
     *
     * @param teaser to set of this News
     *
     * @return this News instance
     */
    News setTeaser(String teaser);

    /**
     * Sets the text of this News. The text field corresponds to the database
     * column kalaazu.kalaazu.news.text.
     *
     * @param text to set of this News
     *
     * @return this News instance
     */
    News setText(String text);

    enum Identifier implements ColumnIdentifier<News> {

        ID("id"),
        DATE("date"),
        IMAGE("image"),
        TITLE("title"),
        TEASER("teaser"),
        TEXT("text");

        private final String                columnName;

        private final TableIdentifier<News> tableIdentifier;

        Identifier(String columnName) {
            this.columnName = columnName;
            this.tableIdentifier = TableIdentifier.of(
                    getDbmsName(),
                    getSchemaName(),
                    getTableName()
            );
        }

        @Override
        public String getDbmsName() {
            return "kalaazu";
        }

        @Override
        public String getSchemaName() {
            return "kalaazu";
        }

        @Override
        public String getTableName() {
            return "news";
        }

        @Override
        public String getColumnName() {
            return this.columnName;
        }

        @Override
        public TableIdentifier<News> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}